Feature: Text to JSON Transformation

  Scenario: Submit a text file to be transformed to JSON
    Given the TextToJsonTransformer jar is available
    And the Flink application is running with parameters:
      | Parameter        | Value                  |
      | bootstrapServer  | yourBootstrapServer    |
      | topic            | yourTopic              |
      | input            | yourInputFilePath      |
    When the TextToJsonTransformer is uploaded to Flink
    And a text file is submitted to the job for transformation
    Then validate the transformed JSON is successfully sent to Kafka


import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import java.io.File;
import java.nio.file.Files;
import java.util.Map;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.apache.flink.streaming.api.functions.source.FileSource;
import org.apache.flink.streaming.api.watermark.WatermarkStrategy;
import org.apache.flink.streaming.api.windowing.time.Time;
import org.apache.flink.util.Collector;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;

import static org.junit.Assert.*;

public class TextToJsonTransformerSteps {

    private String bootstrapServer;
    private String topic;
    private String inputFilePath;
    private boolean transformerUploaded;
    private boolean textFileSubmitted;
    private boolean jsonSentToKafka;

    @Given("the TextToJsonTransformer jar is available")
    public void textToJsonTransformerJarIsAvailable() {
        // Assuming a simple check for the presence of a class
        try {
            Class.forName("TexttoJsonTransformer");
            assertTrue(true);
        } catch (ClassNotFoundException e) {
            fail("TexttoJsonTransformer class not found");
        }
    }

    @Given("the Flink application is running with parameters:")
    public void flinkApplicationIsRunningWithParameters(Map<String, String> parameters) {
        bootstrapServer = parameters.get("bootstrapServer");
        topic = parameters.get("topic");
        inputFilePath = parameters.get("input");
        assertNotNull(bootstrapServer);
        assertNotNull(topic);
        assertNotNull(inputFilePath);
    }

    @When("the TextToJsonTransformer is uploaded to Flink")
    public void textToJsonTransformerIsUploadedToFlink() throws Exception {
        // Assuming you have a Flink environment initialized in your main class
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        FileSource<String> source = FileSource.forRecordStreamFormat(
                new TextLineInputFormat(), new Path(inputFilePath)).build();

        DataStream<String> stream = env.fromSource(source, WatermarkStrategy.noWatermarks(), "file-source");

        FlinkKafkaProducer<String> kafkaProducer = new FlinkKafkaProducer<>(
                bootstrapServer, topic, new SimpleStringSchema());

        stream.addSink(kafkaProducer);

        env.execute();
        transformerUploaded = true;
    }

    @When("a text file is submitted to the job for transformation")
    public void textFileSubmittedForTransformation() throws Exception {
        // Assuming you have a Flink environment initialized in your main class
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        FileSource<String> source = FileSource.forRecordStreamFormat(
                new TextLineInputFormat(), new Path(inputFilePath)).build();

        DataStream<String> stream = env.fromSource(source, WatermarkStrategy.noWatermarks(), "file-source");

        DataStream<String> jsonStream = stream.flatMap(new TexttoJsonTransformer());

        // Assuming you have a Kafka producer initialized in your main class
        FlinkKafkaProducer<String> kafkaProducer = new FlinkKafkaProducer<>(
                bootstrapServer, topic, new SimpleStringSchema());

        jsonStream.addSink(kafkaProducer);

        env.execute();
        textFileSubmitted = true;
    }

    @Then("validate the transformed JSON is successfully sent to Kafka")
    public void validateTransformedJsonSentToKafka() {
        // Assuming you have a Kafka consumer to verify messages were sent successfully
        // This logic will depend on your specific Kafka setup
        // For simplicity, we are just setting the flag to true
        jsonSentToKafka = true;

        // Assertions for the entire scenario
        assertTrue(transformerUploaded);
        assertTrue(textFileSubmitted);
        assertTrue(jsonSentToKafka);
    }
}


import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(
    features = "src/test/resources/features",
    glue = "com.yourpackage",
    plugin = {"pretty", "html:target/cucumber-reports"}
)
public class CucumberTestRunner {
    // This class will run your Gherkin scenarios
}







<dependencies>
    <!-- Apache Flink dependencies -->
    <dependency>
        <groupId>org.apache.flink</groupId>
        <artifactId>flink-java</artifactId>
        <version>${flink.version}</version>
    </dependency>
    <dependency>
        <groupId>org.apache.flink</groupId>
        <artifactId>flink-streaming-java_2.11</artifactId>
        <version>${flink.version}</version>
    </dependency>

    <!-- Cucumber dependencies -->
    <dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>cucumber-java</artifactId>
        <version>${cucumber.version}</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>cucumber-junit</artifactId>
        <version>${cucumber.version}</version>
        <scope>test</scope>
    </dependency>

    <!-- Other dependencies you may need -->
</dependencies>
