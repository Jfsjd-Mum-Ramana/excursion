To incorporate scatter plot functionality in your application, we need to ensure the repository queries and APIs are correctly aligned with the requirements. Below is the implementation of the repository and two GraphQL APIs for scatter plot data:


---

Updated Repository Implementation

Repository Interface

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPAlarmMetricsRepository extends JpaRepository<UCSPAlarmMetrics, Long> {

    /**
     * Retrieves scatter plot data for a specific protocol and metric type.
     *
     * @param protocol The protocol to filter (e.g., SNMP).
     * @param metricType The metric type (e.g., number_of_msgs, size_of_msgs).
     * @return List of scatter plot data points.
     */
    @Query("SELECT m FROM UCSPAlarmMetrics m " +
           "JOIN m.ucspAlarmInventory i " +
           "WHERE i.ucgSource = :protocol AND " +
           "((:metricType = 'number_of_msgs' AND m.numberOfMsgs IS NOT NULL) OR " +
           "(:metricType = 'size_of_msgs' AND m.sizeOfMsgs IS NOT NULL))")
    List<UCSPAlarmMetrics> findScatterPlotData(String protocol, String metricType);

    /**
     * Retrieves data filtered by protocol.
     *
     * @param protocol The protocol to filter (e.g., SNMP).
     * @return List of UCSPAlarmMetrics filtered by protocol.
     */
    @Query("SELECT m FROM UCSPAlarmMetrics m " +
           "JOIN m.ucspAlarmInventory i " +
           "WHERE i.ucgSource = :protocol")
    List<UCSPAlarmMetrics> findByProtocol(String protocol);
}


---

Updated Controller Implementation

Controller Class

package com.verizon.ucs.restapi.controller;

import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.service.UCSPAlarmService;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.util.List;

@Controller
public class UCSPAlarmController {

    private final UCSPAlarmService ucspAlarmService;

    public UCSPAlarmController(UCSPAlarmService ucspAlarmService) {
        this.ucspAlarmService = ucspAlarmService;
    }

    /**
     * API to get scatter plot data for a specific protocol and metric type.
     *
     * @param protocol The protocol to filter (e.g., SNMP, WSS).
     * @param metricType The metric type to visualize (e.g., number_of_msgs, size_of_msgs).
     * @return List of UCSPAlarmMetrics data points for the scatter plot.
     */
    @QueryMapping
    public List<UCSPAlarmMetrics> getScatterPlotData(
            @Argument String protocol,
            @Argument String metricType
    ) {
        return ucspAlarmService.getScatterPlotData(protocol, metricType);
    }

    /**
     * API to filter data by protocol.
     *
     * @param protocol The protocol to filter (e.g., SNMP, WSS).
     * @return List of UCSPAlarmMetrics filtered by the specified protocol.
     */
    @QueryMapping
    public List<UCSPAlarmMetrics> filterDataByProtocol(@Argument String protocol) {
        return ucspAlarmService.filterDataByProtocol(protocol);
    }
}


---

Updated Service Layer

Service Implementation

package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.repository.UCSPAlarmMetricsRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UCSPAlarmService {

    private final UCSPAlarmMetricsRepository metricsRepository;

    public UCSPAlarmService(UCSPAlarmMetricsRepository metricsRepository) {
        this.metricsRepository = metricsRepository;
    }

    public List<UCSPAlarmMetrics> getScatterPlotData(String protocol, String metricType) {
        return metricsRepository.findScatterPlotData(protocol, metricType);
    }

    public List<UCSPAlarmMetrics> filterDataByProtocol(String protocol) {
        return metricsRepository.findByProtocol(protocol);
    }
}


---

GraphQL Schema

Update your GraphQL schema (schema.graphqls) to include the following queries:

type Query {
    getScatterPlotData(protocol: String!, metricType: String!): [UCSPAlarmMetrics!]!
    filterDataByProtocol(protocol: String!): [UCSPAlarmMetrics!]!
}

type UCSPAlarmMetrics {
    id: ID!
    ucspAlarmInventory: UCSPAlarmInventory
    lastUpdated: String
    numberOfMsgs: Long
    sizeOfMsgs: Long
}

type UCSPAlarmInventory {
    id: ID!
    collectionName: String!
    deviceName: String!
    deviceIp: String!
    ucgSource: String!
    vendor: String!
}


---

Explanation of Scatter Plot Query

1. getScatterPlotData API:

Accepts protocol and metricType as arguments.

Uses metricType to dynamically determine whether to filter by number_of_msgs or size_of_msgs.

Joins UCSPAlarmMetrics and UCSPAlarmInventory to fetch metadata for scatter plot points.



2. filterDataByProtocol API:

Retrieves all UCSPAlarmMetrics entries associated with the specified protocol.

Can be used for filtering and exploring data by protocol.





---

Testing Queries

Query 1: Scatter Plot Data

query GetScatterPlotData($protocol: String!, $metricType: String!) {
  getScatterPlotData(protocol: $protocol, metricType: $metricType) {
    id
    ucspAlarmInventory {
      collectionName
    }
    lastUpdated
    numberOfMsgs
    sizeOfMsgs
  }
}

Variables:

{
  "protocol": "SNMP",
  "metricType": "number_of_msgs"
}

Query 2: Filter Data by Protocol

query FilterDataByProtocol($protocol: String!) {
  filterDataByProtocol(protocol: $protocol) {
    id
    ucspAlarmInventory {
      collectionName
    }
    lastUpdated
    numberOfMsgs
    sizeOfMsgs
  }
}

Variables:

{
  "protocol": "SNMP"
}

Use Postman, GraphQL Playground, or Insomnia for testing, ensuring the database has data matching the query criteria. Let me know if further assistance is required!

