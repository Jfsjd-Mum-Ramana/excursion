To address the issue you're facing with the ConverterNotFoundException, it seems like there's a problem with the conversion of the Tuple result to your ScatterPlotData model. We can resolve this by ensuring proper mapping and conversion between the query results and the model.

Here's an updated set of classes that includes the necessary mapping for your scatter plot data.

1. UCSPAlarmController.java (Updated)

package com.verizon.ucs.restapi.controllers;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.service.UCSPAlarmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class UCSPAlarmController {

    @Autowired
    private UCSPAlarmService alarmService;

    // Query to get data by protocol (Inventory)
    @QueryMapping
    public List<UCSPAlarmInventory> filterDataByProtocol(@Argument String protocol) {
        return alarmService.getInventoryByProtocol(protocol);
    }

    // Query to get scatter plot data by protocol
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotDataByProtocol(@Argument String protocol) {
        return alarmService.getScatterPlotDataByProtocol(protocol);
    }

    // Query to get metrics data by protocol
    @QueryMapping
    public List<UCSPAlarmMetrics> filterMetricsByProtocol(@Argument String protocol) {
        return alarmService.getMetricsByProtocol(protocol);
    }
}

2. UCSPAlarmMetricsRepository.java (Updated)

The key change here is using a DTO (like ScatterPlotData) for the query result. Also, ensure you're using @Query properly for conversion to the custom data model.


package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPAlarmMetricsRepository extends JpaRepository<UCSPAlarmMetrics, Long> {
    Logger logger = LoggerFactory.getLogger(UCSPAlarmMetricsRepository.class);

    // Query to get scatter plot data by protocol (aggregation based on protocol)
    @Query("SELECT new com.verizon.ucs.restapi.model.ScatterPlotData(" +
            "c.collectionName, " +
            "FUNCTION('TO_CHAR', m.lastUpdated, 'YYYY-MM-DD'), " +
            "m.sizeOfMsgs) " +
            "FROM UCSPAlarmInventory c " +
            "JOIN UCSPAlarmMetrics m ON c.collectionName = m.collectionName " +
            "WHERE c.ucgSource = :protocol")
    List<ScatterPlotData> findScatterPlotDataByProtocol(@Param("protocol") String protocol);

    // Fetch metrics by protocol
    @Query("SELECT m FROM UCSPAlarmMetrics m WHERE m.ucspAlarmInventory.ucgSource = :protocol")
    List<UCSPAlarmMetrics> findMetricsByProtocol(@Param("protocol") String protocol);
}

3. UCSPAlarmInventoryRepository.java (No changes, just keeping it here for reference)

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPAlarmInventoryRepository extends JpaRepository<UCSPAlarmInventory, Long> {

    // Query to filter collections by protocol
    @Query("SELECT u FROM UCSPAlarmInventory u WHERE u.ucgSource = :protocol")
    List<UCSPAlarmInventory> findByProtocol(@Param("protocol") String protocol);
}

4. UCSPAlarmService.java (Updated)

I've added logging and a call to the repository that now directly returns the correctly mapped ScatterPlotData from the repository.


package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.repository.UCSPAlarmInventoryRepository;
import com.verizon.ucs.restapi.repository.UCSPAlarmMetricsRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UCSPAlarmService {

    Logger logger = LoggerFactory.getLogger(UCSPAlarmService.class);

    @Autowired
    private UCSPAlarmInventoryRepository inventoryRepository;

    @Autowired
    private UCSPAlarmMetricsRepository metricsRepository;

    // Fetch data by protocol (inventory)
    public List<UCSPAlarmInventory> getInventoryByProtocol(String protocol) {
        return inventoryRepository.findByProtocol(protocol);
    }

    // Fetch scatter plot data by protocol
    public List<ScatterPlotData> getScatterPlotDataByProtocol(String protocol) {
        logger.debug("Received request to fetch scatter plot data for protocol: " + protocol);
        List<ScatterPlotData> scatterPlotData = metricsRepository.findScatterPlotDataByProtocol(protocol);
        logger.debug("Returning scatter plot data: " + scatterPlotData);
        return scatterPlotData;
    }

    // Fetch metrics by protocol
    public List<UCSPAlarmMetrics> getMetricsByProtocol(String protocol) {
        return metricsRepository.findMetricsByProtocol(protocol);
    }
}

5. ScatterPlotData.java (DTO Class) (Updated)

Make sure your ScatterPlotData class is set up to match the result structure. It's a Data Transfer Object (DTO) for the scatter plot data:

package com.verizon.ucs.restapi.model;

public class ScatterPlotData {

    private String collectionName;
    private String date;
    private Long yValue;

    // Constructor
    public ScatterPlotData(String collectionName, String date, Long yValue) {
        this.collectionName = collectionName;
        this.date = date;
        this.yValue = yValue;
    }

    // Getters and Setters
    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public Long getyValue() {
        return yValue;
    }

    public void setyValue(Long yValue) {
        this.yValue = yValue;
    }

    @Override
    public String toString() {
        return "ScatterPlotData{" +
                "collectionName='" + collectionName + '\'' +
                ", date='" + date + '\'' +
                ", yValue=" + yValue +
                '}';
    }
}

Explanation of Changes:

1. JPQL Query in UCSPAlarmMetricsRepository:

I've updated the query to use the new keyword to directly map the result of the query to a ScatterPlotData object.

The function TO_CHAR is used to format the lastUpdated timestamp as a string in the format YYYY-MM-DD.



2. ScatterPlotData Class:

This is a simple DTO that matches the data required for the scatter plot (collectionName, date, and yValue).



3. Service Layer:

The service layer now calls the repository methods directly, which return ScatterPlotData objects. This allows your GraphQL controller to send the data in the format required for the scatter plot visualization.




This should resolve the ConverterNotFoundException as we're now directly mapping the query results to the ScatterPlotData class without requiring an additional conversion step.

