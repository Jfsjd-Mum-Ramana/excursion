To ensure the filterDataByProtocol and availableProtocols APIs work like the getScatterPlotData API, I will modify the implementation to follow the same pattern. Here's how you can achieve this:


---

Updated Implementation

Controller

Update the controller to ensure consistent behavior across APIs.

@RestController
public class UCSPAlarmController {

    @Autowired
    private UCSPAlarmService alarmService;

    // Query to get data by protocol (Inventory)
    @QueryMapping
    public List<UCSPAlarmInventory> filterDataByProtocol(@Argument String protocol) {
        return alarmService.getInventoryByProtocol(protocol);
    }

    // Query to get available protocols
    @QueryMapping
    public List<String> availableProtocols() {
        return alarmService.getAvailableProtocols();
    }

    // Existing scatter plot data API (unchanged)
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotDataByProtocol(@Argument String protocol) {
        return alarmService.getScatterPlotDataByProtocol(protocol);
    }
}


---

Service

Update the service to fetch data for the new APIs.

@Service
public class UCSPAlarmService {

    Logger logger = LoggerFactory.getLogger(UCSPAlarmService.class);

    @Autowired
    private UCSPAlarmInventoryRepository inventoryRepository;

    @Autowired
    private UCSPAlarmMetricsRepository metricsRepository;

    // Fetch inventory data by protocol
    public List<UCSPAlarmInventory> getInventoryByProtocol(String protocol) {
        logger.info("Fetching inventory data for protocol: " + protocol);
        return inventoryRepository.findByProtocol(protocol);
    }

    // Fetch available protocols
    public List<String> getAvailableProtocols() {
        logger.info("Fetching available protocols");
        return inventoryRepository.findDistinctProtocols();
    }

    // Existing scatter plot data API (unchanged)
    public List<ScatterPlotData> getScatterPlotDataByProtocol(String protocol) {
        logger.info("Fetching scatter plot data for protocol: " + protocol);
        return metricsRepository.findScatterPlotDataByProtocol(protocol);
    }
}


---

Repository

Add the required repository methods for availableProtocols.

@Repository
public interface UCSPAlarmInventoryRepository extends JpaRepository<UCSPAlarmInventory, Long> {

    // Query to filter collections by protocol
    @Query("SELECT u FROM UCSPAlarmInventory u WHERE u.ucgSource = :protocol")
    List<UCSPAlarmInventory> findByProtocol(@Param("protocol") String protocol);

    // Query to fetch distinct protocols
    @Query("SELECT DISTINCT u.ucgSource FROM UCSPAlarmInventory u")
    List<String> findDistinctProtocols();
}


---

GraphQL Queries

1. Query: filterDataByProtocol

To fetch inventory data by protocol:

query {
  filterDataByProtocol(protocol: "SNMP") {
    id
    collectionName
    deviceName
    deviceIp
    ucgSource
    vendor
  }
}

2. Query: availableProtocols

To fetch the list of available protocols:

query {
  availableProtocols
}


---

Expected Output

Output for filterDataByProtocol

{
  "data": {
    "filterDataByProtocol": [
      {
        "id": 1,
        "collectionName": "Collection1",
        "deviceName": "DeviceA",
        "deviceIp": "192.168.1.1",
        "ucgSource": "SNMP",
        "vendor": "VendorX"
      }
    ]
  }
}

Output for availableProtocols

{
  "data": {
    "availableProtocols": ["SNMP", "WSS", "gRPC", "TL1", "syslog"]
  }
}


---

Testing Steps

1. Start Your Application: Ensure the Spring Boot application is running on the default port (e.g., http://localhost:8080/graphql).


2. Use GraphQL Client: Open your preferred GraphQL client (e.g., GraphQL Playground or Postman).


3. Run the Queries: Copy and paste the queries above into the client, then execute them.


4. Verify the Results: Check the responses against the expected output.



Let me know if any issues persist, and I'll assist further!

