export const UNIQUE_MODELS_QUERY = `
    query{
        uniqueModels
    }
`;

export const UNIQUE_VENDORS_QUERY = `
    query{
        uniqueVendors
    }
`;

export const UNIQUE_NETWORKS_QUERY = `
    query{
        uniqueNetworks
    }
`;
export const UNIQUE_UGS_SOURCE_QUERY = `
query GetUniqueUCGSourcesByProject($projectId: ID!) {
  uniqueUCGSourcesByProject(projectId: $projectId) {
    id
    name
  }
}
`;
export const UNIQUE_PROJECT_QUERY = `
query {
    uniqueUCSPProjects {
        id
        name                            
    }
}
`;

export const GET_DAILY_TRENDS_DATA = `query GetDailyTrends($ucgSourceID: Int!, $fromDate: String!, $toDate: String!) {
  dailyTrends(trendsRequest: { ucgSourceID: $ucgSourceID, fromDate: $fromDate, toDate: $toDate }) {
    date
    totalNumberOfFiles 
    totalSizeOfFilesBytes
    trendsDrillDownList{
      time
      sizeOfFilesBytes
      numberOfFiles
    }
  }
}`

export const GET_DEVICE_DETAILS = (selectedDeviceName: string, selectedDeviceModel: string, selectedDeviceIp: string, selectedDeviceVendor: string, selectedDeviceNetwork: string) => `
{
  searchDevices(apiRequest:{
		deviceName: "${selectedDeviceName}",
        model: "${selectedDeviceModel}",
        loopback: "${selectedDeviceIp}",
        vendor: "${selectedDeviceVendor}",
        network: "${selectedDeviceNetwork}"
  }){
    deviceName
    model
    vendor
    routerType
    status
    loopback
    routerType,
    network
    pollerCluster
    pollerInterval
    lastUpdate
    physIp
  }
}
`;


export const UNIQUE_NETWORKS_BY_PROTOCOL_QUERY = `
    query{
        uniqueNetworksByProtocol
    }
`;

export const AVG_NETWORK_BY_COVERAGE_QUERY = `
query AvgNetworkByCoverage($network: String!,$fromDate: String!,$toDate: String!,$device: String) {
  avgNetworkByCoverage(network: $network,fromDate:$fromDate,toDate: $toDate,device: $device) {
    date
    totalCoverage
    coverageDrillDownList {
      time
      coverage
    }
  }
}
`;
export const UNIQUE_DEVICES_BY_NETWORK_SNMP = `
query uniqueDevicesByNetwork($network: String!) {
  uniqueDevicesByNetwork(network: $network)
}`;


Here the backend schema follow exact steps and provide me full code 

type Query {
    allDevices: [Device]
    availableAlarmCollectionTypes: [AlarmCollectionType!]!
    avgNetworkByCoverage(network: String,fromDate: String,toDate: String,device: String): [AvgNetworkCoverageDTO]
    alarmMetrics(alarmMetricsRequest: AlarmMetricsRequest): [AlarmMetricsDTO]
    dailyTrends(trendsRequest: TrendsRequest): [TrendsDTO]
    searchAlarmInventory(alarmInventorySearchRequest:AlarmInventorySearchRequest): [UCSPAlarmInventory]
    searchDevices(apiRequest: ApiRequest): [Device]
    uniqueDevicesByNetwork(network: String): [String]
    uniqueModels: [String]
    uniqueNetworks: [String]
    uniqueNetworksByProtocol: [String]
    uniqueUCSPProjects:[UcspProject]
    uniqueUCGSources: [String]
    uniqueUCGSourcesByProject(projectId: ID): [UcspProject]
    uniqueVendors: [String]
    uniqueAlarmVendors: [String]
    uniqueAlarmModels: [String]
}
type AlarmCollectionType {
    typeId: Int
    type: String
}

type TrendsDrillDownData{
 	time: String
 	sizeOfFilesBytes: Float
 	numberOfFiles: Int
}
type TrendsDTO{
 	date: String
 	totalSizeOfFilesBytes: Float
 	totalNumberOfFiles: Int
 	trendsDrillDownList: [TrendsDrillDownData]
}

type AlarmMetricsDrillDownData{
    time: String
    sizeOfFilesBytes: Float
    numberOfFiles: Int
}
type AlarmMetricsDTO{
    date: String
    totalSizeOfFilesBytes: Float
    totalNumberOfFiles: Int
    alarmMetricsDrillDownList: [AlarmMetricsDrillDownData]
}
input AlarmMetricsRequest {
    collectionType: String
    fromDate: String
    toDate: String
}

type AvgNetworkCovDrillDownData {
    time: String
    coverage: Float
}

type AvgNetworkCoverageDTO {
    date: String
    totalCoverage: Float
    coverageDrillDownList: [AvgNetworkCovDrillDownData]
}


type Device {
    deviceName: ID!
    model: String
    loopback: String
    status: String
    vendor: String
    routerType: String
    pollerCluster: String
    pollerInterval: Int
    network: String
    lastUpdate: String
    physIp: String
}
type UcspProject{
    id:ID!
    name:String!
}


input TrendsRequest {
    ucgSourceID: Int
    fromDate: String
    toDate: String
}

type Trends {
    id: ID!
    ucgSourceID: Int
    collectionDate: String
    sizeOfFilesKB: Int
    numberOfFiles: Int
}

input ApiRequest {
    deviceName: String
    model: String
    loopback: String
    vendor: String
    network: String
}

input AlarmInventorySearchRequest {
    deviceName: String
    collectionType: String
    model: String
    vendor: String
    deviceIp: String
}
type UCSPAlarmInventory {
    id: Int 
    collectionType: String
    deviceName: String 
    deviceIp: String 
    model: String 
    vendor: String 
    routerType: String 
    status: String 
    loopback: String 
    network: String 
    pollerCluster: String 
    pollerInterval: String 
    lastUpdate: String 
    physIp: String 
}

please make usre that the page size and all the grida and everything same as dailytrend page
