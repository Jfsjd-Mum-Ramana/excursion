Here‚Äôs the updated scheduler with the necessary modifications to ensure it works correctly with the PostgreSQL function eclipse.delete_hpov_s2im_transactions.


---

‚úÖ Key Modifications

1. Uses PostgreSQL Function ‚Äì Calls eclipse.delete_hpov_s2im_transactions('dummy').


2. Handles API Call Properly ‚Äì Uses a RestTemplate to make a call to the database.


3. Improved Logging ‚Äì Logs success and failure details.


4. Reads Scheduler CRON from Configuration ‚Äì Ensures configurability.




---

1Ô∏è‚É£ Updated Java Scheduler Code

package com.verizon.ucs.service;

import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import com.verizon.ucs.model.DataWrapperDTO;
import com.verizon.ucs.properties.DbProperties;
import com.verizon.ucs.util.RestTemplateCustomizer;

@Component
public class TtlScheduler {
    private static final Logger logger = LoggerFactory.getLogger(TtlScheduler.class);

    @Autowired
    private RestTemplateCustomizer restTemplateCustomizer;

    @Autowired
    private DbProperties databaseConfig;

    @Autowired
    private RestTemplate restTemplate;

    // Run based on cron from application properties
    @Scheduled(cron = "${scheduler.ttl.cron}")
    public void scheduleTransactionCleanup() {
        logger.info("Starting scheduled transaction cleanup job...");

        try {
            DataWrapperDTO dto = new DataWrapperDTO();
            dto.setParameterList(new String[]{"dummy"});
            dto.setStpName(databaseConfig.getTransactionDeleteStpName()); // Should be "delete_hpov_s2im_transactions"

            // Call PostgreSQL function
            ResponseEntity<String> response = restTemplate.postForEntity(
                databaseConfig.getDatabaseUrl() + "/execute-function", 
                dto, 
                String.class
            );

            if (response.getStatusCode().is2xxSuccessful()) {
                logger.info("Successfully deleted old transactions: {}", response.getBody());
            } else {
                logger.error("Failed to delete transactions. Response: {}", response.getBody());
            }
        } catch (HttpClientErrorException | HttpServerErrorException e) {
            logger.error("HTTP error while calling delete_hpov_s2im_transactions", e);
        } catch (Exception e) {
            logger.error("Unexpected error while deleting transactions", e);
        }
    }
}


---

2Ô∏è‚É£ Changes in DbProperties.java

package com.verizon.ucs.properties;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Configuration
public class DbProperties {

    @Value("${database.transaction.delete.function}")
    private String transactionDeleteStpName; // Holds function name

    @Value("${database.url}")
    private String databaseUrl; // API endpoint for DB function execution

}


---

3Ô∏è‚É£ Add These to application.yml

scheduler:
  ttl:
    cron: "0 0 0 * * ?" # Runs daily at midnight

database:
  transaction:
    delete:
      function: "delete_hpov_s2im_transactions"
  url: "http://your-db-api-endpoint"


---

‚úÖ How It Works

The scheduler runs automatically at the configured time (0 0 0 * * ? ‚Üí midnight every day).

Calls PostgreSQL function delete_hpov_s2im_transactions('dummy').

Logs success and failure messages.



---

üéØ Next Steps

1. Verify PostgreSQL function is working correctly (run manually: SELECT eclipse.delete_hpov_s2im_transactions('dummy');).


2. Ensure the database API endpoint (database.url) is correctly set in application.yml.


3. Deploy & Test ‚Äì Run logs to confirm transactions older than 7 days are deleted.



This setup ensures dynamic configurations, no hardcoded values, and automated cleanup. üöÄ

