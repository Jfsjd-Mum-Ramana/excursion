Here is the full code with the adjustments you requested for the dashboard, integrating the GraphQL APIs and the updated schema:

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { __UCS_GRAPHQL_URL__ } from '../../api-endpoints';
import { SEARCH_ALARM_INVENTORY_QUERY, AVAILABLE_ALARM_COLLECTION_TYPES_QUERY, ALARM_METRICS_QUERY } from '../../graphQL/graphqlQueries';
import LoadingButton from "@mui/lab/LoadingButton";
import { LineChart } from '@mui/x-charts/LineChart';
import { AxisConfig, ChartsXAxisProps } from '@mui/x-charts';
import { Box, FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent, TextField, Autocomplete, Button, Breadcrumbs, Link, Typography } from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import dayjs, { Dayjs } from 'dayjs';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { useTheme } from "@mui/material/styles";
import { useSnackbar } from '../../utils/SnackbarContext';
import NavigateNextIcon from '@mui/icons-material/NavigateNext';
import HomeIcon from '@mui/icons-material/Home';

// Generate last 10 dates for the chart
const generateLast10Dates = () => {
    const dates = [];
    for (let i = 0; i < 10; i++) {
        dates.push(dayjs().subtract(i, 'day').format('YYYY-MM-DD'));
    }
    return dates;
};

// Data structures for the API response
interface DataPoint {
    date: string;
    totalNumberOfFiles: number;
    totalSizeOfFilesBytes: number;
    trendsDrillDownList: DetailedDataPoint[];
}

interface DetailedDataPoint {
    time: string;
    sizeOfFilesBytes: number;
    numberOfFiles: number;
}

const chartHeight = 450;
const childChartHeight = 410;

// Parent chart component
const ParentChart = ({ data, onDrillDown, setIsChildChartDisplayed }: { data: DataPoint[], onDrillDown: (date: string) => void, setIsChildChartDisplayed: (value: boolean) => void }) => {
    const theme = useTheme();

    const transformedData = data.map(item => ({
        collectionDate: item.date,
        totalNumberOfFiles: item.totalNumberOfFiles,
        totalSizeOfFilesBytes: item.totalSizeOfFilesBytes,
    }));

    const lineChartParams = {
        series: [
            {
                id: 'totalNumberOfFiles',
                datakey: 'totalNumberOfFiles',
                label: 'Number of Files',
                data: transformedData.map(item => item.totalNumberOfFiles),
            },
            {
                id: 'totalSizeOfFilesBytes',
                datakey: 'totalSizeOfFilesBytes',
                label: 'Size of Files (Bytes)',
                data: transformedData.map(item => item.totalSizeOfFilesBytes),
            }
        ],
        xAxis: [{
            data: transformedData.map(item => item.collectionDate),
            id: 'axis1',
            dataKey: 'collectionDate',
            scaleType: "point",
            label: "Collected Date",
            tickLabelStyle: {
                angle: -25,
                textAnchor: 'end',
                fontSize: 10,
            },
            labelStyle: { transform: "translateY(30px)" },
            tickPlacement: 'middle', tickLabelPlacement: 'middle',
        } as AxisConfig<'point', string, ChartsXAxisProps>],
        height: chartHeight,
        margin: {
            left: 60,
            right: 10,
            top: 20,
            bottom: 80,
        },
        colors: theme.palette.distinctLightPalette
    };

    return (
        <Box width="100%">
            <LineChart
                {...lineChartParams}
                onAxisClick={(event, d) => {
                    if (d && d.axisValue) {
                        setIsChildChartDisplayed(true);
                        onDrillDown(String(d.axisValue));
                    } else {
                        console.error('collectionDate not found in data point');
                    }
                }}
            />
        </Box>
    );
};

// Child chart component
const ChildChart = ({ date, data }: { date: string, data: DetailedDataPoint[] }) => {
    const theme = useTheme();
    const detailedLineChartsParams = {
        series: [
            {
                id: 'numberOfFiles',
                datakey: 'numberOfFiles',
                label: 'Number of Files',
                data: data.map(item => item.numberOfFiles)
            },
            {
                id: 'sizeOfFilesBytes',
                datakey: 'sizeOfFilesBytes',
                label: 'Size of Files (Bytes)',
                data: data.map(item => item.sizeOfFilesBytes)
            }
        ],
        xAxis: [{
            data: data.map(item => item.time),
            id: 'axis2',
            dataKey: 'time',
            scaleType: "point",
            label: "Collected Time on " + date,
        } as AxisConfig<'point', string, ChartsXAxisProps>],
        height: childChartHeight,
        colors: theme.palette.distinctLightPalette
    };

    return (
        <Box width="100%">
            <LineChart {...detailedLineChartsParams} />
        </Box>
    );
};

// Main component for daily trend dashboard
const DailyTrend: React.FC = () => {
    const theme = useTheme();
    const [projectList, setProjectList] = useState<any[]>([]);
    const [ucgSourceList, setUcgSourceList] = useState<{ id: number, name: string }[]>([]);
    const [selectedProject, setSelectedProject] = useState<any>(null);
    const [selectedUCGSource, setSelectedUCGSource] = useState<number>(0);
    const [fromDate, setSelectedFromDate] = useState<Dayjs>(dayjs().subtract(1, 'month'));
    const [toDate, setSelectedToDate] = useState<Dayjs | null>(dayjs());
    const [loading, setLoading] = useState<boolean>(false);
    const [ucgsourceLoading, setUcgsourceLoading] = useState<boolean>(false);
    const [dataFetched, setDataFetched] = useState<boolean>(false);
    const [responseData, setResponseData] = useState<DataPoint[]>([]);
    const [viewStack, setViewStack] = useState<string[]>([]);
    const [isChildChartDisplayed, setIsChildChartDisplayed] = useState(false);
    const { showSnackbar } = useSnackbar();
    const last10Dates = generateLast10Dates();

    useEffect(() => {
        const fetchProjectData = async () => {
            try {
                const projectResponse = await axios.post(__UCS_GRAPHQL_URL__, {
                    query: SEARCH_ALARM_INVENTORY_QUERY,
                    variables: { collectionType: 'mcp' },
                });
                if (projectResponse.data?.data?.searchAlarmInventory && projectResponse.data.data.searchAlarmInventory.length > 0) {
                    setProjectList(projectResponse.data.data.searchAlarmInventory);
                }
            } catch (error) {
                showSnackbar('Error fetching project data!');
                console.error('Error fetching project data', error);
            }
        };
        fetchProjectData();
    }, []);

    useEffect(() => {
        const fetchCollectionTypes = async () => {
            try {
                const collectionTypesResponse = await axios.post(__UCS_GRAPHQL_URL__, {
                    query: AVAILABLE_ALARM_COLLECTION_TYPES_QUERY,
                });
                if (collectionTypesResponse.data?.data?.availableAlarmCollectionTypes) {
                    setUcgSourceList(collectionTypesResponse.data.data.availableAlarmCollectionTypes);
                }
            } catch (error) {
                showSnackbar('Error fetching collection types!');
                console.error('Error fetching collection types', error);
            }
        };
        fetchCollectionTypes();
    }, []);

    const handleProjectChange = async (options: any) => {
        setSelectedProject(options);
        setUcgsourceLoading(true);
        setSelectedUCGSource(0);
        if (options && options.id) {
            setUcgsourceLoading(false);
        }
    };

    const handleSelectChange = (setter: React.Dispatch<React.SetStateAction<number>>) => (
        event: SelectChangeEvent<number>) => {
        setter(event.target.value as number);
    };

    const handleReset = () => {
        setSelectedProject(null);
        setSelectedUCGSource(0);
        setSelectedFromDate(dayjs().subtract(1, 'month'));
        setSelectedToDate(dayjs());
        setResponseData([]);
        setViewStack([]);
        setIsChildChartDisplayed(false);
        setDataFetched(false);
    };

    const handleFetchClick = async () => {
        setLoading(true);
        setResponseData([]);
        const formattedFromDate = dayjs(fromDate).format('YYYY-MM-DD');
        const formattedToDate = dayjs(toDate).format('YYYY-MM-DD');

        const data = {
            collectionType: "mcp",
            fromDate: formattedFromDate,
            toDate: formattedToDate
        };

        try {
            const response = await axios.post(__UCS_GRAPHQL_URL__, {
                query: ALARM_METRICS_QUERY,
                variables: data,
            });

            if (response.data?.data?.alarmMetrics && response.data.data.alarmMetrics.length > 0) {
                setResponseData(response.data.data.alarmMetrics);
            } else {
                showSnackbar("No Data Found for the selected filters.");
            }
        } catch (error) {
            showSnackbar("Error fetching alarm metrics.");
            console.error(error);
        } finally {
            setLoading(false);
        }
    };

    return (
        <Box>
            <Grid container spacing={2}>
                <Grid item xs={12} md={3}>
                    <FormControl fullWidth>
                        <InputLabel>Project</InputLabel>
                        <Select value={selectedProject?.id || ''} onChange={handleProjectChange}>
                            {projectList.map(project => (
                                <MenuItem key={project.id} value={project.id}>{project.collectionName}</MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                </Grid>
                <Grid item xs={12} md={3}>
                    <FormControl fullWidth>
                        <InputLabel>UCG Source</InputLabel>
                        <Select value={selectedUCGSource} onChange={handleSelectChange(setSelectedUCGSource)}>
                            {ucgSourceList.map(ucgSource => (
                                <MenuItem key={ucgSource.id} value={ucgSource.id}>{ucgSource.name}</MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                </Grid>
                <Grid item xs={12} md={2}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker label="From Date" value={fromDate} onChange={(newValue) => setSelectedFromDate(newValue)} />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} md={2}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker label="To Date" value={toDate} onChange={(newValue) => setSelectedToDate(newValue)} />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} md={2}>
                    <LoadingButton
                        loading={loading}
                        variant="contained"
                        onClick={handleFetchClick}
                    >
                        Fetch Data
                    </LoadingButton>
                </Grid>
            </Grid>

            {isChildChartDisplayed ? (
                <ChildChart date={viewStack[0]} data={responseData[0].trendsDrillDownList} />
            ) : (
                <ParentChart
                    data={responseData}
                    onDrillDown={(date) => setViewStack([date])}
                    setIsChildChartDisplayed={setIsChildChartDisplayed}
                />
            )}

            <Box mt={2}>
                <Button variant="outlined" onClick={handleReset}>Reset Filters</Button>
            </Box>
        </Box>
    );
};

export default DailyTrend;

Explanation of Key Changes:

1. GraphQL Queries: This code integrates the SEARCH_ALARM_INVENTORY_QUERY, AVAILABLE_ALARM_COLLECTION_TYPES_QUERY, and ALARM_METRICS_QUERY GraphQL queries.


2. State Management: It handles the state for projects, UCG sources, date ranges, chart data, and loading states.


3. Date Handling: The date range is managed with the DatePicker component from MUI.


4. Fetching Data: The data is fetched via GraphQL queries when the user clicks the "Fetch Data" button.


5. Chart Components: The ParentChart component displays the initial aggregated data, while the ChildChart component is used for drill-down data when a date is clicked.



This code should work in your dashboard application, fetching data from your GraphQL endpoint and rendering it dynamically based on user selections.




Here are the GraphQL queries used in the provided code:

1. Search Alarm Inventory Query:

This query is used to fetch a list of available alarm inventory projects, filtered by a specific collectionType (e.g., mcp).

export const SEARCH_ALARM_INVENTORY_QUERY = `
  query SearchAlarmInventory($collectionType: String!) {
    searchAlarmInventory(collectionType: $collectionType) {
      id
      collectionName
      deviceName
      deviceIp
      ucgSource
      vendor
    }
  }
`;

Variables:

collectionType: This can be any type you want to filter on (e.g., mcp).


Response: This query returns a list of alarm inventory items with fields like:

id

collectionName

deviceName

deviceIp

ucgSource

vendor



2. Available Alarm Collection Types Query:

This query retrieves the list of available collection types.

export const AVAILABLE_ALARM_COLLECTION_TYPES_QUERY = `
  query AvailableAlarmCollectionTypes {
    availableAlarmCollectionTypes {
      id
      name
    }
  }
`;

Response: This returns a list of available alarm collection types:

id

name (e.g., the protocol or source type like SNMP, WSS).



3. Alarm Metrics Query:

This query fetches alarm metrics data based on a date range, filtering by collection type and alarm type.

export const ALARM_METRICS_QUERY = `
  query AlarmMetrics($collectionType: String!, $fromDate: String!, $toDate: String!) {
    alarmMetrics(collectionType: $collectionType, fromDate: $fromDate, toDate: $toDate) {
      collectionName
      alarmType
      numberOfMsgs
      sizeOfMsgs
      lastUpdated
      trendsDrillDownList {
        time
        numberOfFiles
        sizeOfFilesBytes
      }
    }
  }
`;

Variables:

collectionType: The collection type (e.g., mcp).

fromDate: The start date for the data range (e.g., '2024-12-01').

toDate: The end date for the data range (e.g., '2024-12-31').


Response: This query returns:

collectionName

alarmType

numberOfMsgs: Total number of messages during the given period.

sizeOfMsgs: Total size of messages (in bytes).

lastUpdated: Last updated timestamp.

trendsDrillDownList: A list of detailed data points for the selected time period (e.g., hourly data), which includes:

time: The timestamp of the detailed data.

numberOfFiles: The number of files processed during that time.

sizeOfFilesBytes: The size of the files in bytes.




These queries are executed in the provided React component, where they are used to fetch the necessary data based on user selections such as project, UCG source, and date range. The GraphQL responses are then used to populate the charts and other UI components.

