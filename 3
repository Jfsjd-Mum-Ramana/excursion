private String fetchDataFromDevice(DeviceInfo devInfo) throws Exception {
    return retryTemplate.execute(context -> {
        String url = config.getApiEndpoints()
                           .get(devInfo.getModelNo())
                           .replace("{siteIP}", devInfo.getDeviceIP());

        logger.info("Fetching data from device: {} using URL: {}", devInfo.getDeviceIP(), url);

        switch (devInfo.getModelNo()) {
            case Constants.DEVICE_TYPE_1250:
                return restTemplate.getForObject(url, String.class);
            case Constants.DEVICE_TYPE_1450:
                return restTemplate.postForObject(url, getHttpEntity(), String.class);
            case Constants.DEVICE_TYPE_1500:
                return restTemplate.getForObject(url, String.class);
            default:
                throw new IllegalArgumentException("Unsupported device type: " + devInfo.getModelNo());
        }
    }, context -> {
        // Recovery logic when all retry attempts fail
        Throwable lastThrowable = context.getLastThrowable();
        String errorMessage = lastThrowable != null ? lastThrowable.getMessage() : "Unknown error";

        logger.error("All retry attempts failed for device: {} (Model: {}). Sending LOV notification. Error: {}",
                      devInfo.getDeviceIP(), devInfo.getModelNo(), errorMessage);

        // Generate LOV (Loss of Visibility) response
        String lovMsg = validation.generateLOVResponse(devInfo, errorMessage);

        // Log the LOV message before publishing
        logger.info("Publishing LOV message to VMB topic: {}. Message: {}", vMBConfig.getLovTopic(), lovMsg);

        // Publish the LOV notification to the VMB topic asynchronously
        vmbEclipsePublisherService.publishAsync(vMBConfig.getLovTopic(), lovMsg, devInfo.getDeviceIP());

        logger.info("LOV notification successfully published for device: {}", devInfo.getDeviceIP());

        return "Recovery response: " + errorMessage;
    });
}