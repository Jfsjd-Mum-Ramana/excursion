export const unique_alarm_collection_types_query = `
    query {
        availablealarmcollectiontypes {
            typeid
            type
        }
    }
`;

export const search_alarm_inventory_query = `
    query SearchAlarmInventory($collectiontype: String) {
        searchalarminventory(alarminventorysearchrequest: { collectiontype: $collectiontype }) {
            id
            collectiontype
            deviceip
            devicename
            model
            vendor
            loopback
            network
            pollercluster
            pollerinterval
            lastupdate
            physip
        }
    }
`;

export const get_alarm_metrics_data = `
    query AlarmMetrics($collectiontype: String, $fromdate: String, $todate: String) {
        alarmmetrics(alarmmetricsrequest: { collectiontype: $collectiontype, fromdate: $fromdate, todate: $todate }) {
            date
            totalsizeoffilesbytes
            totalnumberoffiles
            alarmmetricsdrilldownlist {
                time
                sizeoffilesbytes
                numberoffiles
            }
        }
    }
`;


import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { __ucs_graphql_url__ } from '../../api-endpoints';
import { unique_alarm_collection_types_query, search_alarm_inventory_query, get_alarm_metrics_data } from '../../graphql/graphqlqueries';
import LoadingButton from "@mui/lab/LoadingButton";
import { LineChart } from '@mui/x-charts/LineChart';
import { AxisConfig, ChartsXAxisProps } from '@mui/x-charts';
import { Box, FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent, TextField, Autocomplete, Button, Breadcrumbs, Link, Typography } from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import dayjs, { Dayjs } from 'dayjs';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { useTheme } from "@mui/material/styles";
import { useSnackbar } from '../../utils/SnackbarContext';
import NavigateNextIcon from '@mui/icons-material/NavigateNext';
import HomeIcon from '@mui/icons-material/Home';

const generateLast10Dates = () => {
    const dates = [];
    for (let i = 0; i < 10; i++) {
        dates.push(dayjs().subtract(i, 'day').format('yyyy-MM-dd'));
    }
    return dates;
};

interface DataPoint {
    date: string;
    totalnumberoffiles: number;
    totalsizeoffilesbytes: number;
    alarmmetricsdrilldownlist: DetailedDataPoint[];
}

interface DetailedDataPoint {
    time: string;
    sizeoffilesbytes: number;
    numberoffiles: number;
}

const chartHeight = 450;
const childChartHeight = 410;

const ParentChart: React.FC<{ data: DataPoint[], onDrillDown: (date: string) => void, setIsChildChartDisplayed: (value: boolean) => void }> = ({ data, onDrillDown, setIsChildChartDisplayed }) => {
    const theme = useTheme();

    const transformedData = data.map(item => ({
        collectionDate: item.date,
        totalnumberoffiles: item.totalnumberoffiles,
        totalsizeoffilesbytes: item.totalsizeoffilesbytes,
    }));

    const lineChartParams = {
        series: [
            {
                id: 'totalnumberoffiles',
                dataKey: 'totalnumberoffiles',
                label: 'number of files',
                data: transformedData.map(item => item.totalnumberoffiles),
            },
            {
                id: 'totalsizeoffilesbytes',
                dataKey: 'totalsizeoffilesbytes',
                label: 'size of files (bytes)',
                data: transformedData.map(item => item.totalsizeoffilesbytes),
            }
        ],
        xAxis: [{
            data: transformedData.map(item => item.collectionDate),
            id: 'axis1',
            dataKey: 'collectionDate',
            scaleType: "point",
            label: "collected date",
            tickLabelStyle: {
                angle: -25,
                textAnchor: 'end',
                fontSize: 10,
            },
            labelStyle: { transform: "translateY(30px)" },
            tickPlacement: 'middle', tickLabelPlacement: 'middle',
        } as AxisConfig<'point', string, ChartsXAxisProps>],
        height: chartHeight,
        margin: {
            left: 60,
            right: 10,
            top: 20,
            bottom: 80,
        },
        colors: theme.palette.distinctLightPalette
    };

    return (
        <Box width="100%">
            <LineChart
                {...lineChartParams}
                onAxisClick={(event, d) => {
                    if (d && d.axisValue) {
                        setIsChildChartDisplayed(true);
                        onDrillDown(String(d.axisValue));
                    } else {
                        console.error('collectionDate not found in data point');
                    }
                }}
            />
        </Box>
    );
};

const ChildChart: React.FC<{ date: string, data: DetailedDataPoint[] }> = ({ date, data }) => {
    const theme = useTheme();
    const detailedLineChartParams = {
        series: [
            {
                id: 'numberoffiles',
                dataKey: 'numberoffiles',
                label: 'number of files',
                data: data.map(item => item.numberoffiles)
            },
            {
                id: 'sizeoffilesbytes',
                dataKey: 'sizeoffilesbytes',
                label: 'size of files (bytes)',
                data: data.map(item => item.sizeoffilesbytes)
            }
        ],
        xAxis: [{
            data: data.map(item => item.time),
            id: 'axis2',
            dataKey: 'time',
            scaleType: "point",
            label: "collected time on " + date,
        } as AxisConfig<'point', string, ChartsXAxisProps>],
        height: childChartHeight,
        colors: theme.palette.distinctLightPalette
    };

    return (
        <Box width="100%">
            <LineChart {...detailedLineChartParams} />
        </Box>
    );
};

const OverallHealthMetric: React.FC = () => {
    const theme = useTheme();
    const [alarmCollectionTypes, setAlarmCollectionTypes] = useState<any[]>([]);
    const [selectedAlarmCollectionType, setSelectedAlarmCollectionType] = useState<string | null>(null);
    const [fromDate, setSelectedFromDate] = useState<Dayjs>(dayjs().subtract(1, 'month'));
    const [toDate, setSelectedToDate] = useState<Dayjs | null>(dayjs());
    const [loading, setLoading] = useState<boolean>(false);
    const [dataFetched, setDataFetched] = useState<boolean>(false);
    const [responseData, setResponseData] = useState<DataPoint[]>([]);
    const [viewStack, setViewStack] = useState<string[]>([]);
    const [isChildChartDisplayed, setIsChildChartDisplayed] = useState(false);
    const { showSnackbar } = useSnackbar();
    const last10Dates = generateLast10Dates();

    useEffect(() => {
        const fetchAlarmCollectionTypes = async () => {
            try {
                const response = await axios.post(__ucs_graphql_url__, {
                    query: unique_alarm_collection_types_query,
                });
                if (response.data?.data?.availablealarmcollectiontypes && response.data.data.availablealarmcollectiontypes.length > 0) {
                    setAlarmCollectionTypes(response.data.data.availablealarmcollectiontypes);
                }
            } catch (error) {
                showSnackbar('Error fetching alarm collection types!');
                console.error('Error fetching alarm collection types', error);
            }
        };
        fetchAlarmCollectionTypes();
    }, []);

    const handleAlarmCollectionTypeChange = (
        event: SelectChangeEvent<string>,
        child: React.ReactNode
    ) => {
        setSelectedAlarmCollectionType(event.target.value as string);
    };

    const handleSelectChange = (setter: React.Dispatch<React.SetStateAction<number>>) => (
        event: SelectChangeEvent<number>
    ) => {
        setter(event.target.value as number);
    };

    const handleReset = () => {
        setSelectedAlarmCollectionType(null);
        setSelectedFromDate(dayjs().subtract(1, 'month'));
        setSelectedToDate(dayjs());
        setResponseData([]);
        setViewStack([]);
        setIsChildChartDisplayed(false);
        setDataFetched(false);
    };

    const handleFetchClick = async () => {
        setLoading(true);
        setResponseData([]);
        const formattedFromDate = dayjs(fromDate).format('yyyy-MM-dd');
        const formattedToDate = dayjs(toDate).format('yyyy-MM-dd');

        const data = {
            collectiontype: selectedAlarmCollectionType,
            fromdate: formattedFromDate,
            todate: formattedToDate
        };

        try {
            const response = await axios.post(__ucs_graphql_url__, {
                query: get_alarm_metrics_data,
                variables: data,
            });

            if (response.data?.data?.alarmmetrics && response.data.data.alarmmetrics.length > 0) {
                let data = response.data.data.alarmmetrics || [];
                console.log(data);
                setResponseData(data);
            } else {
                showSnackbar("No data found!");
            }
            setDataFetched(true);
        } catch (error) {
            showSnackbar("Error while fetching the data from the server");
            console.error('Error fetching data', error);
        } finally {
            setLoading(false);
        }
    };

    const handleDrillDown = (date: string) => {
        setViewStack([...viewStack, date]);
    };

    const handleBreadcrumbClick = (index: number) => {
        setViewStack(viewStack.slice(0, index + 1));
    };

    const currentView = viewStack[viewStack.length - 1];
    const currentData = responseData.find(item => item.date === currentView)?.alarmmetricsdrilldownlist || [];


    const isButtonDisabled = () => {
        return !selectedAlarmCollectionType || !fromDate || !toDate;
    };

    return (
        <Box sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            boxSizing: 'border-box',
        }}>
            <Grid container spacing={4} alignItems="flex-end">
                <Grid item xs={12} sm={6} md>
                    <FormControl variant="outlined" sx={{ width: '100%', height: '100%' }}>
                        <InputLabel id="select-outlined-label">Alarm Collection Type</InputLabel>
                        <Select
                            labelId="select-outlined-label"
                            id="select-outlined"
                            label="Alarm Collection Type"
                            value={selectedAlarmCollectionType || ''}
                            onChange={handleAlarmCollectionTypeChange}
                        >
                            {alarmCollectionTypes?.map((type, i) => (
                                <MenuItem
                                    key={type.typeid}
                                    id="dropdown"
                                    value={type.type}
                                >
                                    {type.type}
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="Start Date"
                            sx={{ width: '100%', height: '100%' }}
                            value={fromDate}
                            onChange={(newValue: Dayjs | null) => {
                                setSelectedFromDate(newValue || dayjs());
                                if (newValue && toDate && newValue.isAfter(toDate)) {
                                    setSelectedToDate(null);
                                }
                            }}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} sm={6} md>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="End Date"
                            sx={{ width: '100%', height: '100%' }}
                            value={toDate}
                            minDate={fromDate}
                            onChange={(newValue) => setSelectedToDate(newValue)}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={2} sm={2} md={2} sx={{ display: 'flex' }}>
                    <Button variant="contained" onClick={handleReset} color="primary" sx={{ marginRight: 2 }}>Reset</Button>
                    <LoadingButton onClick={handleFetchClick} loading={loading} loadingIndicator="Fetching…" variant="contained"
                        disabled={isButtonDisabled()}>
                        <span>Fetch</span>
                    </LoadingButton>
                </Grid>
            </Grid>

            {dataFetched && !loading && (
                <Box sx={{ mt: 4, width: '100%', borderRadius: 2, border: '1px solid #e0e0e0', bgcolor: 'white' }}>

                    {isChildChartDisplayed && responseData.length > 0 && (
                        <Breadcrumbs aria-label="breadcrumb" separator={<NavigateNextIcon fontSize="small" />} sx={{ padding: '1%' }}>
                            <Link underline="hover" sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer', '&:hover': { textDecoration: 'underline !important', color: '#1976d2 !important' } }} color="primary" onClick={() => { setViewStack([]); setIsChildChartDisplayed(false); }} >
                                <HomeIcon sx={{ mr: 0.4 }} fontSize="inherit" />
                                Home
                            </Link>
                            {viewStack.map((view, index) => (
                                <Link
                                    key={view}
                                    color="inherit"
                                    sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
                                    underline="none"
                                    onClick={() => handleBreadcrumbClick(index)}
                                >
                                    {view}
                                </Link>
                            ))}
                        </Breadcrumbs>
                    )}

                    <Box mt={1} sx={{ width: '100%' }}>
                        {responseData.length > 0 ? (
                            <>
                                {currentView ? (
                                    <ChildChart date={currentView} data={currentData} />
                                ) : (
                                    <ParentChart data={responseData} onDrillDown={handleDrillDown} setIsChildChartDisplayed={setIsChildChartDisplayed} />
                                )}
                            </>
                        ) : (
                            <LineChart
                                height={chartHeight}
                                xAxis={[{ data: last10Dates, scaleType: 'point', }]}
                                yAxis={[{ min: 0, max: 10 }]}
                                series={[]}
                            />
                        )}
                    </Box>
                </Box>
            )}
        </Box>
    );
}

export default OverallHealthMetric;

I have implemented this code please change the values and names with exact names means same names to the schema I have provided modify the code 
