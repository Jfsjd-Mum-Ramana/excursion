import { gql } from '@apollo/client';

// Query to fetch available collection types
export const GET_COLLECTION_TYPES = gql`
    query {
        availableAlarmCollectionTypes {
            typeId
            type
        }
    }
`;

// Query to fetch alarm metrics based on collection type and date range
export const FETCH_ALARM_METRICS = gql`
    query alarmMetrics($collectionType: String, $fromDate: String, $toDate: String) {
        alarmMetrics(alarmMetricsRequest: { collectionType: $collectionType, fromDate: $fromDate, toDate: $toDate }) {
            date
            totalSizeOfFilesBytes
            totalNumberOfFiles
            alarmMetricsDrillDownList {
                time
                sizeOfFilesBytes
                numberOfFiles
            }
        }
    }
`;

// Query to search alarm inventory by collection type
export const SEARCH_ALARM_INVENTORY = gql`
    query searchAlarmInventory($collectionType: String) {
        searchAlarmInventory(alarmInventorySearchRequest: { collectionType: $collectionType }) {
            id
            collectionType
            deviceName
            deviceIp
            vendor
            model
        }
    }
`;




import React, { useEffect, useState } from 'react';
import { useQuery, useLazyQuery } from '@apollo/client';
import axios from 'axios';
import { LineChart } from '@mui/x-charts/LineChart';
import { Box, Grid, TextField, Autocomplete, Button, Typography } from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import dayjs, { Dayjs } from 'dayjs';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { useSnackbar } from '../../utils/SnackbarContext';
import { GET_COLLECTION_TYPES, FETCH_ALARM_METRICS, SEARCH_ALARM_INVENTORY } from './graphqlQueries';

// Chart Components
const ParentChart = ({ data, onDrillDown }: { data: any[], onDrillDown: (date: string) => void }) => {
    const transformedData = data.map((item) => ({
        date: item.date,
        usage: item.totalNumberOfFiles,
        volume: item.totalSizeOfFilesBytes,
    }));

    return (
        <Box width="100%">
            <LineChart
                series={[
                    { id: 'usage', label: 'Number of Files', data: transformedData.map((d) => d.usage) },
                    { id: 'volume', label: 'File Size (Bytes)', data: transformedData.map((d) => d.volume) },
                ]}
                xAxis={[
                    { id: 'axis1', dataKey: 'date', data: transformedData.map((d) => d.date), label: 'Date' },
                ]}
                height={450}
                onAxisClick={(event, d) => {
                    if (d?.axisValue) onDrillDown(d.axisValue);
                }}
            />
        </Box>
    );
};

const ChildChart = ({ data }: { data: any[] }) => (
    <Box width="100%">
        <LineChart
            series={[
                { id: 'usage', label: 'Number of Files', data: data.map((d) => d.numberOfFiles) },
                { id: 'volume', label: 'File Size (Bytes)', data: data.map((d) => d.sizeOfFilesBytes) },
            ]}
            xAxis={[
                { id: 'axis2', dataKey: 'time', data: data.map((d) => d.time), label: 'Time' },
            ]}
            height={400}
        />
    </Box>
);

// Main Component
const OverallHealthMetrics: React.FC = () => {
    const [selectedCollectionType, setSelectedCollectionType] = useState<any>(null);
    const [fromDate, setFromDate] = useState<Dayjs>(dayjs().subtract(1, 'month'));
    const [toDate, setToDate] = useState<Dayjs>(dayjs());
    const [viewStack, setViewStack] = useState<string[]>([]);
    const [isChildChartDisplayed, setIsChildChartDisplayed] = useState(false);
    const [alarmMetrics, setAlarmMetrics] = useState<any[]>([]);
    const { showSnackbar } = useSnackbar();

    // Fetch collection types
    const { data: collectionTypesData } = useQuery(GET_COLLECTION_TYPES);

    // Fetch alarm metrics
    const [fetchAlarmMetrics, { data: alarmMetricsData }] = useLazyQuery(FETCH_ALARM_METRICS);

    // Search inventory (optional for future functionality)
    const [searchInventory] = useLazyQuery(SEARCH_ALARM_INVENTORY);

    const handleFetchData = () => {
        if (!selectedCollectionType || !fromDate || !toDate) {
            showSnackbar('Please fill all required fields!');
            return;
        }
        fetchAlarmMetrics({
            variables: {
                collectionType: selectedCollectionType.type,
                fromDate: fromDate.format('YYYY-MM-DD'),
                toDate: toDate.format('YYYY-MM-DD'),
            },
        });
    };

    useEffect(() => {
        if (alarmMetricsData) {
            setAlarmMetrics(alarmMetricsData.alarmMetrics);
            setIsChildChartDisplayed(false);
        }
    }, [alarmMetricsData]);

    const handleReset = () => {
        setSelectedCollectionType(null);
        setFromDate(dayjs().subtract(1, 'month'));
        setToDate(dayjs());
        setAlarmMetrics([]);
        setViewStack([]);
        setIsChildChartDisplayed(false);
    };

    const handleDrillDown = (date: string) => {
        const drillDownData = alarmMetrics.find((metric) => metric.date === date)?.alarmMetricsDrillDownList || [];
        setViewStack([...viewStack, date]);
        setAlarmMetrics(drillDownData);
        setIsChildChartDisplayed(true);
    };

    return (
        <Box sx={{ p: 4 }}>
            <Typography variant="h5" gutterBottom>
                Overall Health Metrics
            </Typography>

            <Grid container spacing={2} alignItems="flex-end">
                <Grid item xs={12} sm={6} md={4}>
                    <Autocomplete
                        options={collectionTypesData?.availableAlarmCollectionTypes || []}
                        getOptionLabel={(option) => option.type}
                        value={selectedCollectionType}
                        onChange={(e, newValue) => setSelectedCollectionType(newValue)}
                        renderInput={(params) => <TextField {...params} label="Collection Type" />}
                    />
                </Grid>
                <Grid item xs={12} sm={6} md={4}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="From Date"
                            value={fromDate}
                            onChange={(newValue) => setFromDate(newValue || dayjs())}
                            maxDate={toDate}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} sm={6} md={4}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="To Date"
                            value={toDate}
                            onChange={(newValue) => setToDate(newValue || dayjs())}
                            minDate={fromDate}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12}>
                    <Button variant="contained" onClick={handleFetchData}>Fetch</Button>
                    <Button variant="outlined" onClick={handleReset} sx={{ ml: 2 }}>Reset</Button>
                </Grid>
            </Grid>

            {alarmMetrics.length > 0 && (
                <Box mt={4}>
                    {isChildChartDisplayed ? (
                        <ChildChart data={alarmMetrics} />
                    ) : (
                        <ParentChart data={alarmMetrics} onDrillDown={handleDrillDown} />
                    )}
                </Box>
            )}
        </Box>
    );
};

export default OverallHealthMetrics;