import React, { useState, useEffect } from 'react';
import { LineChart } from '@mui/x-charts/LineChart';
import { Autocomplete, Box, Button, Breadcrumbs, FormControlLabel, Grid, IconButton, Link, Switch, TextField, Typography } from '@mui/material';
import axios from 'axios';
import { AxisConfig, ChartsXAxisProps } from '@mui/x-charts';
import { __UCS_GRAPHQL_URL__ } from '../../api-endpoints';
import { UNIQUE_NETWORKS_BY_PROTOCOL_QUERY, AVG_NETWORK_BY_COVERAGE_QUERY, UNIQUE_DEVICES_BY_NETWORK_SNMP } from '../../graphQL/graphqlQueries';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import dayjs, { Dayjs } from 'dayjs';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import LoadingButton from "@mui/lab/LoadingButton";
import NavigateNextIcon from '@mui/icons-material/NavigateNext';
import HomeIcon from '@mui/icons-material/Home';
import { useSnackbar } from '../../utils/SnackbarContext';
import { useTheme } from '@mui/material/styles';

interface DataPoint {
    date: string;
    totalCoverage: number;
    coverageDataList: DetailedDataPoint[];
}

interface DetailedDataPoint {
    time: string;
    coverage: number;
}
const chartHeight = 450;
const childChartHeight = 410;
const ParentChart = ({ data, onDrillDown, setIsChildChartDisplayed }: { data: DataPoint[], onDrillDown: (date: string) => void, setIsChildChartDisplayed: (value: boolean) => void }) => {
    //console.log('ParentChart received data:', data); 
    const theme = useTheme();

    const transformedData = data.map(item => ({
        collectionDate: item.date,
        totalCoverage: item.totalCoverage,
    }));

    //console.log('Transformed Data for ParentChart:', transformedData); // Log transformed data

    const lineChartParams = {
        series: [
            {
                id: 'totalCoverage',
                datakey: 'totalCoverage',
                label: 'Coverage',
                data: transformedData.map(item => item.totalCoverage),
            }
        ],
        xAxis: [{
            data: transformedData.map(item => item.collectionDate),
            id: 'axis1',
            dataKey: 'collectionDate',
            scaleType: "point",
            label: "Collected Date",
            tickLabelStyle: {
                angle: -25,
                textAnchor: 'end',
                fontSize: 10,
            },
            labelStyle: { transform: "translateY(30px)" },
            tickPlacement: 'middle', tickLabelPlacement: 'middle',
        } as AxisConfig<'point', string, ChartsXAxisProps>],
        height: chartHeight,
        margin: {
            left: 60,
            right: 10,
            top: 20,
            bottom: 80,
        },
        colors: theme.palette.distinctLightPalette
    };

    return (
        <Box width="100%">
            <LineChart
                {...lineChartParams}
                onAxisClick={(event, d) => {
                    if (d && d.axisValue) {
                        setIsChildChartDisplayed(true);
                        onDrillDown(String(d.axisValue));
                    } else {
                        console.error('collectionDate not found in data point');
                    }
                }}

            />
        </Box>
    );
};

const ChildChart = ({ date, data }: { date: string, data: DetailedDataPoint[] }) => {
    const theme = useTheme();
    const detailedLineChartsParams = {
        series: [
            {
                id: 'networkcoverage',
                datakey: 'networkcoverage',
                label: 'Coverage',
                data: data.map(item => item.coverage)
            }
        ],
        xAxis: [{
            data: data.map(item => item.time),
            id: 'axis2',
            dataKey: 'time',
            scaleType: "point",
            label: "Collected Time on " + date,
        } as AxisConfig<'point', string, ChartsXAxisProps>],
        height: childChartHeight,
        colors: theme.palette.distinctLightPalette
    };

    return (
        <Box width="100%">
            <LineChart {...detailedLineChartsParams} />
        </Box>
    );
};
const generateLast10Dates = () => {
    const dates = [];
    for (let i = 0; i < 10; i++) {
        dates.push(dayjs().subtract(i, 'day').format('YYYY-MM-DD'));
    }
    //console.log(dates,"dates");
    //return dates.reverse(); 
    return dates;
};

const DrillDownChart = () => {
    const theme = useTheme();
    const [viewStack, setViewStack] = useState<string[]>([]);
    const [parentData, setParentData] = useState<DataPoint[]>([]);

    const [networkList, setNetworkList] = useState<any[]>([]);
    const [selectedNetwork, setSelectedNetwork] = useState<any>(null);
    const [deviceList, setDeviceList] = useState<any[]>([]);
    const [selectedDevice, setSelectedDevice] = useState<any>(null);
    const [fromDate, setSelectedFromDate] = useState<Dayjs>(dayjs().subtract(2, 'week'));
    const [toDate, setSelectedToDate] = useState<Dayjs | null>(dayjs());

    const [loading, setLoading] = useState<boolean>(false);
    const [dataFetched, setDataFetched] = useState<boolean>(false);
    const [isChildChartDisplayed, setIsChildChartDisplayed] = useState(false);
    const [isDeviceFieldEnabled, setIsDeviceFieldEnabled] = useState(false);
    const { showSnackbar } = useSnackbar();
    const last10Dates = generateLast10Dates();

    useEffect(() => {
        const fetchNetworkData = async () => {
            try {
                const response = await axios.post(__UCS_GRAPHQL_URL__, {
                    query: UNIQUE_NETWORKS_BY_PROTOCOL_QUERY
                });
                setNetworkList(response.data?.data?.uniqueNetworksByProtocol);
            } catch (error) {
                showSnackbar('Error fetching network data!');
                console.error('Error fetching network data', error);
            }
        };
        fetchNetworkData();
    }, []);

    const isButtonDisabled = () => {
        if (isDeviceFieldEnabled) {
            return !selectedNetwork || !fromDate || !toDate || !selectedDevice;
        }
        return !selectedNetwork || !fromDate || !toDate;
    };

    const handleReset = () => {
        setSelectedNetwork('');
        setSelectedFromDate(dayjs().subtract(2, 'week'));
        setSelectedToDate(dayjs());
        setParentData([]);
        setDataFetched(false);
        if (isDeviceFieldEnabled) {
            setSelectedDevice('');
        }
    };
    const handleNetworkChange = async (newValue: any) => {
        setSelectedNetwork(newValue);
        if (isDeviceFieldEnabled) {
            fetchDeviceData(newValue);
        }
    }
    const fetchDeviceData = async (network: any) => {
        setDeviceList([]);
        try {
            const response = await axios.post(__UCS_GRAPHQL_URL__, {
                query: UNIQUE_DEVICES_BY_NETWORK_SNMP,
                variables: { network: network },
            });

            if (response.data?.data?.uniqueDevicesByNetwork && response.data.data.uniqueDevicesByNetwork.length > 0) {
                let data = response.data.data.uniqueDevicesByNetwork || [];
                console.log('Fetched device Data:', data);
                setDeviceList(data);
            }
            console.log('Fetched device Data:', response);
        } catch (error) {
            showSnackbar('Error fetching device data!');
            console.error('Error fetching device data', error);
        }
    };
    const handleFetchClick = async () => {
        setLoading(true);
        setParentData([]);

        try {
            const formattedFromDate = dayjs(fromDate).format('YYYY-MM-DD');
            const formattedToDate = dayjs(toDate).format('YYYY-MM-DD');

            const data: { [key: string]: any } = {
                network: selectedNetwork,
                fromDate: formattedFromDate,
                toDate: formattedToDate
            };
            if (isDeviceFieldEnabled) {
                data.device = selectedDevice;
            }
            //console.log("Data:", data);
            const response = await axios.post(__UCS_GRAPHQL_URL__, {
                query: AVG_NETWORK_BY_COVERAGE_QUERY,
                variables: data,
            });

            if (response.data?.data?.avgNetworkByCoverage && response.data.data.avgNetworkByCoverage.length > 0) {
                let data = response.data.data.avgNetworkByCoverage || [];
                console.log('Fetched Parent Data:', data);
                setParentData(data);
            } else {
                console.warn('No Data Found!');
                showSnackbar("No Data Found!");
            }
            setDataFetched(true);
        } catch (error) {
            console.error('Error fetching data', error);
            showSnackbar("Error While fetching the Data from the Server");
        } finally {
            setIsChildChartDisplayed(false);
            setViewStack([]);
            setLoading(false);
        }
    };

    const handleToggleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setIsDeviceFieldEnabled(event.target.checked);
    };
    const handleDrillDown = (date: string) => {
        setViewStack([...viewStack, date]);
    };

    const handleBreadcrumbClick = (index: number) => {
        setViewStack(viewStack.slice(0, index + 1));
    };

    const currentView = viewStack[viewStack.length - 1];
    const currentData = parentData.find(item => item.date === currentView)?.coverageDataList || [];

    //console.log('Current View:', currentView); 
    //console.log('Current Data:', currentData); 
    // console.log('Parent Data:', parentData);

    return (

        <Box
            sx={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                //height: '100vh',
                //overflow: 'auto',
                //padding: '1%',
                boxSizing: 'border-box',

            }}
        >
            {/* Avg Coverage by Network {isDeviceFieldEnabled ? 'and Device' : ''}*/}
            <Grid container spacing={2} alignItems="flex-end">
                <Grid item xs={12} sm={6} md="auto">
                    <FormControlLabel
                        control={<Switch color="primary" checked={isDeviceFieldEnabled} onChange={handleToggleChange} />}
                        label={<Typography variant="bodySM">Enable Device Field</Typography>}
                        //label="Enable Device"
                        labelPlacement="top"
                        value="top"
                        //sx={{ width: '100%', height: '100%' }} 
                        />
                </Grid>
                <Grid item xs={12} sm={6} md>
                    <Autocomplete
                        options={networkList}
                        getOptionLabel={(option) => option}
                        value={selectedNetwork}
                        onChange={(event, newValue) => handleNetworkChange(newValue)}
                        renderInput={(params) => <TextField {...params} label="Network" variant="outlined" />}
                        sx={{ width: '100%', height: '100%' }}
                    />
                </Grid>
                {isDeviceFieldEnabled && (
                    <Grid item xs={12} sm={6} md>
                        <Autocomplete
                            options={deviceList}
                            getOptionLabel={(option) => option}
                            value={selectedDevice}
                            onChange={(event, newValue) => setSelectedDevice(newValue)}
                            renderInput={(params) => <TextField {...params} label="Device" variant="outlined" />}
                            sx={{ width: '100%', height: '100%' }}
                        />
                    </Grid>
                )}
                <Grid item xs={12} sm={6} md>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="Start Date"
                            sx={{ width: '100%', height: '100%' }}
                            value={fromDate}
                            onChange={(newValue: Dayjs | null) => {
                                setSelectedFromDate(newValue || dayjs());
                                // If newValue is after toDate, reset toDate
                                if (newValue && toDate && newValue.isAfter(toDate)) {
                                    setSelectedToDate(null);
                                }
                            }}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} sm={6} md>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="End Date"
                            sx={{ width: '100%', height: '100%' }}
                            value={toDate}
                            minDate={fromDate} // Disable dates before fromDate
                            onChange={(newValue) => setSelectedToDate(newValue)}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={2} sm={2} md={2} sx={{ display: 'flex' }}>
                    <Button variant="contained" onClick={handleReset} color="primary" sx={{ marginRight: 2 }}>Reset</Button>
                    <LoadingButton onClick={handleFetchClick} loading={loading} loadingIndicator="Fetching…" variant="contained"
                        disabled={isButtonDisabled()}>
                        <span>Fetch</span>
                    </LoadingButton>
                </Grid>
            </Grid>


            {dataFetched && !loading && (
                <Box sx={{ mt: 4, width: '100%', borderRadius: 2, border: '1px solid #e0e0e0', bgcolor: 'white' }}>
                    {isChildChartDisplayed && parentData.length > 0 && (

                        <Breadcrumbs aria-label="breadcrumb" separator={<NavigateNextIcon fontSize="small" />} sx={{ padding: '1%' }}>
                            <Link underline="hover" sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer', '&:hover': { textDecoration: 'underline !important', color: '#1976d2 !important' } }} color="primary" onClick={() => { setViewStack([]); setIsChildChartDisplayed(false); }} >
                                <HomeIcon sx={{ mr: 0.4 }} fontSize="inherit" />
                                Home
                            </Link>
                            {viewStack.map((view, index) => (
                                <Link
                                    key={view}
                                    color="inherit"
                                    sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
                                    underline="none"
                                    onClick={() => handleBreadcrumbClick(index)}
                                >
                                    {view}
                                </Link>
                            ))}
                        </Breadcrumbs>
                    )}

                    <Box mt={1} sx={{ width: '100%' }}>
                        {parentData.length > 0 ? (
                            <>
                                {currentView ? (
                                    <ChildChart date={currentView} data={currentData} />
                                ) : (
                                    <ParentChart data={parentData} onDrillDown={handleDrillDown} setIsChildChartDisplayed={setIsChildChartDisplayed} />
                                )}
                            </>
                        ) : (
                            <LineChart
                                height={chartHeight}
                                xAxis={[{ data: last10Dates, scaleType: 'point', }]}
                                yAxis={[{ min: 0, max: 10 }]}
                                series={[]}
                            />
                        )
                        }
                    </Box>
                </Box>
            )}
        </Box>
    );
};

export default DrillDownChart;
