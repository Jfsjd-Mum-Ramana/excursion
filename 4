Here's how you can implement the required functionality using GraphQL, following the pattern of the previously provided structure.


---

Database Table Creation

Ensure the database table scatterplotdata is already created. If not, use the following SQL:

CREATE TABLE scatterplotdata (
    id SERIAL PRIMARY KEY,
    collection_name VARCHAR(255) NOT NULL,
    collection_date TIMESTAMP NOT NULL,
    protocol VARCHAR(50) NOT NULL,
    number_of_msgs BIGINT NOT NULL,
    size_of_msgs BIGINT NOT NULL
);


---

Entity Class: ScatterPlotData

Create a JPA entity for the scatterplotdata table:

package com.verizon.ucs.restapi.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "scatterplotdata")
public class ScatterPlotData {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "collection_name", nullable = false)
    private String collectionName;

    @Column(name = "collection_date", nullable = false)
    private LocalDateTime collectionDate;

    @Column(name = "protocol", nullable = false)
    private String protocol;

    @Column(name = "number_of_msgs", nullable = false)
    private Long numberOfMsgs;

    @Column(name = "size_of_msgs", nullable = false)
    private Long sizeOfMsgs;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public LocalDateTime getCollectionDate() {
        return collectionDate;
    }

    public void setCollectionDate(LocalDateTime collectionDate) {
        this.collectionDate = collectionDate;
    }

    public String getProtocol() {
        return protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    public Long getNumberOfMsgs() {
        return numberOfMsgs;
    }

    public void setNumberOfMsgs(Long numberOfMsgs) {
        this.numberOfMsgs = numberOfMsgs;
    }

    public Long getSizeOfMsgs() {
        return sizeOfMsgs;
    }

    public void setSizeOfMsgs(Long sizeOfMsgs) {
        this.sizeOfMsgs = sizeOfMsgs;
    }
}


---

Repository Interface: UCSPScatterPlotRepository

Create a repository for scatterplotdata:

package com.verizon.ucs.restapi.repository;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

@Repository
public interface UCSPScatterPlotRepository extends JpaRepository<ScatterPlotData, Long> {

    @Query(nativeQuery = true, value = "SELECT collection_name AS collectionName, " +
            "CAST(collection_date AS DATE) AS date, " +
            "CASE WHEN :dataType = 'number_of_msgs' THEN number_of_msgs " +
            "     WHEN :dataType = 'size_of_msgs' THEN size_of_msgs " +
            "END AS yValue " +
            "FROM scatterplotdata " +
            "WHERE protocol = :protocol " +
            "ORDER BY collection_date")
    List<Map<String, Object>> fetchScatterPlotData(@Param("protocol") String protocol, @Param("dataType") String dataType);

    @Query(nativeQuery = true, value = "SELECT DISTINCT protocol FROM scatterplotdata")
    List<String> fetchAvailableProtocols();
}


---

GraphQL Configuration

Add GraphQL dependency to your pom.xml (if not already included):

<dependency>
    <groupId>com.graphql-java-kickstart</groupId>
    <artifactId>graphql-spring-boot-starter</artifactId>
    <version>11.1.0</version>
</dependency>
<dependency>
    <groupId>com.graphql-java-kickstart</groupId>
    <artifactId>graphiql-spring-boot-starter</artifactId>
    <version>11.1.0</version>
</dependency>


---

GraphQL Schema: schema.graphqls

Create a schema file for GraphQL queries (place it in src/main/resources/graphql):

type ScatterPlotData {
    collectionName: String
    collectionDate: String
    yValue: Long
}

type Query {
    getScatterPlotData(protocol: String!, dataType: String!): [ScatterPlotData]
    getAvailableProtocols: [String]
}


---

GraphQL Data Fetcher: UCSPScatterPlotDataFetcher

Create a data fetcher to handle GraphQL queries:

package com.verizon.ucs.restapi.graphql;

import com.verizon.ucs.restapi.repository.UCSPScatterPlotRepository;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

@Component
public class UCSPScatterPlotDataFetcher {

    private final UCSPScatterPlotRepository scatterPlotRepository;

    public UCSPScatterPlotDataFetcher(UCSPScatterPlotRepository scatterPlotRepository) {
        this.scatterPlotRepository = scatterPlotRepository;
    }

    public List<Map<String, Object>> getScatterPlotData(String protocol, String dataType) {
        return scatterPlotRepository.fetchScatterPlotData(protocol, dataType);
    }

    public List<String> getAvailableProtocols() {
        return scatterPlotRepository.fetchAvailableProtocols();
    }
}


---

GraphQL Resolver: UCSPScatterPlotQueryResolver

Add a resolver to link GraphQL schema with data fetchers:

package com.verizon.ucs.restapi.graphql;

import graphql.kickstart.tools.GraphQLQueryResolver;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

@Component
public class UCSPScatterPlotQueryResolver implements GraphQLQueryResolver {

    private final UCSPScatterPlotDataFetcher scatterPlotDataFetcher;

    public UCSPScatterPlotQueryResolver(UCSPScatterPlotDataFetcher scatterPlotDataFetcher) {
        this.scatterPlotDataFetcher = scatterPlotDataFetcher;
    }

    public List<Map<String, Object>> getScatterPlotData(String protocol, String dataType) {
        return scatterPlotDataFetcher.getScatterPlotData(protocol, dataType);
    }

    public List<String> getAvailableProtocols() {
        return scatterPlotDataFetcher.getAvailableProtocols();
    }
}


---

Service Class (Optional)

If you want to add a service layer:

package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.repository.UCSPScatterPlotRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class UCSPScatterPlotService {

    private final UCSPScatterPlotRepository scatterPlotRepository;

    public UCSPScatterPlotService(UCSPScatterPlotRepository scatterPlotRepository) {
        this.scatterPlotRepository = scatterPlotRepository;
    }

    public List<Map<String, Object>> getScatterPlotData(String protocol, String dataType) {
        return scatterPlotRepository.fetchScatterPlotData(protocol, dataType);
    }

    public List<String> getAvailableProtocols() {
        return scatterPlotRepository.fetchAvailableProtocols();
    }
}


---

Files to Create/Modify:

1. Entity: ScatterPlotData.java


2. Repository: UCSPScatterPlotRepository.java


3. GraphQL Schema: schema.graphqls


4. GraphQL Data Fetcher: UCSPScatterPlotDataFetcher.java


5. GraphQL Resolver: UCSPScatterPlotQueryResolver.java


6. Service Class (Optional): UCSPScatterPlotService.java




---

Example GraphQL Queries

1. Get Scatter Plot Data

query {
    getScatterPlotData(protocol: "SNMP", dataType: "number_of_msgs") {
        collectionName
        collectionDate
        yValue
    }
}


2. Get Available Protocols

query {
    getAvailableProtocols
}



