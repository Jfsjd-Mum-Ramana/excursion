Hereâ€™s the updated TtlScheduler class that ensures the response is logged properly and retrieved as a String from the RestTemplateCustomizer class.


---

Updated TtlScheduler Class

package com.verizon.ucs.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.model.DataWrapperDTO;
import com.verizon.ucs.properties.DbProperties;
import com.verizon.ucs.util.RestTemplateCustomizer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class TtlScheduler {
    private static final Logger logger = LoggerFactory.getLogger(TtlScheduler.class);

    @Autowired
    private RestTemplateCustomizer restTemplateCustomizer;

    @Autowired
    private DbProperties databaseConfig;

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Scheduled(cron = "${scheduler.ttl.cron}")
    public void scheduleCallFunction() {
        String functionName = databaseConfig.getTransactionDeleteFunctionName();
        logger.info("Starting transaction deletion using function: {}", functionName);

        try {
            DataWrapperDTO dto = new DataWrapperDTO();
            dto.setParameterList(new String[]{"dummy"});
            dto.setFunctionName(functionName);

            logger.info("Sending request with DTO: {}", dto);

            // Call API and get response as String
            String responseBody = restTemplateCustomizer.callApi(dto);

            logger.info("Raw API Response Body: {}", responseBody);

            Integer deletedTransactions = parseDeletedTransactions(responseBody);

            if (deletedTransactions != null && deletedTransactions > 0) {
                logger.info("Transactions deleted successfully. Total deleted: {}", deletedTransactions);
            } else {
                logger.warn("No transactions were deleted. Verify function execution.");
            }

        } catch (Exception e) {
            logger.error("Unexpected error while deleting transactions.", e);
        }
    }

    private Integer parseDeletedTransactions(String responseBody) {
        try {
            logger.info("Parsing API Response: {}", responseBody);

            return Integer.valueOf(responseBody.trim());
        } catch (NumberFormatException e1) {
            try {
                JsonNode jsonNode = objectMapper.readTree(responseBody);

                logger.info("Parsed JSON Response: {}", jsonNode.toPrettyString());

                for (JsonNode value : jsonNode) {
                    if (value.isInt()) {
                        return value.asInt();
                    }
                }

                logger.warn("No integer value found in JSON response.");
                return null;
            } catch (Exception e2) {
                logger.error("Failed to parse deleted transaction count from response: {}", responseBody, e2);
                return null;
            }
        }
    }
}


---

Key Fixes

1. Retrieves API Response as String instead of ResponseEntity<String>.


2. Logs the raw response from RestTemplateCustomizer.


3. Handles both plain text and JSON responses dynamically.




---

Next Steps

Run the scheduler and check logs for:

Raw API Response Body: <actual response>

Ensure the response contains a numeric value.

If response is JSON, modify the function to return only an integer.


Let me know if you need further adjustments!

