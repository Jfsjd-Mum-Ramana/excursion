package com.verizon.ucs.service;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.function.Function;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.config.Constants;
import com.verizon.ucs.config.NexusConfig;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.model.RecoveryResponse;
import com.verizon.ucs.parser.Nexus1250Parser;
import com.verizon.ucs.parser.Nexus1450Parser;
import com.verizon.ucs.parser.Nexus1500Parser;

@Service
public class NexusService {
    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);

    @Autowired
    private NexusConfig config;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryTemplate retryTemplate;

    public Object processDevice(DeviceInfo device) throws Exception {
        String deviceType = device.getModel().replace("Nexus ", "");
        Function<String, ?> parser = getParser(deviceType);
        if (parser != null) {
            return getNexusData(device, parser);
        } else {
            logger.info("Unsupported device type: {}", deviceType);
            return null;
        }
    }

    private Function<String, ?> getParser(String deviceType) {
        switch (deviceType) {
            case Constants.DEVICE_TYPE_1250:
                return response -> {
                    try {
                        return new Nexus1250Parser().parse(response);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                };
            case Constants.DEVICE_TYPE_1450:
                return response -> new Nexus1450Parser().parse(response);
            case Constants.DEVICE_TYPE_1500:
                return response -> {
                    try {
                        return new Nexus1500Parser().parse(response);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                };
            default:
                return null;
        }
    }

    public <T> T getNexusData(DeviceInfo device, Function<String, T> parser) throws Exception {
        String response;
        String deviceType = device.getModel().replace("Nexus ", "");

        if (config.isUseSampleData()) {
            response = new String(Files.readAllBytes(Paths.get(config.getSampleDataPaths().get(deviceType))));
        } else {
            response = fetchDataFromDevice(deviceType, device.getDeviceIP());
        }

        T data = parser.apply(response);
        logger.info("NexusData::  {}", data);
        //validateData(data);
        //yourservice.publish(data,"kk");
        return data;
    }

    private String fetchDataFromDevice(String deviceType, String deviceIP) throws Exception {
        return retryTemplate.execute(context -> {
            String url = config.getApiEndpoints().get(deviceType).replace("{siteIP}", deviceIP);

            switch (deviceType) {
                case Constants.DEVICE_TYPE_1250:
                    return restTemplate.getForObject(url, String.class);
                case Constants.DEVICE_TYPE_1450:
                    return restTemplate.postForObject(url, getHttpEntity(), String.class);
                case Constants.DEVICE_TYPE_1500:
                    return restTemplate.getForObject(url, String.class);
                 default:
                    throw new IllegalArgumentException("Unsupported device type: " + deviceType);
            }
        });
    }
    
    private String generateRecoveryResponse(String deviceIP, String deviceName) {
        RecoveryResponse recoveryResponse = new RecoveryResponse();
        recoveryResponse.setUcgTimestamp(ZonedDateTime.now().format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
        recoveryResponse.setUcgSource(deviceIP);
        recoveryResponse.setUcgRawData("DEVICE_OFFLINE");
        recoveryResponse.setUcgDeviceName(deviceName);
        recoveryResponse.setUcgType("LOV");
        recoveryResponse.setUcgTopic("persistent://enmv/psc-alarm/nexus-meter-lov");

        ObjectMapper mapper = new ObjectMapper();
        try {
            return mapper.writeValueAsString(recoveryResponse);
        } catch (JsonProcessingException e) {
            logger.error("Error creating JSON recovery response", e);
            return "{}";
        }
    }

    private HttpEntity<String> getHttpEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        return new HttpEntity<>(createRequestPayload(Constants.REQUEST_BODY_1450), headers);
    }

    private String createRequestPayload(String[] chans) {
        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> payloadMap = Map.of("chans", chans);
        try {
            return mapper.writeValueAsString(payloadMap);
        } catch (JsonProcessingException e) {
            logger.error("Error creating JSON request payload", e);
            return null;
        }
    }
}

package com.verizon.ucs.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
import org.apache.hc.client5.http.ssl.NoopHostnameVerifier;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;
import org.apache.hc.client5.http.ssl.TrustAllStrategy;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.verizon.ucs.config.DBConfig;
import com.verizon.ucs.model.DeviceInfo;

@Component
public class DBService {
	private static Logger logger = LoggerFactory.getLogger(DBService.class);
	private RestTemplate restTemplate;

	@Autowired
	private DBConfig config;
	 
	public DBService() {
		try {
			CloseableHttpClient httpClient = HttpClients.custom()
					.setConnectionManager(PoolingHttpClientConnectionManagerBuilder.create()
							.setSSLSocketFactory(SSLConnectionSocketFactoryBuilder.create()
									.setSslContext(SSLContextBuilder.create()
											.loadTrustMaterial(TrustAllStrategy.INSTANCE).build())
									.setHostnameVerifier(NoopHostnameVerifier.INSTANCE).build())
							.build())
					.build();

			// Create a request factory with the custom HttpClient
			HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
			requestFactory.setHttpClient(httpClient);
			// Initialize headers
			HttpHeaders headers = new HttpHeaders();
			headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
			headers.setContentType(MediaType.APPLICATION_JSON);

			// Initialize RestTemplate with the custom request factory
			this.restTemplate = new RestTemplate(requestFactory);
			// this.restTemplate.setErrorHandler(new RestTemplateResponseErrorHandler());
		} catch (Exception e) {
			logger.error("Error while creating RestTemplate {} ", e);
		}

	}

	 public List<DeviceInfo> fetchDeviceDetails() throws IOException {
	        List<DeviceInfo> deviceList = new ArrayList<>();

	        // Create the request payload dynamically
	        String requestPayload = getJsonCallRequest(config.getStpName(), "");
	        logger.info("requestPayload in fetchDeviceDetails: '{}'", requestPayload);
	        // Execute the request
	        ResponseEntity<String> responseEntity = execute(getDbCallUrl(), requestPayload);
	        logger.info("ResponseEntity in fetchDeviceDetails: '{}'", responseEntity);

	        if (responseEntity != null && responseEntity.getBody() != null) {
	            String response = responseEntity.getBody();
	            logger.info("Cleaned final response in fetchDeviceDetails: '{}'", response);

	            ObjectMapper mapper = new ObjectMapper();
	            /*DeviceInfo[][] devicesArray = mapper.readValue(response, DeviceInfo[][].class);
	            if (devicesArray.length > 0) {
	                deviceList = Arrays.asList(devicesArray[0]);
	            }*/
	            DeviceInfo[][][] devicesArray = mapper.readValue(response, DeviceInfo[][][].class);
	            if (devicesArray.length > 0 && devicesArray[0].length > 0) {
	                deviceList = Arrays.asList(devicesArray[0][0]);
	            }

	            logger.info("devices from DB size: {}", deviceList.size());
	        } else {
	            logger.warn("ResponseEntity or its body is null in fetchDeviceDetails");
	        }

	        return deviceList;
	    }

	    private ResponseEntity<String> execute(String url, String requestPayload) {
	        HttpHeaders headers = new HttpHeaders();
	        headers.setContentType(MediaType.APPLICATION_JSON);
	        HttpEntity<String> entity = new HttpEntity<>(requestPayload, headers);
	        return restTemplate.postForEntity(url, entity, String.class);
	    }

	    private String getDbCallUrl() {
	        return config.getDbCallUrl();
	    }

	    private String getJsonCallRequest(String stp, String param) {
	        ObjectMapper mapper = new ObjectMapper();
	        List<Map<String, String>> requestList = new ArrayList<>();

	        Map<String, String> stpMap = new HashMap<>();
	        stpMap.put("stp", stp);
	        requestList.add(stpMap);

	        Map<String, String> paramMap = new HashMap<>();
	        paramMap.put("param", param);
	        requestList.add(paramMap);

	        try {
	            return mapper.writeValueAsString(requestList);
	        } catch (JsonProcessingException e) {
	            logger.error("Error creating JSON request payload", e);
	            return null;
	        }
	    }

}


package com.verizon.ucs.scheduler;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.model.NexusData1250;
import com.verizon.ucs.model.NexusData1450;
import com.verizon.ucs.model.NexusData1500;
import com.verizon.ucs.parser.Nexus1250Parser;
import com.verizon.ucs.parser.Nexus1450Parser;
import com.verizon.ucs.parser.Nexus1500Parser;
import com.verizon.ucs.service.DBService;
import com.verizon.ucs.service.NexusService;

import jakarta.annotation.PostConstruct;

@Component
public class NexusScheduler {
	private static final Logger logger = LoggerFactory.getLogger(NexusScheduler.class);
	
	@Value("${scheduler.threadPoolSize}")
    private int threadPoolSize;
	
    @Autowired
    private DBService dBService;
    
    @Autowired
    private NexusService nexusService;
	
	private ExecutorService executorService;
	
	@PostConstruct
    public void init() {
        this.executorService = Executors.newFixedThreadPool(threadPoolSize);
    }
	
    @Scheduled(fixedRateString = "${scheduler.fixedRate}")
    public void scheduleTask() {
        List<DeviceInfo> devices;
        try {
            // Fetch device details from the database
            devices = dBService.fetchDeviceDetails();
            logger.info("devices from DB::  {}", devices);
        
            // Process each device separately
            for (DeviceInfo device : devices) {
                executorService.submit(() -> {
                    try {
                        nexusService.processDevice(device);
                    } catch (Exception e) {
                        logger.info("Exception while processing device: {} , {}", device, e);
                    }
                });
            }
        } catch (IOException e) {
            logger.info("Exception while processing devices: {}", e);
        }
    }
}

package com.verizon.ucs.parser;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.verizon.ucs.model.NexusData1500;

public class Nexus1500Parser implements NexusParser1500 {

    @Override
    public NexusData1500 parse(String response) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new java.io.ByteArrayInputStream(response.getBytes()));
        NexusData1500 data = new NexusData1500();
        // data.setFirmware(extractValue(document, "Firm"));
        // data.setDeviceName(extractValue(document, "DEV_NAME"));
        data.setDeviceType(extractValue(document, "DEV_TYPE"));
        data.setVan(extractItemValue(document, "Inst Van"));
        data.setVbn(extractItemValue(document, "Inst Vbn"));
        data.setVcn(extractItemValue(document, "Inst Vcn"));
        data.setVab(extractItemValue(document, "Inst Vab"));
        data.setVbc(extractItemValue(document, "Inst Vbc"));
        data.setVca(extractItemValue(document, "Inst Vca"));
        data.setIa(extractItemValue(document, "Inst Ia"));
        data.setIb(extractItemValue(document, "Inst Ib"));
        data.setIc(extractItemValue(document, "Inst Ic"));
        data.setFreq(extractItemValue(document, "Inst Freq."));
        data.setPf(extractItemValue(document, "Inst PF"));
        data.setWatt(extractItemValue(document, "Inst Watt"));
        // data.setWattHr(extractItemValue(document, "Nexus Watt Hour (Q1+4)"));
        return data;
    }

    private String extractValue(Document document, String tagName) {
        NodeList nodeList = document.getElementsByTagName(tagName);
        if (nodeList.getLength() > 0) {
            return nodeList.item(0).getTextContent();
        }
        return "";
    }

    private String extractItemValue(Document document, String label) {
        NodeList nodeList = document.getElementsByTagName("item");
        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            if (label.equals(element.getAttribute("D_LABEL"))) {
                return element.getAttribute("D_VALUE");
            }
        }
        return "";
    }
}

package com.verizon.ucs.model;

public class RecoveryResponse {
	private String ucgTimestamp;
	private String ucgSource;
	private String ucgRawData;
	private String ucgDeviceName;
	private String ucgType;
	private String ucgTopic;

	// Getters and setters
	public String getUcgTimestamp() {
		return ucgTimestamp;
	}

	public void setUcgTimestamp(String ucgTimestamp) {
		this.ucgTimestamp = ucgTimestamp;
	}

	public String getUcgSource() {
		return ucgSource;
	}

	public void setUcgSource(String ucgSource) {
		this.ucgSource = ucgSource;
	}

	public String getUcgRawData() {
		return ucgRawData;
	}

	public void setUcgRawData(String ucgRawData) {
		this.ucgRawData = ucgRawData;
	}

	public String getUcgDeviceName() {
		return ucgDeviceName;
	}

	public void setUcgDeviceName(String ucgDeviceName) {
		this.ucgDeviceName = ucgDeviceName;
	}

	public String getUcgType() {
		return ucgType;
	}

	public void setUcgType(String ucgType) {
		this.ucgType = ucgType;
	}

	public String getUcgTopic() {
		return ucgTopic;
	}

	public void setUcgTopic(String ucgTopic) {
		this.ucgTopic = ucgTopic;
	}
}


Please note this classes I will give you requirements and other classes
