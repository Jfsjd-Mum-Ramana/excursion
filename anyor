Here’s the full implementation of all the required classes, including fixes for the issues you encountered and the implementation of the LOV notification for Nexus 1450 when unreachable.


---

1. Configuration Classes

NexusConfig.java

package com.verizon.ucs.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import java.util.Map;

@Configuration
@ConfigurationProperties(prefix = "nexus")
public class NexusConfig {
    private Map<String, String> apiEndpoints;
    private String credentials;
    private boolean useSampleData;
    private Map<String, String> sampleDataPaths;

    public Map<String, String> getApiEndpoints() {
        return apiEndpoints;
    }

    public void setApiEndpoints(Map<String, String> apiEndpoints) {
        this.apiEndpoints = apiEndpoints;
    }

    public String getCredentials() {
        return credentials;
    }

    public void setCredentials(String credentials) {
        this.credentials = credentials;
    }

    public boolean isUseSampleData() {
        return useSampleData;
    }

    public void setUseSampleData(boolean useSampleData) {
        this.useSampleData = useSampleData;
    }

    public Map<String, String> getSampleDataPaths() {
        return sampleDataPaths;
    }

    public void setSampleDataPaths(Map<String, String> sampleDataPaths) {
        this.sampleDataPaths = sampleDataPaths;
    }
}

VMBProperties.java

package com.verizon.ucs.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "vmb")
public class VMBProperties {
    private String serviceUrl;
    private String topicName;
    private String tlsCertFile;
    private String tlsKeyFile;
    private String tlsTrustCertsFile;

    public String getServiceUrl() {
        return serviceUrl;
    }

    public void setServiceUrl(String serviceUrl) {
        this.serviceUrl = serviceUrl;
    }

    public String getTopicName() {
        return topicName;
    }

    public void setTopicName(String topicName) {
        this.topicName = topicName;
    }

    public String getTlsCertFile() {
        return tlsCertFile;
    }

    public void setTlsCertFile(String tlsCertFile) {
        this.tlsCertFile = tlsCertFile;
    }

    public String getTlsKeyFile() {
        return tlsKeyFile;
    }

    public void setTlsKeyFile(String tlsKeyFile) {
        this.tlsKeyFile = tlsKeyFile;
    }

    public String getTlsTrustCertsFile() {
        return tlsTrustCertsFile;
    }

    public void setTlsTrustCertsFile(String tlsTrustCertsFile) {
        this.tlsTrustCertsFile = tlsTrustCertsFile;
    }
}

RetryConfig.java

package com.verizon.ucs.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.retry.annotation.EnableRetry;
import org.springframework.retry.backoff.FixedBackOffPolicy;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.retry.support.RetryTemplate;

@Configuration
@EnableRetry
public class RetryConfig {
    @Bean
    public RetryTemplate retryTemplate() {
        RetryTemplate retryTemplate = new RetryTemplate();

        SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();
        retryPolicy.setMaxAttempts(3);

        FixedBackOffPolicy backOffPolicy = new FixedBackOffPolicy();
        backOffPolicy.setBackOffPeriod(2000); // 2 seconds

        retryTemplate.setRetryPolicy(retryPolicy);
        retryTemplate.setBackOffPolicy(backOffPolicy);

        return retryTemplate;
    }
}


---

2. Pulsar Publisher Service

PulsarPublisherService.java

package com.verizon.ucs.service.pulsar;

import com.verizon.ucs.config.VMBProperties;
import org.apache.pulsar.client.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class PulsarPublisherService {
    private static final Logger logger = LoggerFactory.getLogger(PulsarPublisherService.class);

    @Autowired
    private VMBProperties properties;

    public void publishMessage(String message) throws PulsarClientException {
        logger.info("Publishing to Pulsar: {}", message);

        Map<String, String> authParams = new HashMap<>();
        authParams.put("tlsCertFile", properties.getTlsCertFile());
        authParams.put("tlsKeyFile", properties.getTlsKeyFile());

        try (PulsarClient pulsarClient = PulsarClient.builder()
                .serviceUrl(properties.getServiceUrl())
                .tlsTrustCertsFilePath(properties.getTlsTrustCertsFile())
                .authentication("org.apache.pulsar.client.impl.auth.AuthenticationTls", authParams)
                .enableTls(true)
                .build();
             Producer<byte[]> producer = pulsarClient.newProducer()
                     .topic(properties.getTopicName())
                     .create()) {

            producer.send(message.getBytes());
            logger.info("Message published successfully");

        } catch (PulsarClientException e) {
            logger.error("Failed to publish message: {}", e.getMessage());
            throw e;
        }
    }
}


---

3. Nexus Service

NexusService.java

package com.verizon.ucs.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.config.NexusConfig;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.service.pulsar.PulsarPublisherService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

@Service
public class NexusService {
    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);

    @Autowired
    private NexusConfig config;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryTemplate retryTemplate;

    @Autowired
    private PulsarPublisherService pulsarPublisherService;

    public void getNexusData(DeviceInfo device) {
        try {
            String response = fetchDataFromDevice(device);
            logger.info("Data received from Nexus {}: {}", device.getModel(), response);
        } catch (Exception e) {
            logger.error("Failed to retrieve data from device {}: {}", device.getDeviceIP(), e.getMessage());
            if ("Nexus 1450".equals(device.getModel())) {
                sendLovNotification(device.getDeviceIP());
            }
        }
    }

    private String fetchDataFromDevice(DeviceInfo device) throws Exception {
        String deviceType = device.getModel().replace("Nexus ", "").trim();
        String url = config.getApiEndpoints().get(deviceType).replace("{siteIP}", device.getDeviceIP());

        return retryTemplate.execute(context -> {
            try {
                return restTemplate.getForObject(url, String.class);
            } catch (Exception e) {
                logger.error("Error fetching data from {}: {}", deviceType, e.getMessage());
                throw e;
            }
        });
    }

    private void sendLovNotification(String deviceIP) {
        String lovMessage = String.format("{\"event\": \"LOV\", \"device\": \"%s\", \"status\": \"unreachable\"}", deviceIP);
        try {
            pulsarPublisherService.publishMessage(lovMessage);
            logger.info("LOV notification sent for device {}", deviceIP);
        } catch (Exception e) {
            logger.error("Failed to send LOV notification: {}", e.getMessage());
        }
    }
}


---

This implementation: ✅ Fixes logging issues
✅ Resolves Pulsar ClassCastException
✅ Handles Nexus 1450 being unreachable by sending a LOV notification
✅ Implements proper retry mechanisms

Let me know if you need any modifications!

