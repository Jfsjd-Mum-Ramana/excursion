package com.verizon.ucs.service.pulsar;

import com.verizon.ucs.config.VMBProperties;
import org.apache.pulsar.client.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;

@Service
public class PulsarConsumerService {
    private static final Logger logger = LoggerFactory.getLogger(PulsarConsumerService.class);

    @Autowired
    private VMBProperties properties;

    private PulsarClient pulsarClient;
    private Consumer<byte[]> consumer;

    @PostConstruct
    public void init() {
        try {
            logger.info("Initializing Pulsar Consumer for topic: {}", properties.getTopicName());

            // Create PulsarClient without incorrect casting
            pulsarClient = PulsarClient.builder()
                    .serviceUrl(properties.getServiceUrl())
                    .tlsTrustCertsFilePath(properties.getTlsTrustCertsFile())
                    .authentication(AuthenticationFactory.TLS(properties.getTlsCertFile(), properties.getTlsKeyFile())) 
                    .enableTls(true)
                    .build();

            consumer = pulsarClient.newConsumer()
                    .topic(properties.getTopicName())
                    .subscriptionName("nexus-subscription")
                    .subscriptionType(SubscriptionType.Shared)
                    .messageListener((c, msg) -> {
                        try {
                            String receivedMessage = new String(msg.getData());
                            logger.info("Received Pulsar message: {}", receivedMessage);
                            c.acknowledge(msg);
                        } catch (Exception e) {
                            logger.error("Failed to process message", e);
                            c.negativeAcknowledge(msg);
                        }
                    })
                    .subscribe();

            logger.info("Pulsar Consumer started successfully.");
        } catch (PulsarClientException e) {
            logger.error("Failed to initialize Pulsar Consumer", e);
        }
    }

    public void close() {
        try {
            if (consumer != null) {
                consumer.close();
            }
            if (pulsarClient != null) {
                pulsarClient.close();
            }
        } catch (PulsarClientException e) {
            logger.error("Error closing Pulsar resources", e);
        }
    }
}