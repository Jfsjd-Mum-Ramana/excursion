package com.verizon.ucs.restapi.controllers;

import org.junit.platform.suite.api.IncludeEngines;
import org.junit.platform.suite.api.SelectClasspathResource;
import org.junit.platform.suite.api.Suite;
import org.springframework.test.context.ContextConfiguration;

@Suite
@IncludeEngines("cucumber")
@SelectClasspathResource("features")
@ContextConfiguration(classes = UCSPControllerTestSteps.class)
public class RunCucumberTest {
}






package com.verizon.ucs.restapi.controllers;

import com.verizon.ucs.restapi.service.UCSPService;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import java.util.Collections;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(UCSPController.class)
@ContextConfiguration
public class UCSPControllerTestSteps {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UCSPService uCSPService;

    private MvcResult result;

    @Given("the UCS Portal API is up and running")
    public void theUcsPortalApiIsUpAndRunning() {
        // Assumes the context setup is sufficient to indicate the API is up and running
    }

    @When("I send a GET request to \"/portal/unique/models\"")
    public void iSendAGetRequestToPortalUniqueModels() throws Exception {
        Mockito.when(uCSPService.getUniqueValues().get("models")).thenReturn(Collections.singletonList("ModelX"));

        result = mockMvc.perform(get("/portal/unique/models")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
    }

    @Then("the response status should be {int}")
    public void theResponseStatusShouldBe(int status) throws Exception {
        Assertions.assertEquals(status, result.getResponse().getStatus());
    }

    @Then("the response should contain a list of unique device models")
    public void theResponseShouldContainAListOfUniqueDeviceModels() throws Exception {
        String content = result.getResponse().getContentAsString();
        Assertions.assertTrue(content.contains("[\"ModelX\"]"));
    }
}




Feature: Fetch unique device models
  As a user
  I want to fetch unique device models from the UCS Portal
  So that I can populate a dropdown list with the available models

  Scenario: Fetch unique device models
    Given the UCS Portal API is up and running
    When I send a GET request to "/portal/unique/models"
    Then the response status should be 200
    And the response should contain a list of unique device models
