package com.verizon.ucs.parser;

import com.verizon.ucs.model.NexusData;

public class Nexus1500Parser implements NexusParser {

    @Override
    public NexusData parse(String response) {
        NexusData data = new NexusData();
        data.setFirmware(extractValue(response, "Firm", ","));
        data.setDeviceName(extractValue(response, "Meter", "\""));
        data.setDeviceType(extractValue(response, "DEV_TYPE>", "<"));
        data.setVan(extractValue(response, "Inst Van", "\""));
        data.setVbn(extractValue(response, "Inst Vbn", "\""));
        data.setVcn(extractValue(response, "Inst Vcn", "\""));
        data.setVab(extractValue(response, "Inst Vab", "\""));
        data.setVbc(extractValue(response, "Inst Vbc", "\""));
        data.setVca(extractValue(response, "Inst Vca", "\""));
        data.setIa(extractValue(response, "Inst Ia", "\""));
        data.setIb(extractValue(response, "Inst Ib", "\""));
        data.setIc(extractValue(response, "Inst Ic", "\""));
        data.setFreq(extractValue(response, "Inst Freq", "\""));
        data.setPf(extractValue(response, "Inst PF", "\""));
        data.setWatt(extractValue(response, "Inst Watt", "\""));
        data.setWattHr(extractValue(response, "Watt Hour", "\""));
        return data;
    }

    private String extractValue(String xml, String startTag, String endChar) {
        int startIndex = xml.indexOf(startTag);
        if (startIndex == -1) return "";
        startIndex += startTag.length();
        int endIndex = startIndex;
        while (endIndex < xml.length() && xml.charAt(endIndex) != endChar.charAt(0)) {
            endIndex++;
        }
        return xml.substring(startIndex, endIndex).trim();
    }
}

But we need to parse the files using the parser please include it to parse the files and publish it into vmb here other parsers


package com.verizon.ucs.parser;

import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;

import com.verizon.ucs.model.NexusData;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;

public class NexusParsertest {

    public static NexusData parseXml(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new InputSource(new StringReader(xml)));

        NexusData data = new NexusData();
        data.setFirmware(getElementValue(document, "Firm"));
        data.setDeviceName(getElementValue(document, "Meter"));
        data.setDeviceType(getElementValue(document, "DEV_TYPE"));
        data.setVan(getElementValue(document, "Inst Van"));
        data.setVbn(getElementValue(document, "Inst Vbn"));
        data.setVcn(getElementValue(document, "Inst Vcn"));
        data.setVab(getElementValue(document, "Inst Vab"));
        data.setVbc(getElementValue(document, "Inst Vbc"));
        data.setVca(getElementValue(document, "Inst Vca"));
        data.setIa(getElementValue(document, "Inst Ia"));
        data.setIb(getElementValue(document, "Inst Ib"));
        data.setIc(getElementValue(document, "Inst Ic"));
        data.setFreq(getElementValue(document, "Inst Freq"));
        data.setPf(getElementValue(document, "Inst PF"));
        data.setWatt(getElementValue(document, "Inst Watt"));
        data.setWattHr(getElementValue(document, "Watt Hour"));

        return data;
    }

    public static NexusData parseJson(String json) {
        JSONObject jsonObject = new JSONObject(json);

        NexusData data = new NexusData();
        data.setFirmware(jsonObject.optString("dev.data_definition.version"));
        data.setDeviceName(jsonObject.optString("dev.serial"));
        data.setDeviceType(jsonObject.optString("dev.type"));
        data.setVan(jsonObject.optString("reading.1sec.volt.an"));
        data.setVbn(jsonObject.optString("reading.1sec.volt.bn"));
        data.setVcn(jsonObject.optString("reading.1sec.volt.cn"));
        data.setVab(jsonObject.optString("reading.1sec.volt.ab"));
        data.setVbc(jsonObject.optString("reading.1sec.volt.bc"));
        data.setVca(jsonObject.optString("reading.1sec.volt.ca"));
        data.setIa(jsonObject.optString("reading.1sec.current.a"));
        data.setIb(jsonObject.optString("reading.1sec.current.b"));
        data.setIc(jsonObject.optString("reading.1sec.current.c"));
        data.setFreq(jsonObject.optString("reading.1sec.freq"));
        data.setPf(jsonObject.optString("reading.1sec.pf.total"));
        data.setWatt(jsonObject.optString("reading.1sec.power.watt.total"));
        data.setWattHr(jsonObject.optString("reading.1sec.energy.watthr.q14.total"));

        return data;
    }

    private static String getElementValue(Document document, String tagName) {
        Element element = (Element) document.getElementsByTagName(tagName).item(0);
        return element != null ? element.getTextContent() : null;
    }
}

package com.verizon.ucs.parser;

import java.util.Map;

import com.google.gson.Gson;
import com.verizon.ucs.model.NexusData;

public class Nexus1450Parser implements NexusParser {

    @Override
    public NexusData parse(String response) {
        Gson gson = new Gson();
        Map<String, Object> jsonResponse = gson.fromJson(response, Map.class);

        NexusData data = new NexusData();
        data.setSerial((String) jsonResponse.get("dev.serial"));
        data.setDeviceName((String) jsonResponse.get("dev.designation"));
        data.setDeviceType((String) jsonResponse.get("dev.type"));
        data.setFirmware((String) jsonResponse.get("dev.data_definition.version"));
        data.setMac((String) jsonResponse.get("dev.eth0_mac"));
        data.setVan(jsonResponse.get("reading.1sec.volt.an").toString());
        data.setVbn(jsonResponse.get("reading.1sec.volt.bn").toString());
        data.setVcn(jsonResponse.get("reading.1sec.volt.cn").toString());
        data.setVab(jsonResponse.get("reading.1sec.volt.ab").toString());
        data.setVbc(jsonResponse.get("reading.1sec.volt.bc").toString());
        data.setVca(jsonResponse.get("reading.1sec.volt.ca").toString());
        data.setIa(jsonResponse.get("reading.1sec.current.a").toString());
        data.setIb(jsonResponse.get("reading.1sec.current.b").toString());
        data.setIc(jsonResponse.get("reading.1sec.current.c").toString());
        data.setFreq(jsonResponse.get("reading.1sec.freq").toString());
        data.setPf(jsonResponse.get("reading.1sec.pf.total").toString());
        data.setWatt(jsonResponse.get("reading.1sec.power.watt.total").toString());
        data.setWattHr(jsonResponse.get("reading.1sec.energy.watthr.q14.total").toString());
        return data;
    }
}


package com.verizon.ucs.parser;

import com.verizon.ucs.model.NexusData;

import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class Nexus1250Parser implements NexusParser {

    @Override
    public NexusData parse(String response) throws Exception {
        NexusData data = new NexusData();
        
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new java.io.ByteArrayInputStream(response.getBytes()));
        
        data.setFirmware(extractValue(document, "Firm"));
        data.setDeviceName(extractValue(document, "DEV_NAME"));
        data.setDeviceType(extractValue(document, "DEV_TYPE"));
        data.setVan(extractItemValue(document, "Inst Van"));
        data.setVbn(extractItemValue(document, "Inst Vbn"));
        data.setVcn(extractItemValue(document, "Inst Vcn"));
        data.setVab(extractItemValue(document, "Inst Vab"));
        data.setVbc(extractItemValue(document, "Inst Vbc"));
        data.setVca(extractItemValue(document, "Inst Vca"));
        data.setIa(extractItemValue(document, "Inst Ia"));
        data.setIb(extractItemValue(document, "Inst Ib"));
        data.setIc(extractItemValue(document, "Inst Ic"));
        data.setFreq(extractItemValue(document, "Inst Freq."));
        data.setPf(extractItemValue(document, "Inst PF"));
        data.setWatt(extractItemValue(document, "Inst Watt"));
        data.setWattHr(extractItemValue(document, "Watt Hour (Q1+4)"));
        
        return data;
    }

    private String extractValue(Document document, String tagName) {
        NodeList nodeList = document.getElementsByTagName(tagName);
        if (nodeList.getLength() > 0) {
            return nodeList.item(0).getTextContent();
        }
        return "";
    }

    private String extractItemValue(Document document, String label) {
        NodeList nodeList = document.getElementsByTagName("item");
        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            if (label.equals(element.getAttribute("D_LABEL"))) {
                return element.getAttribute("D_VALUE");
            }
        }
        return "";
    }
}

package com.verizon.ucs.parser;

import com.verizon.ucs.model.NexusData;

public class Nexus1500Parser implements NexusParser {

    @Override
    public NexusData parse(String response) {
        NexusData data = new NexusData();
        data.setFirmware(extractValue(response, "Firm", ","));
        data.setDeviceName(extractValue(response, "Meter", "\""));
        data.setDeviceType(extractValue(response, "DEV_TYPE>", "<"));
        data.setVan(extractValue(response, "Inst Van", "\""));
        data.setVbn(extractValue(response, "Inst Vbn", "\""));
        data.setVcn(extractValue(response, "Inst Vcn", "\""));
        data.setVab(extractValue(response, "Inst Vab", "\""));
        data.setVbc(extractValue(response, "Inst Vbc", "\""));
        data.setVca(extractValue(response, "Inst Vca", "\""));
        data.setIa(extractValue(response, "Inst Ia", "\""));
        data.setIb(extractValue(response, "Inst Ib", "\""));
        data.setIc(extractValue(response, "Inst Ic", "\""));
        data.setFreq(extractValue(response, "Inst Freq", "\""));
        data.setPf(extractValue(response, "Inst PF", "\""));
        data.setWatt(extractValue(response, "Inst Watt", "\""));
        data.setWattHr(extractValue(response, "Watt Hour", "\""));
        return data;
    }

    private String extractValue(String xml, String startTag, String endChar) {
        int startIndex = xml.indexOf(startTag);
        if (startIndex == -1) return "";
        startIndex += startTag.length();
        int endIndex = startIndex;
        while (endIndex < xml.length() && xml.charAt(endIndex) != endChar.charAt(0)) {
            endIndex++;
        }
        return xml.substring(startIndex, endIndex).trim();
    }
}
The parser method is implemented below please use 

 private NexusParser getParser(String deviceType) {
        switch (deviceType) {
            case "1250":
                return new Nexus1250Parser();
            case "1450":
                return new Nexus1450Parser();
            case "1500":
                return new Nexus1250Parser();
            default:
                throw new IllegalArgumentException("Unsupported device type: " + deviceType);
        }
    }

    private void validateData(NexusData data) throws Exception {
    	if(data !=null && data.getDeviceName()!=null) {
    		return;
    	}
    }
