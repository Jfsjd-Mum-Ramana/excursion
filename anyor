import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Grid, Card, CardContent, Typography, MenuItem, TextField, Button, Table, TableBody, TableCell, TableHead, TableRow, CircularProgress, Pagination } from '@mui/material';
import { AVAILABLE_ALARM_COLLECTION_TYPES_QUERY, FETCH_ALARM_METRICS_QUERY } from '../../graphQL/graphqlQueries';
import { __UCS_GRAPHQL_URL__ } from '../../api-endpoints';

const OverallHealthMetrics = () => {
    const [collectionTypes, setCollectionTypes] = useState([]);
    const [selectedType, setSelectedType] = useState('');
    const [fromDate, setFromDate] = useState('');
    const [toDate, setToDate] = useState('');
    const [metricsData, setMetricsData] = useState([]);
    const [loading, setLoading] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [rowsPerPage] = useState(5);

    // Fetch collection types on component mount
    useEffect(() => {
        const fetchCollectionTypes = async () => {
            try {
                const response = await axios.post(__UCS_GRAPHQL_URL__, {
                    query: AVAILABLE_ALARM_COLLECTION_TYPES_QUERY,
                });
                setCollectionTypes(response.data?.data?.availableAlarmCollectionTypes || []);
            } catch (error) {
                console.error('Error fetching collection types:', error);
            }
        };
        fetchCollectionTypes();
    }, []);

    // Fetch metrics data
    const fetchMetrics = async () => {
        if (!selectedType || !fromDate || !toDate) {
            alert('Please fill in all fields');
            return;
        }
        setLoading(true);
        try {
            const response = await axios.post(__UCS_GRAPHQL_URL__, {
                query: FETCH_ALARM_METRICS_QUERY,
                variables: {
                    collectionType: selectedType,
                    fromDate,
                    toDate,
                },
            });
            setMetricsData(response.data?.data?.alarmMetrics || []);
        } catch (error) {
            console.error('Error fetching metrics data:', error);
        } finally {
            setLoading(false);
        }
    };

    // Pagination logic
    const handlePageChange = (event, value) => {
        setCurrentPage(value);
    };

    const paginatedMetrics = metricsData.slice(
        (currentPage - 1) * rowsPerPage,
        currentPage * rowsPerPage
    );

    return (
        <Card>
            <CardContent>
                {/* Header */}
                <Typography variant="h5" gutterBottom>
                    Overall Health Metrics
                </Typography>

                {/* Filters Section */}
                <Grid container spacing={2} marginBottom={3}>
                    {/* Collection Type Dropdown */}
                    <Grid item xs={12} sm={4}>
                        <TextField
                            select
                            fullWidth
                            label="Collection Type"
                            value={selectedType}
                            onChange={(e) => setSelectedType(e.target.value)}
                        >
                            {collectionTypes.map((type) => (
                                <MenuItem key={type.typeId} value={type.type}>
                                    {type.type}
                                </MenuItem>
                            ))}
                        </TextField>
                    </Grid>

                    {/* From Date */}
                    <Grid item xs={12} sm={4}>
                        <TextField
                            fullWidth
                            type="date"
                            label="From Date"
                            InputLabelProps={{ shrink: true }}
                            value={fromDate}
                            onChange={(e) => setFromDate(e.target.value)}
                        />
                    </Grid>

                    {/* To Date */}
                    <Grid item xs={12} sm={4}>
                        <TextField
                            fullWidth
                            type="date"
                            label="To Date"
                            InputLabelProps={{ shrink: true }}
                            value={toDate}
                            onChange={(e) => setToDate(e.target.value)}
                        />
                    </Grid>
                </Grid>

                {/* Fetch Button */}
                <Grid container justifyContent="flex-end" marginBottom={3}>
                    <Button
                        variant="contained"
                        color="primary"
                        onClick={fetchMetrics}
                        disabled={loading}
                    >
                        {loading ? <CircularProgress size={20} color="inherit" /> : 'Fetch Metrics'}
                    </Button>
                </Grid>

                {/* Metrics Table */}
                {metricsData.length > 0 ? (
                    <>
                        <Table>
                            <TableHead>
                                <TableRow>
                                    <TableCell>Date</TableCell>
                                    <TableCell>Total Size (Bytes)</TableCell>
                                    <TableCell>Total Files</TableCell>
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                {paginatedMetrics.map((metric, index) => (
                                    <TableRow key={index}>
                                        <TableCell>{metric.date}</TableCell>
                                        <TableCell>{metric.totalSizeOfFilesBytes}</TableCell>
                                        <TableCell>{metric.totalNumberOfFiles}</TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>

                        {/* Pagination */}
                        <Grid container justifyContent="flex-end" marginTop={2}>
                            <Pagination
                                count={Math.ceil(metricsData.length / rowsPerPage)}
                                page={currentPage}
                                onChange={handlePageChange}
                                color="primary"
                            />
                        </Grid>
                    </>
                ) : (
                    <Typography variant="body2" color="textSecondary" align="center">
                        No metrics data available. Please adjust your filters and try again.
                    </Typography>
                )}
            </CardContent>
        </Card>
    );
};

export default OverallHealthMetrics;