type Query {
    allDevices: [Device]
    searchDevices(apiRequest: ApiRequest): [Device]
    uniqueModels: [String]
    uniqueNetworks: [String]
    uniqueUCGSources: [String]
    uniqueUCGSourcesByProject(projectId: Long): [String]  # For fetching UCG sources by project ID
    uniqueVendors: [String]
    uniqueProjects: [String]
}

type Device {
    deviceName: ID!
    model: String
    loopback: String
    status: String
    vendor: String
    routerType: String
    pollerCluster: String
    pollerInterval: Int
    network: String
    lastUpdate: String
    physIp: String
}

input ApiRequest {
    deviceName: String
    model: String
    loopback: String
    vendor: String
    network: String
}






package com.verizon.ucs.restapi.controllers;

import com.verizon.ucs.restapi.dto.ApiRequest;
import com.verizon.ucs.restapi.model.Device;
import com.verizon.ucs.restapi.service.UCSPService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.graphql.data.method.annotation.SchemaMapping;
import org.springframework.stereotype.Controller;

import java.util.List;

/**
 * Controller interface for UCS Portal Application with JPA
 */
@Controller
public class UCSPController {
    private static Logger logger = LoggerFactory.getLogger(UCSPController.class);

    @Autowired
    private UCSPService uCSPService;

    @QueryMapping(value = "searchDevices")
    public List<Device> getFilteredDevices(@Argument ApiRequest apiRequest) {
        List<Device> devices = uCSPService.searchDevices(apiRequest);
        return devices;
    }

    @QueryMapping(value = "allDevices")
    public List<Device> getAllDevices() {
        return uCSPService.getAllDevices();
    }

    @SchemaMapping(typeName = "Query", value = "uniqueModels")
    public List<String> getUniqueModels() {
        List<String> models = uCSPService.getUniqueValues().get("models");
        return models;
    }

    @QueryMapping(value = "uniqueVendors")
    public List<String> getUniqueVendors() {
        List<String> vendors = uCSPService.getUniqueValues().get("vendors");
        return vendors;
    }

    @QueryMapping
    public List<String> uniqueNetworks() {
        List<String> networks = uCSPService.getUniqueValues().get("networks");
        return networks;
    }

    @QueryMapping(value = "uniqueUCGSources")
    public List<String> getUniqueUCGSources() {
        List<String> ucgSources = uCSPService.getUniqueUCGSources();
        return ucgSources;
    }

    @QueryMapping(value = "uniqueUCGSourcesByProject")
    public List<String> getUniqueUCGSourcesByProject(@Argument Long projectId) {
        return uCSPService.getUniqueUCGSourcesByProject(projectId);
    }

    @QueryMapping(value = "uniqueUCGProjects")
    public List<String> getUniqueUCGProjects() {
        List<String> ucgProjects = uCSPService.getUniqueUCGProjects();
        return ucgProjects;
    }
}






package com.verizon.ucs.restapi.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.verizon.ucs.restapi.dto.ApiRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.verizon.ucs.restapi.model.Device;
import com.verizon.ucs.restapi.repository.UCSPRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class UCSPService {

    private static final Logger logger = LoggerFactory.getLogger(UCSPService.class);

    @Autowired
    private UCSPRepository uCSPRepository;

    public List<String> getUniqueUCGSources() {
        return uCSPRepository.findDistinctUCGSourcesByProject(null);
    }

    public List<String> getUniqueUCGSourcesByProject(Long projectId) {
        logger.debug("Fetching UCG Sources for project ID: " + projectId);
        List<String> ucgSources = uCSPRepository.findDistinctUCGSourcesByProject(projectId);
        logger.debug("Fetched UCG Sources: " + ucgSources);
        return ucgSources;
    }

    public List<String> getUniqueUCGProjects() {
        return uCSPRepository.findDistinctProjects();
    }

    public List<Device> searchDevices(ApiRequest params) {
        if (params.getDeviceName() != null && !params.getDeviceName().isEmpty()) {
            return uCSPRepository.findByDeviceNameIgnoreCase(params.getDeviceName());
        }
        if (params.getLoopback() != null && !params.getLoopback().isEmpty()) {
            return uCSPRepository.findByLoopbackIgnoreCase(params.getLoopback());
        }
        if (params.getNetwork() != null && !params.getNetwork().isEmpty()) {
            return uCSPRepository.findByNetworkIgnoreCase(params.getNetwork());
        }
        if (params.getVendor() != null && !params.getVendor().isEmpty()) {
            return uCSPRepository.findByVendorIgnoreCase(params.getVendor());
        }
        if (params.getModel() != null && !params.getModel().isEmpty()) {
            return uCSPRepository.findByModelIgnoreCase(params.getModel());
        }
        return null;
    }

    public Map<String, List<String>> getUniqueValues() {
        Map<String, List<String>> uniqueValues = new HashMap<>();
        uniqueValues.put("models", uCSPRepository.findDistinctModels());
        uniqueValues.put("vendors", uCSPRepository.findDistinctVendors());
        uniqueValues.put("networks", uCSPRepository.findDistinctNetworks());
        return uniqueValues;
    }

    public List<Device> getAllDevices() {
        return uCSPRepository.findAll();
    }
}







package com.verizon.ucs.restapi.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.verizon.ucs.restapi.model.Device;

public interface UCSPRepository extends JpaRepository<Device, String> {

    List<Device> findByDeviceNameIgnoreCase(String deviceName);
    List<Device> findByLoopbackIgnoreCase(String loopback);
    List<Device> findByNetworkIgnoreCase(String network);
    List<Device> findByVendorIgnoreCase(String vendor);
    List<Device> findByModelIgnoreCase(String model);

    @Query("SELECT DISTINCT d.model FROM Device d")
    List<String> findDistinctModels();

    @Query("SELECT DISTINCT d.vendor FROM Device d")
    List<String> findDistinctVendors();

    @Query("SELECT DISTINCT d.network FROM Device d")
    List<String> findDistinctNetworks();

    @Query(nativeQuery=true, value="SELECT DISTINCT u.ucg_source FROM ucsp_ucgsources u WHERE u.project_id = :projectId")
    List<String> findDistinctUCGSourcesByProject(@Param("projectId") Long projectId);

    @Query(nativeQuery=true, value="SELECT DISTINCT u.name FROM ucsp_projects u")
    List<String> findDistinctProjects();
}
