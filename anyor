package com.verizon.ucs.service;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.config.Constants;
import com.verizon.ucs.config.NexusConfig;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.model.NexusData;
import com.verizon.ucs.parser.Nexus1250Parser;
import com.verizon.ucs.parser.Nexus1450Parser;
import com.verizon.ucs.parser.Nexus1500Parser;
import com.verizon.ucs.parser.NexusParser;
import com.verizon.ucs.service.pulsar.PulsarPublisherService;

@Service
public class NexusService {
    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);

    @Autowired
    private NexusConfig config;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryTemplate retryTemplate;

    @Autowired
    private PulsarPublisherService pulsarPublisherService;

    @Autowired
    private NormaliseReactorService normaliseReactorService;

    public void getNexusData(DeviceInfo device) {
        try {
            String response;
            String deviceType = extractDeviceType(device.getModel());

            if (config.isUseSampleData()) {
                response = readSampleData(deviceType);
            } else {
                response = fetchDataFromDevice(deviceType, device.getDeviceIP());
            }

            // Get the correct parser for the device type
            NexusParser parser = getParser(deviceType);
            NexusData data = parser.parse(response);

            // Validate and normalize data before publishing
            validateData(data);
            normaliseReactorService.handleAndPublishData(data, device.getDeviceIP());

            logger.info("Data successfully published for device: {}", device.getDeviceIP());

        } catch (Exception e) {
            logger.error("Failed to process device {}: {}", device.getDeviceIP(), e.getMessage());
            if ("1450".equals(extractDeviceType(device.getModel()))) {
                sendLovNotification(device.getDeviceIP());
            }
        }
    }

    private String extractDeviceType(String model) {
        return model.replace("Nexus ", "").trim();
    }

    private String readSampleData(String deviceType) throws Exception {
        String filePath = config.getSampleDataPaths().get(deviceType);
        if (filePath == null || filePath.isEmpty()) {
            throw new IllegalArgumentException("Sample data path not found for device type: " + deviceType);
        }
        return new String(Files.readAllBytes(Paths.get(filePath)));
    }

    private String fetchDataFromDevice(String deviceType, String deviceIP) throws Exception {
        String url = config.getApiEndpoints().get(deviceType).replace("{siteIP}", deviceIP);

        return retryTemplate.execute(context -> {
            logger.info("Fetching data from device: {} at IP: {}", deviceType, deviceIP);
            return restTemplate.getForObject(url, String.class);
        });
    }

    private HttpEntity<String> getHttpEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        return new HttpEntity<>(createRequestPayload(Constants.REQUEST_BODY_1450), headers);
    }

    private String createRequestPayload(String[] chans) {
        try {
            return new ObjectMapper().writeValueAsString(Map.of("chans", chans));
        } catch (Exception e) {
            logger.error("Error creating JSON request payload", e);
            return null;
        }
    }

    private NexusParser getParser(String deviceType) {
        return switch (deviceType) {
            case "1250" -> new Nexus1250Parser();  // XML parser
            case "1450" -> new Nexus1450Parser();  // JSON parser
            case "1500" -> new Nexus1500Parser();  // XML parser
            default -> throw new IllegalArgumentException("Unsupported device type: " + deviceType);
        };
    }

    private void validateData(NexusData data) throws Exception {
        if (data == null || data.getDeviceName() == null || data.getDeviceName().trim().isEmpty()) {
            throw new Exception("Invalid Nexus data: missing device name");
        }
    }

    private void sendLovNotification(String deviceIP) {
        String lovMessage = String.format("{\"event\": \"LOV\", \"device\": \"%s\", \"status\": \"unreachable\"}", deviceIP);
        try {
            pulsarPublisherService.publishMessage(lovMessage);
            logger.info("LOV notification sent for device {}", deviceIP);
        } catch (Exception e) {
            logger.error("Failed to send LOV notification: {}", e.getMessage());
        }
    }
}