import { Box, Button, Card, CardContent, Container, FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent, TextField, Typography } from '@mui/material';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { authenticate, getToken } from '../auth';

interface Device {
    device_name: string;
    model: string;
    loopback: string;
    status: string;
    vendor: string;
    router_type: string;
    pollercluster: string;
    poll_interval: string;
    network: string;
    last_update: string;
    phys_ip_address: string;
}

const DashboardGridData: React.FC = () => {
    const [selectedDeviceName, setSelectedDeviceName] = useState<string>('');
    const [selectedDeviceIp, setSelectedDeviceIp] = useState<string>('');
    const [selectedDeviceModel, setSelectedDeviceModel] = useState<string>('');
    const [selectedDeviceVendor, setSelectedDeviceVendor] = useState<string>('');
    const [selectedDeviceNetwork, setSelectedDeviceNetwork] = useState<string>('');
    const [data, setData] = useState<Device[]>([]);
    const [loading, setLoading] = useState<boolean>(false);

    const [deviceModels, setDeviceModels] = useState<string[]>(["Loading options..."]);
    const [deviceVendors, setDeviceVendors] = useState<string[]>(["Loading options..."]);
    const [deviceNetworks, setDeviceNetworks] = useState<string[]>(["Loading options..."]);
    const [dropdownLoading, setDropdownLoading] = useState<boolean>(true);

    useEffect(() => {
        const fetchDropDownData = async () => {
            try {
                setDropdownLoading(true);
                await authenticate("Eclipse", "__UCS_API_PW__"); // Replace with your authentication logic
                const token = getToken();
                const headers = { Authorization: `Bearer ${token}` };

                const [modelsResponse, vendorsResponse, networksResponse] = await Promise.all([
                    axios.get<string[]>('/api/unique/models', { headers }),
                    axios.get<string[]>('/api/unique/vendors', { headers }),
                    axios.get<string[]>('/api/unique/networks', { headers }),
                ]);

                setDeviceModels(modelsResponse.data.length ? modelsResponse.data : ["No options available"]);
                setDeviceVendors(vendorsResponse.data.length ? vendorsResponse.data : ["No options available"]);
                setDeviceNetworks(networksResponse.data.length ? networksResponse.data : ["No options available"]);
            } catch (error) {
                console.error('Error fetching dropdown data', error);
                setDeviceModels(["Failed to load options"]);
                setDeviceVendors(["Failed to load options"]);
                setDeviceNetworks(["Failed to load options"]);
            } finally {
                setDropdownLoading(false);
            }
        };

        fetchDropDownData();
    }, []);

    const handleSelectChange = (setter: React.Dispatch<React.SetStateAction<string>>, resetOthers: () => void) => (event: SelectChangeEvent<string>) => {
        resetOthers();
        setter(event.target.value as string);
    };

    const handleTextFieldChange = (setter: React.Dispatch<React.SetStateAction<string>>, resetOthers: () => void) => (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        resetOthers();
        setter(event.target.value);
    };

    const resetSelections = () => {
        setSelectedDeviceName('');
        setSelectedDeviceIp('');
        setSelectedDeviceModel('');
        setSelectedDeviceVendor('');
        setSelectedDeviceNetwork('');
    };

    const handleSubmit = async () => {
        setLoading(true);
        try {
            const token = getToken();
            const headers = { Authorization: `Bearer ${token}` };
            let response;
            if (selectedDeviceName) {
                response = await axios.get<Device[]>('/api/devices', {
                    params: { searchType: 'device_name', searchValue: selectedDeviceName },
                    headers
                });
            } else if (selectedDeviceIp) {
                response = await axios.get<Device[]>('/api/devices', {
                    params: { searchType: 'loopback', searchValue: selectedDeviceIp },
                    headers
                });
            } else if (selectedDeviceModel) {
                response = await axios.get<Device[]>('/api/devices', {
                    params: { searchType: 'model', searchValue: selectedDeviceModel },
                    headers
                });
            } else if (selectedDeviceVendor) {
                response = await axios.get<Device[]>('/api/devices', {
                    params: { searchType: 'vendor', searchValue: selectedDeviceVendor },
                    headers
                });
            } else if (selectedDeviceNetwork) {
                response = await axios.get<Device[]>('/api/devices', {
                    params: { searchType: 'network', searchValue: selectedDeviceNetwork },
                    headers
                });
            }
            if (response) {
                setData(response.data);
            }
        } catch (error) {
            console.error('Error fetching data', error);
        } finally {
            setLoading(false);
        }
    };

    const columns: GridColDef[] = [
        { field: 'device_name', headerName: 'Device Name', minWidth: 150, flex: 1 },
        { field: 'model', headerName: 'Model', minWidth: 150, flex: 1 },
        { field: 'loopback', headerName: 'Loopback', minWidth: 150, flex: 1 },
        { field: 'status', headerName: 'Status', minWidth: 150, flex: 1 },
        { field: 'vendor', headerName: 'Vendor', minWidth: 150, flex: 1 },
        { field: 'router_type', headerName: 'Router Type', minWidth: 150, flex: 1 },
        { field: 'pollercluster', headerName: 'Poller Cluster', minWidth: 150, flex: 1 },
        { field: 'poll_interval', headerName: 'Poll Interval', minWidth: 150, flex: 1 },
        { field: 'network', headerName: 'Network', minWidth: 150, flex: 1 },
        { field: 'last_update', headerName: 'Last Update', minWidth: 150, flex: 1 },
        { field: 'phys_ip_address', headerName: 'Physical IP', minWidth: 150, flex: 1 },
    ];

    return (
        <Container maxWidth="lg">
            <Typography gutterBottom variant="h4" className="header" fontWeight={"bold"} paddingTop={"15px"}>
                UCS Portal
            </Typography>
            <Card sx={{ boxShadow: 1, border: 1 }}>
                <CardContent>
                    <Grid container spacing={2}>
                        <Grid item xs={12} sm={6} md={3}>
                            <TextField
                                placeholder="Enter Device Name"
                                fullWidth
                                variant="outlined"
                                value={selectedDeviceName}
                                onChange={(event) => handleTextFieldChange(setSelectedDeviceName, resetSelections)(event)}
                                label="Device Name"
                            />
                        </Grid>
                        <Grid item xs={12} sm={6} md={3}>
                            <TextField
                                placeholder="Enter Device IP"
                                fullWidth
                                variant="outlined"
                                value={selectedDeviceIp}
                                onChange={(event) => handleTextFieldChange(setSelectedDeviceIp, resetSelections)(event)}
                                label="Device IP"
                            />
                        </Grid>
                        <Grid item xs={12} sm={6} md={3}>
                            <FormControl fullWidth variant="outlined">
                                <InputLabel id="device-model-select-label">Device Model</InputLabel>
                                <Select
                                    labelId="device-model-select-label"
                                    value={selectedDeviceModel}
                                    onChange={(event) => handleSelectChange(setSelectedDeviceModel, resetSelections)(event)}
                                    label="Device Model"
                                    disabled={dropdownLoading}
                                >
                                    {deviceModels.map((model, index) => (
                                        <MenuItem key={index} value={model}>
                                            {model}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3}>
                            <FormControl fullWidth variant="
