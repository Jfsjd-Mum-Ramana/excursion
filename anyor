Table: ucsp_collection_type

CREATE TABLE ucsp_collection_type (
    type_id SERIAL PRIMARY KEY,
    type VARCHAR(255) NOT NULL UNIQUE
);


Table:ucsp_alarm_inventory

CREATE TABLE ucsp_alarm_inventory (
    id SERIAL PRIMARY KEY,
    collection_type_id INT NOT NULL,
    device_name VARCHAR(255) NOT NULL UNIQUE,
    device_ip INET NOT NULL UNIQUE,
    model VARCHAR(255),
    vendor VARCHAR(255),
    routerType VARCHAR(255),
    status VARCHAR(255),
    loopback VARCHAR(255),
    network VARCHAR(255),
    pollerCluster VARCHAR(255),
    pollerInterval VARCHAR(255),
    lastUpdate TIMESTAMP,
    physIp INET,
    CONSTRAINT fk_collection_type_id FOREIGN KEY (collection_type_id) REFERENCES ucsp_collection_type(type_id) ON DELETE CASCADE
);

 Queries:
1. Fetch Collection Types
This query retrieves all collection types from the ucsp_collection_type table.
SELECT type_id, type FROM ucsp_collection_type;
2. Fetch Device Names and IPs by Collection Type
This query retrieves device names and IPs based on the selected collection type.
SELECT device_name, device_ip 
FROM ucsp_alarm_inventory 
WHERE collection_type_id = :type_id;
3. Fetch Device Details Based on Filters
This query retrieves detailed device information based on the selected collection type, device name, device IP, model, and vendor. The model and vendor filters are optional.
SELECT 
    id,
    collection_type_id,
    device_name,
    device_ip,
    model,
    vendor,
    routerType,
    status,
    loopback,
    network,
    pollerCluster,
    pollerInterval,
    lastUpdate,
    physIp
FROM 
    ucsp_alarm_inventory 
WHERE 
    collection_type_id = :type_id 
    AND device_name = :device_name 
    AND device_ip = :device_ip 
    AND (:model IS NULL OR :model = '' OR model = :model) 
    AND (:vendor IS NULL OR :vendor = '' OR vendor = :vendor);


Based on this tables ucsp_alarm_metrics (Here change the last_updated to collection_date also change collection_name to collection_id and use foreign key constraint) 
