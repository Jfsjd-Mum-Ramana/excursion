package com.verizon.ucs.restapi.controllers;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.verizon.ucs.restapi.dto.AppApiResponse;
import com.verizon.ucs.restapi.dto.ApiRequest;
import com.verizon.ucs.restapi.model.Device;
import com.verizon.ucs.restapi.service.UCSPService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

/**
 * Controller interface for UCS Portal Application with JPA
 */
@RestController
@RequestMapping("/portal")
@CrossOrigin(origins = {"http://localhost:3000","http://localhost:8080"})
public class UCSPController {
	private static Logger logger = LoggerFactory.getLogger(UCSPController.class);

	@Autowired
	private UCSPService uCSPService;

	@Operation(summary = "This operation is to get device details for the given device or ip or network or model or vendor")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "OK.") })
	@GetMapping("/get-devices")
	public ResponseEntity<?> getDevices(@ModelAttribute ApiRequest apiRequest) {

	    AppApiResponse apiResponse = new AppApiResponse();
	    try {
	        List<Device> devices = uCSPService.searchDevices(apiRequest);
	        if (devices == null || devices.isEmpty()) {
	            apiResponse.setStatus(devices == null ? 400 : 204);
	            apiResponse.setMessage(devices == null ? "Invalid search criteria." : "No matching devices found.");
	        } else {
	            apiResponse.setMessage("Search request successful.");
	            apiResponse.setStatus(200);
	        }
	        apiResponse.setData(devices);
	        return new ResponseEntity<>(apiResponse, HttpStatus.OK);

	    } catch (Exception e) {
	        String err = createErrorMessage("/get-devices",e);
	        logger.error(err + " Detail Message: {}", e);
	        apiResponse.setStatus(500);
	        apiResponse.setMessage(e.getMessage());
	        apiResponse.setError(err);
	        return new ResponseEntity<>(apiResponse, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}
	@Operation(summary = "This operation is to get device details for the given device or IP or network or model or vendor")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "OK.") })
	@GetMapping("/unique/models")
	public ResponseEntity<?> getUniqueModels() {
		try {
			List<String> models = uCSPService.getUniqueValues().get("models");
			return ResponseEntity.ok(models);
		} catch (Exception e) {
			logger.error("Error fetching unique models: ", e);
			return new ResponseEntity<>("Failed to fetch models", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@Operation(summary = "Fetch unique vendors for dropdown population")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "OK.") })
	@GetMapping("/unique/vendors")
	public ResponseEntity<?> getUniqueVendors() {
		try {
			List<String> vendors = uCSPService.getUniqueValues().get("vendors");
			return ResponseEntity.ok(vendors);
		} catch (Exception e) {
			logger.error("Error fetching unique vendors: ", e);
			return new ResponseEntity<>("Failed to fetch vendors", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@Operation(summary = "Fetch unique networks for dropdown population")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "OK.") })
	@GetMapping("/unique/networks")
	public ResponseEntity<?> getUniqueNetworks() {
		try {
			List<String> networks = uCSPService.getUniqueValues().get("networks");
			return ResponseEntity.ok(networks);
		} catch (Exception e) {
			logger.error("Error fetching unique networks: ", e);
			return new ResponseEntity<>("Failed to fetch networks", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	private String createErrorMessage(String endpoint,Exception e) {
	    return " Error: " + e.getMessage() + " In Class: " + e.getStackTrace()[0].getClassName() 
	            + " In Method: " + e.getStackTrace()[0].getMethodName() + " at line number: "
	            + e.getStackTrace()[0].getLineNumber() +" at endpoint: "+endpoint;
	}
	
}

Collections: Integrate Fetch UCG Sources api into S3 Audit Search Page

AC1. Given that I am on the S3 Audit Search Page,

   When I view the 'ucg_sources' dropdown,

   Then it should be populated with data fetched from the 'Fetch UCG Sources data' API.



AC2. Given that the 'ucg_sources' data is updated in the backend,

   When I refresh the S3 Audit Search Page,

   Then the 'ucg_sources' dropdown should be updated with the latest data.



AC3. Given that I have selected a source from the 'ucg_sources' dropdown,

   When I perform a search,

   Then the search results should be filtered based on the selected source.



AC4. Given that an error occurs while fetching the 'ucg_sources' data,

   When I view the 'ucg_sources' dropdown,

   Then an appropriate error message should be displayed.
