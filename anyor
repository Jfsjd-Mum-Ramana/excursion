package com.verizon.ucs.scheduler;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.service.DBService;
import com.verizon.ucs.service.NexusService;

import jakarta.annotation.PostConstruct;

@Component
public class NexusScheduler {
    private static final Logger logger = LoggerFactory.getLogger(NexusScheduler.class);

    @Value("${scheduler.threadPoolSize}")
    private int threadPoolSize;

    @Autowired
    private DBService dBService;
    
    @Autowired
    private NexusService nexusService;

    private ExecutorService executorService;

    @PostConstruct
    public void init() {
        logger.info("Starting @PostConstruct");
        try {
            // Using Virtual Thread Executor introduced in Java 21
            this.executorService = Executors.newVirtualThreadPerTaskExecutor();
        } catch (Exception e) {
            logger.error("Error in @PostConstruct", e);
        }
    }

    @Scheduled(fixedRateString = "${scheduler.fixedRate}")
    public void scheduleTask() {
        List<DeviceInfo> devices;
        logger.info("Starting Scheduler");
        try {
            // Fetch device details from the database
            devices = dBService.fetchDeviceDetails();
            logger.info("Devices from DB: {}", devices);

            // Process each device separately using Virtual Threads
            for (DeviceInfo device : devices) {
                executorService.submit(() -> {
                    try {
                        nexusService.getNexusData(device);
                    } catch (Exception e) {
                        logger.error("Exception while processing device: {}", device, e);
                    }
                });
            }
        } catch (Exception e) {
            logger.error("Exception while processing devices", e);
        }
    }
}