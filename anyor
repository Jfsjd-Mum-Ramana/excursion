import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { AVAILABLE_ALARM_COLLECTION_TYPES_QUERY, FETCH_ALARM_METRICS_QUERY } from '../../graphQL/graphqlQueries';
import { __UCS_GRAPHQL_URL__ } from '../../api-endpoints';
import { Box, Grid, FormControl, InputLabel, MenuItem, Select, SelectChangeEvent, TextField, Button } from '@mui/material';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LineChart } from '@mui/x-charts/LineChart';
import { useTheme } from '@mui/material/styles';
import dayjs, { Dayjs } from 'dayjs';

interface DrillDownData {
    time: string;
    sizeOfFilesBytes: number;
    numberOfFiles: number;
}

interface MetricsData {
    date: string;
    totalSizeOfFilesBytes: number;
    totalNumberOfFiles: number;
    alarmMetricsDrillDownList: DrillDownData[];
}

const chartHeight = 450;

const AlarmMetrics: React.FC = () => {
    const theme = useTheme();
    const [collectionTypes, setCollectionTypes] = useState<{ typeId: string, type: string }[]>([]);
    const [selectedType, setSelectedType] = useState<string>('');
    const [fromDate, setFromDate] = useState<Dayjs>(dayjs().subtract(7, 'day'));
    const [toDate, setToDate] = useState<Dayjs>(dayjs());
    const [metricsData, setMetricsData] = useState<MetricsData[]>([]);
    const [loading, setLoading] = useState<boolean>(false);

    useEffect(() => {
        const fetchCollectionTypes = async () => {
            try {
                const response = await axios.post(__UCS_GRAPHQL_URL__, {
                    query: AVAILABLE_ALARM_COLLECTION_TYPES_QUERY,
                });
                const types = response.data?.data?.availableAlarmCollectionTypes || [];
                setCollectionTypes(types);
            } catch (error) {
                console.error('Error fetching collection types:', error);
            }
        };
        fetchCollectionTypes();
    }, []);

    const handleFetchMetrics = async () => {
        setLoading(true);
        try {
            const response = await axios.post(__UCS_GRAPHQL_URL__, {
                query: FETCH_ALARM_METRICS_QUERY,
                variables: {
                    collectionType: selectedType,
                    fromDate: fromDate.format('YYYY-MM-DD'),
                    toDate: toDate.format('YYYY-MM-DD'),
                },
            });
            setMetricsData(response.data?.data?.alarmMetrics || []);
        } catch (error) {
            console.error('Error fetching metrics data:', error);
        } finally {
            setLoading(false);
        }
    };

    const transformedData = metricsData.map(item => ({
        date: item.date,
        totalSizeOfFilesBytes: item.totalSizeOfFilesBytes,
        totalNumberOfFiles: item.totalNumberOfFiles,
    }));

    const lineChartParams = {
        series: [
            {
                id: 'totalSizeOfFilesBytes',
                label: 'Size of Files (Bytes)',
                data: transformedData.map(item => item.totalSizeOfFilesBytes),
            },
            {
                id: 'totalNumberOfFiles',
                label: 'Number of Files',
                data: transformedData.map(item => item.totalNumberOfFiles),
            },
        ],
        xAxis: [
            {
                data: transformedData.map(item => item.date),
                scaleType: 'point',
                label: 'Date',
            },
        ],
        height: chartHeight,
        colors: theme.palette.distinctLightPalette,
    };

    return (
        <Box sx={{ padding: 4 }}>
            <Grid container spacing={3}>
                <Grid item xs={12} sm={4}>
                    <FormControl fullWidth>
                        <InputLabel id="collection-type-label">Collection Type</InputLabel>
                        <Select
                            labelId="collection-type-label"
                            value={selectedType}
                            onChange={(e: SelectChangeEvent<string>) => setSelectedType(e.target.value)}
                        >
                            {collectionTypes.map(type => (
                                <MenuItem key={type.typeId} value={type.type}>
                                    {type.type}
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                </Grid>
                <Grid item xs={12} sm={4}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="From Date"
                            value={fromDate}
                            onChange={(newValue) => setFromDate(newValue || dayjs())}
                            renderInput={(params) => <TextField {...params} fullWidth />}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} sm={4}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                            label="To Date"
                            value={toDate}
                            onChange={(newValue) => setToDate(newValue || dayjs())}
                            renderInput={(params) => <TextField {...params} fullWidth />}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12}>
                    <Button
                        variant="contained"
                        color="primary"
                        fullWidth
                        onClick={handleFetchMetrics}
                        disabled={!selectedType || loading}
                    >
                        {loading ? 'Fetching...' : 'Fetch Metrics'}
                    </Button>
                </Grid>
            </Grid>
            <Box mt={4}>
                {metricsData.length > 0 && (
                    <LineChart {...lineChartParams} />
                )}
            </Box>
        </Box>
    );
};

export default AlarmMetrics;