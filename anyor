import { Box, Button, Card, CardContent, Container, FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent, TextField, Typography } from '@mui/material';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { authenticate, getToken } from '../auth';


interface Device {
    device_name: string;
    model: string;
    loopback: string;
    status: string;
    vendor: string;
    router_type: string;
    pollercluster: string;
    poll_interval: string;
    network: string;
    last_update: string;
    phys_ip_address: string;
}



const DashboardGridData = () => {

    const [selectedDeviceName, setSelectedDeviceName] = useState<string>('');
    const [selectedDeviceIp, setSelectedDeviceIp] = useState<string>('');
    const [selectedDeviceModel, setSelectedDeviceModel] = useState<string>('');
    const [selectedDeviceVendor, setSelectedDeviceVendor] = useState<string>('');
    const [selectedDeviceNetwork, setSelectedDeviceNetwork] = useState<string>('');
    const [data, setData] = useState<Device[]>([]);
    const [loading, setLoading] = useState<boolean>(false);

    // const [deviceNames, setDeviceNames] = useState<string[]>([]);
    // const [deviceIps, setDeviceIps] = useState<string[]>([]);
    const [deviceModels, setDeviceModels] = useState<string[]>([]);
    const [deviceVendors, setDeviceVendors] = useState<string[]>([]);
    const [deviceNetworks, setDeviceNetworks] = useState<string[]>([]);


    useEffect(() => {
        const fetchDropDownData = async () => {
            try {
                const pw = __UCS_API_PW__;
               await authenticate("Eclipse", __UCS_API_PW__);
                const token = getToken();
                const headers = { Authorization: `Bearer ${token}` }
                const responses = await Promise.all([
                    axios.get<string[]>(__UCS_GET_DEVICE_MODELS__,{headers}),
                    axios.get<string[]>(__UCS_GET_DEVICE_VENDORS__, { headers }),
                    axios.get<string[]>(__UCS_GET_DEVICE_NETWORK__, { headers }),
                ]);
                setDeviceModels(responses[0].data);
                setDeviceVendors(responses[1].data);
                setDeviceNetworks(responses[2].data);
            } catch (error) {
                console.error('Error fetching dropdown data', error);
            }
        };

        fetchDropDownData();

    }, []);

    const handleSelectChange = (setter: React.Dispatch<React.SetStateAction<string>>, resetOthers: () => void) => (
        event: SelectChangeEvent<string>) => {
        resetOthers();
        setter(event.target.value as string);
    };

    const handleTextFieldChange = (setter: React.Dispatch<React.SetStateAction<string>>, resetOthers: () => void) => (
        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        resetOthers();
        setter(event.target.value);
    };

    const resetSelections = () => {
        setSelectedDeviceName('');
        setSelectedDeviceIp('');
        setSelectedDeviceModel('');
        setSelectedDeviceVendor('');
        setSelectedDeviceNetwork('');
    }

    const handleSubmit = async () => {
        setLoading(true);
        try {
            const token = getToken();
             const headers = { Authorization: `Bearer ${token}` }
            if (selectedDeviceName) {
                const response = await axios.get<Device[]>(__UCS_GET_DEVICE_DEATIL_BY_TYPE__, {
                    params: {
                        searchType: 'device_name',
                        searchValue: selectedDeviceName
                    },
                    headers
                });
                setData(response.data);
            } else if (selectedDeviceIp) {
                const response = await axios.get<Device[]>(__UCS_GET_DEVICE_DEATIL_BY_TYPE__, {
                    params: {
                        searchType: 'loopback',
                        searchValue: selectedDeviceIp
                    },
                    headers
                });
                setData(response.data);
            } else if (selectedDeviceModel) {
                const response = await axios.get<Device[]>(__UCS_GET_DEVICE_DEATIL_BY_TYPE__, {
                    params: {
                        searchType: 'model',
                        searchValue: selectedDeviceModel
                    },
                    headers
                });
                setData(response.data);
            } else if (selectedDeviceVendor) {
                const response = await axios.get<Device[]>(__UCS_GET_DEVICE_DEATIL_BY_TYPE__, {
                    params: {
                        searchType: 'vendor',
                        searchValue: selectedDeviceVendor
                    },
                    headers
                });
                setData(response.data);
            } else if (selectedDeviceNetwork) {
                const response = await axios.get<Device[]>(__UCS_GET_DEVICE_DEATIL_BY_TYPE__, {
                    params: {
                        searchType: 'network',
                        searchValue: selectedDeviceNetwork
                    },
                    headers
                });
                setData(response.data);
            }
        } catch (error) {
            console.error('Error fetching data', error);
        } finally {
            setLoading(false);
        }
    };

    const columns: GridColDef[] = [
        { field: 'device_name', headerName: 'DeviceName', minWidth: 150, flex: 1 },
        { field: 'model', headerName: 'DeviceModel', minWidth: 150, flex: 1 },
        { field: 'loopback', headerName: 'Loopback', minWidth: 150, flex: 1 },
        { field: 'status', headerName: 'Status', minWidth: 150, flex: 1 },
        { field: 'vendor', headerName: 'Vendor', minWidth: 150, flex: 1 },
        { field: 'router_type', headerName: 'RouterType', minWidth: 150, flex: 1 },
        { field: 'pollercluster', headerName: 'PollerCluster', minWidth: 150, flex: 1 },
        { field: 'poll_interval', headerName: 'PollInterval', minWidth: 150, flex: 1 },
        { field: 'network', headerName: 'Network', minWidth: 150, flex: 1 },
        { field: 'last_update', headerName: 'LastUpdate', minWidth: 150, flex: 1 },
        { field: 'phys_ip_address', headerName: 'PhysIpAdd', minWidth: 150, flex: 1 },

    ];

    return (
        <Container maxWidth={false}>
            <Typography gutterBottom  variant="titleXL" className="header" fontWeight={"bold"} gap={"100px"} paddingTop={"15px"}>
                UCS Portal
            </Typography>
            <Card sx={{ boxShadow: 1, border: 1, }}>
                <CardContent>
                    <Grid container spacing={2}>
                        <Grid item xs={12} sm={6} md={3}>
                            <TextField
                                placeholder="Enter Device Name"
                                fullWidth
                                variant="outlined"
                                value={selectedDeviceName}
                                onChange={(event) => handleTextFieldChange(setSelectedDeviceName, resetSelections)(event)}
                                label="Device Name"
                            >
                            </TextField>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3} >
                            <TextField
                                placeholder="Enter Device IP"
                                fullWidth
                                variant="outlined"
                                value={selectedDeviceIp}
                                onChange={(event) => handleTextFieldChange(setSelectedDeviceIp, resetSelections)(event)}
                                label="Device IP"
                            >
                            </TextField>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3} mt={-1}>
                            <FormControl sx={{ m: 1, minWidth: 300 }} size="medium" variant="outlined" margin="normal">
                                <InputLabel id="device-model-select-label" shrink={true}>Device Model</InputLabel>
                                <Select
                                    labelId="device-model-select-label"
                                    value={selectedDeviceModel}
                                    onChange={(event) => handleSelectChange(setSelectedDeviceModel, resetSelections)(event)}
                                    label="Device Model"
                                >
                                    {deviceModels?.map((model, i) => (
                                        <MenuItem
                                            key={model}
                                            id="deviceModel"
                                            value={model}
                                        >
                                            {model}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6} md={1} mt={-1} ml={-16}>
                            <FormControl sx={{ m: 1, minWidth: 300 }} size="medium" variant="outlined" margin="normal">
                                <InputLabel id="device-vendor-select-label">Device Vendor</InputLabel>
                                <Select
                                    labelId="device-vendor-select-label"
                                    value={selectedDeviceVendor}
                                    onChange={(event) => handleSelectChange(setSelectedDeviceVendor, resetSelections)(event)}
                                    label="Device Vendor"
                                >
                                    {deviceVendors?.map((vendor, i) => (
                                        <MenuItem
                                            key={vendor}
                                            id="deviceVendor"
                                            value={vendor}
                                        >
                                            {vendor}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3} >
                            <FormControl sx={{ m: 1, minWidth: 350 }} size="medium" variant="outlined" margin="normal">
                                <InputLabel id="device-network-select-label">Device Network</InputLabel>
                                <Select
                                    labelId="device-network-select-label"
                                    value={selectedDeviceNetwork}
                                    onChange={(event) => handleSelectChange(setSelectedDeviceNetwork, resetSelections)(event)}
                                    label="Device Network"
                                >
                                    {deviceNetworks?.map((network, i) => (
                                        <MenuItem
                                            key={network}
                                            id="deviceNetwork"
                                            value={network}
                                        >
                                            {network}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>
                    </Grid>
                    <Button variant="contained" color="primary" onClick={handleSubmit} disabled={!selectedDeviceName && !selectedDeviceIp && !selectedDeviceModel && !selectedDeviceVendor && !selectedDeviceNetwork}>
                        Submit
                    </Button>
                </CardContent>
            </Card>
            <Box mt={4} sx={{ height: 400, width: "100%" }}>
                <DataGrid rows={data} columns={columns}
                    initialState={{
                        pagination: {
                            paginationModel: {
                                pageSize: 10,
                                page: 0
                            }
                        }
                    }}
                    sx={
                        {
                            boxShadow: 1,
                            border: 1,
                        }
                    }
                    pageSizeOptions={[5, 10, 25]}
                    pagination
                    slotProps={{
                        footer: {
                            sx: {
                                justifyContent: "flex-start"
                            }
                        }
                    }}
                    checkboxSelection
                    disableRowSelectionOnClick
                    loading={loading} autoHeight />
            </Box>
        </Container>
    )
}

export default DashboardGridData
