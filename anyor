package com.verizon.ucs.service;

import com.newrelic.api.agent.NewRelic;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.properties.AppProperties;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Component
public class NewRelicService {
	private static Logger logger = LoggerFactory.getLogger(NewRelicService.class);
	public static final String events = "enmv1PSCnexus:events";
	private static Map<String, Object> basicAttributes;

	@Autowired
	private AppProperties appProperties;

	@PostConstruct
	public void init() {
		String appName = System.getenv().get("APP_NAME");
		String environment = System.getenv().get("APPENV");
		basicAttributes = new HashMap<>();
		basicAttributes.put("clusterID", appProperties.getPodNamespace());
		basicAttributes.put("podName", appProperties.getPodName());
		basicAttributes.put("podNameSpace", appProperties.getPodNamespace());
		basicAttributes.put("environment", environment);
		basicAttributes.put("appName", appName);

		logger.info("INIT_NR: {}", basicAttributes);
		logger.info("Recording custom event in init: {}", events);
		NewRelic.getAgent().getInsights().recordCustomEvent(events, basicAttributes);
	}

	public void publishedMessage(String status, DeviceInfo deviceInfo) {
		try {
			Map<String, Object> attributes = new HashMap<>();
			basicAttributes.forEach(attributes::put);

			attributes.put("status", status);
			attributes.put("count", 1);
			attributes.put("deviceIP", deviceInfo.getDeviceIP());
			attributes.put("deviceModel", deviceInfo.getModel());
			attributes.put("deviceName", deviceInfo.getDeviceName());

			logger.info("status: {}", status);
			logger.info("attributes: {}", attributes);
			logger.info("Recording custom event in publishedMessage: {}", events);

			NewRelic.getAgent().getInsights().recordCustomEvent(events, attributes);

		} catch (Exception e) {
			e.printStackTrace();
			logger.warn("Exception while passing new relic: " + e);
		}
	}
}


package com.verizon.ucs.service;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import com.verizon.eclipse.pulsar.producer.EclipsePulsarProducerNr;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.config.Constants;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.parser.Nexus1250Parser;
import com.verizon.ucs.parser.Nexus1450Parser;
import com.verizon.ucs.parser.Nexus1500Parser;
import com.verizon.ucs.properties.NexusProperties;
import com.verizon.ucs.properties.VMBProperties;
import com.verizon.ucs.util.Validation;

@Service
public class NexusService {
    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);

    @Autowired
    private NewRelicService newRelicService;

    @Autowired
    private NexusProperties nexusProperties;

    @Autowired
    private VMBProperties vMBProperties;

    @Autowired
    private Validation validation;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryTemplate retryTemplate;

    @Autowired
    private VmbEclipsePublisherService vmbEclipsePublisherService;

    private Map<String, EclipsePulsarProducerNr> producers = new HashMap<>();
    
    private ObjectMapper mapper = new ObjectMapper();

    public Object processDevice(DeviceInfo devInfo) throws Exception {
        devInfo.setModelNo(devInfo.getModel().replace("Nexus ", ""));

        Function<String, ?> parser = getParser(devInfo.getModelNo());
        if (parser != null) {
            return getNexusData(devInfo, parser);
        } else {
            logger.info("Unsupported device type: {}", devInfo.getModelNo());
            return null;
        }
    }

    private Function<String, ?> getParser(String deviceType) throws Exception {
        switch (deviceType) {
            case Constants.DEVICE_TYPE_1250:
                return response -> {
                    try {
                        return new Nexus1250Parser().parse(response);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                };
            case Constants.DEVICE_TYPE_1450:
                return response -> new Nexus1450Parser().parse(response);
            case Constants.DEVICE_TYPE_1500:
                return response -> {
                    try {
                        return new Nexus1500Parser().parse(response);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                };
            default:
                return null;
        }
    }

    public <T> T getNexusData(DeviceInfo devInfo, Function<String, T> parser) throws Exception {
        String response;

        if (nexusProperties.isUseSampleData()) {
            response = new String(Files.readAllBytes(Paths.get(nexusProperties.getSampleDataPaths().get(devInfo.getModelNo()))));
        } else {
            response = fetchDataFromDevice(devInfo);
        }

        if (response != null) {
            T data = parser.apply(response);
            logger.info("NexusData::  {}", data);

            boolean isErrorData = validation.validateData(devInfo, data);
            String ucgData = null;
            
            if (isErrorData) {
            	 ucgData = validation.generateUCGdata(devInfo, mapper.writeValueAsString(data),vMBProperties.getLovTopic());
            }else {
            	ucgData = validation.generateUCGdata(devInfo, mapper.writeValueAsString(data),vMBProperties.getVmbTopic());
            }
            publishAsyncWithNewRelic(vMBProperties.getVmbTopic(), ucgData, devInfo);
            return data;
        }
        return null;
    }

    private String fetchDataFromDevice(DeviceInfo devInfo) throws Exception {
        return retryTemplate.execute(context -> {
            String url = nexusProperties.getApiEndpoints().get(devInfo.getModelNo()).replace("{siteIP}", devInfo.getDeviceIP());

            switch (devInfo.getModelNo()) {
                case Constants.DEVICE_TYPE_1250:
                    return restTemplate.getForObject(url, String.class);
                case Constants.DEVICE_TYPE_1450:
                    return restTemplate.postForObject(url, getHttpEntity(), String.class);
                case Constants.DEVICE_TYPE_1500:
                    return restTemplate.getForObject(url, String.class);
                default:
                    throw new IllegalArgumentException("Unsupported device type: " + devInfo.getModelNo());
            }
        }, context -> {
            // Recovery logic
            Throwable lastThrowable = context.getLastThrowable();
            String errorMessage = lastThrowable != null ? lastThrowable.getMessage() : "Unknown error";
            logger.info("All retry attempts failed. Executing recovery logic. Error: {}", errorMessage);
            String lovMsg = validation.generateUCGdata(devInfo, errorMessage,vMBProperties.getLovTopic());
            vmbEclipsePublisherService.publishAsync(vMBProperties.getLovTopic(), lovMsg, devInfo.getDeviceIP());
            return null;
        });
    }

    private HttpEntity<String> getHttpEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        return new HttpEntity<>(createRequestPayload(Constants.REQUEST_BODY_1450), headers);
    }

    private String createRequestPayload(String[] chans) {
        Map<String, Object> payloadMap = Map.of("chans", chans);
        try {
            return mapper.writeValueAsString(payloadMap);
        } catch (JsonProcessingException e) {
            logger.error("Error creating JSON request payload", e);
            return null;
        }
    }
    public void publishAsyncWithNewRelic(String topic, String message, DeviceInfo deviceInfo) {
        EclipsePulsarProducerNr producer = producers.get(topic);
        String partitionKey = deviceInfo.getDeviceIP();
        logger.info("Entering publishAsyncWithNewRelic method");
        logger.info("Topic: {}", topic);
        logger.info("Message: {}", message);
        logger.info("DeviceInfo: {}", deviceInfo);

        if (producer != null) {
            logger.info("Producer found for topic: {}", topic);
            producer.publishAsyncWithNr(message, partitionKey);
            publishAsyncNewRelic(topic, deviceInfo);
            logger.info("Async message sent to topic {}: {}", topic, message);
        } else {
            logger.error("Producer for topic {} not found", topic);
        }
    }
    public void publishAsyncNewRelic(String topic, DeviceInfo deviceInfo) {
        String status;
        if (topic.contains("lov")) {
            status = "FAILURE";
        } else {
            status = "SUCCESS";
        }
        newRelicService.publishedMessage(status, deviceInfo);
    }
}


package com.verizon.ucs.service;

//import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
//import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.SubscriptionType;
import org.apache.pulsar.shade.client.api.v2.Consumer;
import org.apache.pulsar.shade.client.api.v2.PulsarClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.verizon.ucs.properties.VMBProperties;

import jakarta.annotation.PostConstruct;

@Component
public class VmbConsumerService {
	private static final Logger logger = LoggerFactory.getLogger(VmbConsumerService.class);

	@Autowired
	private PulsarClient pulsarClient;

	@Autowired
	private VMBProperties vMBConfig;

	@PostConstruct
	public void init() {
		if (vMBConfig.isEnableConsumer()) {
			new Thread(() -> process(vMBConfig.getLovTopic(), pulsarClient, "enmv-nexus-lov-sub-name")).start();
			new Thread(() -> process(vMBConfig.getVmbTopic(), pulsarClient, "enmv-nexus-alarm-sub-name")).start();
		}
	}

	public void process(String topicName, PulsarClient client, String subscriberName) {
		logger.info("topicName = {}, subscriberName = {}", topicName, subscriberName);
		Consumer<byte[]> consumer = null;
		try {
			consumer = client.newConsumer().topic(topicName).subscriptionName(subscriberName)
					.subscriptionType(SubscriptionType.Shared).subscribe();

			consumeMessage(consumer);
		} catch (Exception e) {
			logger.error("Exception in creating subscription name", e);
		}
	}

	public void consumeMessage(Consumer<byte[]> consumer) {
		if (consumer != null) {
			while (true) {
				Message<byte[]> message = null;
				try {
					logger.info("Going to consume");
					message = consumer.receive();
					logger.info("The consumed message is {}", new String(message.getValue()));
					logger.info("The consumed key is {}", message.getKey());
					consumer.acknowledge(message);
				} catch (Exception e) {
					logger.error("Exception in Consumer", e);
					if (message != null) {
						consumer.negativeAcknowledge(message);
					}
				}
			}
		}
	}
}

package com.verizon.ucs.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.verizon.eclipse.pulsar.producer.EclipsePulsarProducerNr;
import com.verizon.ucs.properties.VMBProperties;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;

import java.util.HashMap;
import java.util.Map;

@Service
public class VmbEclipsePublisherService {
    private static final Logger logger = LoggerFactory.getLogger(VmbEclipsePublisherService.class);

    private Map<String, EclipsePulsarProducerNr> producers = new HashMap<>();

    @Autowired
    private VMBProperties vmbConfig;

    @PostConstruct
    public void init() {
        logger.info("Initializing Pulsar producers");

        try {
            // Initialize producers for different topics
            initializeProducer(vmbConfig.getVmbTopic());
            initializeProducer(vmbConfig.getLovTopic());
        } catch (Exception e) {
            logger.error("Failed to initialize Pulsar producers", e);
        }
    }

    private void initializeProducer(String topic) throws Exception {
        EclipsePulsarProducerNr producer = new EclipsePulsarProducerNr(true,
                vmbConfig.getServiceUrl(),
                vmbConfig.getTlsTrustCertsFile(),
                vmbConfig.getTlsKeyFile(),
                vmbConfig.getTlsCertFile(),
                topic
        );
        producers.put(topic, producer);
        logger.info("Initialized producer for topic: {}", topic);
    }

    @PreDestroy
    public void shutDown() {
        try {
            logger.info("Shutting down Pulsar producers");
            for (EclipsePulsarProducerNr producer : producers.values()) {
                if (producer != null) {
                    producer.shutDown();
                }
            }
        } catch (Throwable e) {
            logger.error("Exception while shutting down Pulsar producers", e);
        }
    }

    public void publish(String topic, String message) throws Exception {
        EclipsePulsarProducerNr producer = producers.get(topic);
        if (producer != null) {
            producer.publish(message);
            logger.info("Message sent to topic {}: {}", topic, message);
        } else {
            logger.error("Producer for topic {} not found", topic);
        }
    }

    public void publishAsync(String topic, String message, String partitionKey) {
        EclipsePulsarProducerNr producer = producers.get(topic);
        if (producer != null) {
            producer.publishAsyncWithNr(message, partitionKey);
            logger.info("Async message sent to topic {}: {}", topic, message);
        } else {
            logger.error("Producer for topic {} not found", topic);
        }
    }
}

package com.verizon.ucs.service;

//import org.apache.pulsar.client.api.Producer;
import org.apache.pulsar.client.api.ProducerBuilder;
//import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.Schema;
import org.apache.pulsar.shade.client.api.v2.Producer;
import org.apache.pulsar.shade.client.api.v2.PulsarClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.verizon.ucs.properties.VMBProperties;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;

import java.util.HashMap;
import java.util.Map;

@Service
public class VmbProducerService {
    private static final Logger logger = LoggerFactory.getLogger(VmbProducerService.class);

    @Autowired
    private VMBProperties vmbConfig;

    @Autowired
    private PulsarClient pulsarClient;

    private Map<String, Producer<String>> producers = new HashMap<>();

    //@PostConstruct
    public void init() throws Exception {
        logger.info("Initializing Pulsar producers");

        // Initialize producers for different topics
        //initializeProducer(vmbConfig.getLovTopic());
        initializeProducer(vmbConfig.getVmbTopic());
    }

    private void initializeProducer(String topic) throws Exception {
        ProducerBuilder<String> producerBuilder = pulsarClient.newProducer(Schema.STRING)
                .topic(topic)
                .enableBatching(true)
                .batchingMaxMessages(1000)
                .batchingMaxPublishDelay(10, java.util.concurrent.TimeUnit.MILLISECONDS);

        Producer<String> producer = producerBuilder.create();
        producers.put(topic, producer);
        logger.info("Initialized producer for topic: {}", topic);
    }

    @PreDestroy
    public void shutDown() {
        try {
            logger.info("Shutting down Pulsar producers and client");
            for (Producer<String> producer : producers.values()) {
                if (producer != null) {
                    producer.close();
                }
            }
            if (pulsarClient != null) {
                pulsarClient.close();
            }
        } catch (Exception e) {
            logger.error("Exception while shutting down Pulsar producers and client", e);
        }
    }

    public void sendMessage(String topic, String message) throws Exception {
        Producer<String> producer = producers.get(topic);
        if (producer != null) {
            producer.send(message);
            logger.info("Message sent to topic {}: {}", topic, message);
        } else {
            logger.error("Producer for topic {} not found", topic);
        }
    }
}

package com.verizon.ucs.properties;

import lombok.Data;

import java.util.HashMap;
import java.util.Map;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

/***
 * TrapPropertiesYml - model class to read data from environment specific YAML
 * configuration file. This file maps the data from 'trap-properties' section of
 * YAML file.
 * 
 *
 */

@Data
@Component
@ConfigurationProperties(prefix = "commonprops")
public class AppProperties {
	public String appName;
	private String environment;
	private String podNamespace;
	private String podName;

	
	public String getAppName() {
		return appName;
	}

	public void setAppName(String appName) {
		this.appName = appName;
	}

	public String getEnvironment() {
		return environment;
	}

	public void setEnvironment(String environment) {
		this.environment = environment;
	}

	public String getPodNamespace() {
		return podNamespace;
	}

	public void setPodNamespace(String podNamespace) {
		this.podNamespace = podNamespace;
	}

	public String getPodName() {
		return podName;
	}

	public void setPodName(String podName) {
		this.podName = podName;
	}
	
	

}


package com.verizon.ucs.properties;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "vmb")
public class VMBProperties {
	private String serviceUrl;	
	private String tlsCertFile;
	private String tlsKeyFile;
	private String tlsTrustCertsFile;
	private String vmbTopic;
	private String lovTopic;
	private boolean isEnableConsumer;

	
	public String getServiceUrl() {
		return serviceUrl;
	}

	public void setServiceUrl(String serviceUrl) {
		this.serviceUrl = serviceUrl;
	}

	public String getTlsCertFile() {
		return tlsCertFile;
	}

	public void setTlsCertFile(String tlsCertFile) {
		this.tlsCertFile = tlsCertFile;
	}

	public String getTlsKeyFile() {
		return tlsKeyFile;
	}

	public void setTlsKeyFile(String tlsKeyFile) {
		this.tlsKeyFile = tlsKeyFile;
	}

	public String getTlsTrustCertsFile() {
		return tlsTrustCertsFile;
	}

	public void setTlsTrustCertsFile(String tlsTrustCertsFile) {
		this.tlsTrustCertsFile = tlsTrustCertsFile;
	}

	public String getVmbTopic() {
		return vmbTopic;
	}

	public void setVmbTopic(String vmbTopic) {
		this.vmbTopic = vmbTopic;
	}

	public String getLovTopic() {
		return lovTopic;
	}

	public void setLovTopic(String lovTopic) {
		this.lovTopic = lovTopic;
	}

	public boolean isEnableConsumer() {
		return isEnableConsumer;
	}

	public void setEnableConsumer(boolean isEnableConsumer) {
		this.isEnableConsumer = isEnableConsumer;
	}
	   
}

For the above project how the newrelic is work and also it is not printing the newrelic logs like are you here... and also the success message please check and resolve the issue
