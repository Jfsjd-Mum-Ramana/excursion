@Repository
public interface UCSPRepository extends JpaRepository<Device, String> {

    // Other methods ...

    // Fix query to fetch unique UCG sources for a specific project ID
    @Query(nativeQuery = true, value = "SELECT DISTINCT u.ucg_source FROM ucsp_ucgsources u JOIN ucsp_projects p ON u.project_id = p.id WHERE p.id = :projectId")
    List<String> findDistinctUCGSourcesByProject(@Param("projectId") Long projectId);

    // Other methods ...
}



@Service
public class UCSPService {

    // Other service methods ...

    @Autowired
    private UCSPRepository uCSPRepository;

    public List<String> getUniqueUCGSourcesByProject(Long projectId) {
        try {
            List<String> ucgSources = uCSPRepository.findDistinctUCGSourcesByProject(projectId);
            if (ucgSources == null || ucgSources.isEmpty()) {
                throw new RuntimeException("No UCG Sources found for the given project ID: " + projectId);
            }
            return ucgSources;
        } catch (DataAccessException e) {
            logger.error("Database error occurred while fetching UCG Sources", e);
            throw new GraphQLException("Database error: Unable to fetch UCG Sources for project ID: " + projectId);
        } catch (RuntimeException e) {
            logger.error("Runtime error occurred", e);
            throw new GraphQLException("Runtime error: " + e.getMessage());
        } catch (Exception e) {
            logger.error("Unexpected error occurred", e);
            throw new GraphQLException("Unexpected error: " + e.getMessage());
        }
    }

    // Other service methods ...
}
@Controller
public class UCSPController {
    private static final Logger logger = LoggerFactory.getLogger(UCSPController.class);

    @Autowired
    private UCSPService uCSPService;

    // Other controller methods ...

    @QueryMapping(value = "uniqueUCGSourcesByProject")
    public List<String> getUniqueUCGSourcesByProject(@Argument Long projectId) {
        return uCSPService.getUniqueUCGSourcesByProject(projectId);
    }

    // Other controller methods ...
}
query {
  uniqueUCGSourcesByProject(projectId: 1) {
    ucgSource
  }
}
type Query {
    uniqueUCGSourcesByProject(projectId: ID): [String]
    # Other queries ...
}

type Project {
    id: ID
    name: String
}

# Other types and inputs...




<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-logging</artifactId>
</dependency>
<!-- Exclude default Logback -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-logging</artifactId>
    <scope>provided</scope>
</dependency>

<!-- Add Log4j2 dependency -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-log4j2</artifactId>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>2.0.7</version>
</dependency>

