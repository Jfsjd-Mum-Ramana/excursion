import org.apache.flink.api.common.accumulators.IntCounter;
import org.apache.flink.api.common.functions.RuntimeContext;
import org.apache.flink.api.common.functions.util.AbstractRichFunction;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class CsvtoJsonOracleSTPnTransformerTest {

    private CsvtoJsonOracleSTPnTransformer transformer;
    private PublishAuditMessage pubAuditMsg;
    private RuntimeContext runtimeContext;
    private Collector<Tuple2<JSONObject, CollectionAudit>> collector;
    private CollectionAudit collectionAudit;

    @BeforeEach
    public void setUp() {
        pubAuditMsg = mock(PublishAuditMessage.class);
        transformer = new CsvtoJsonOracleSTPnTransformer(pubAuditMsg);
        runtimeContext = mock(RuntimeContext.class);
        collector = mock(Collector.class);
        collectionAudit = new CollectionAudit();
        collectionAudit.setInputFilePath("path/to/file.csv");
        collectionAudit.setFileType("fileType");

        when(runtimeContext.getAccumulator("successIntCounter")).thenReturn(new IntCounter());
        when(runtimeContext.getAccumulator("failureIntCounter")).thenReturn(new IntCounter());
        transformer.setRuntimeContext(runtimeContext);
    }

    @Test
    public void testOpen() throws Exception {
        Configuration parameters = new Configuration();
        transformer.open(parameters);

        verify(runtimeContext, times(1)).addAccumulator(eq("successIntCounter"), any(IntCounter.class));
        verify(runtimeContext, times(1)).addAccumulator(eq("failureIntCounter"), any(IntCounter.class));
    }

    @Test
    public void testFlatMapSuccess() throws Exception {
        String csvContent = "\"CLLI\",\"SWREL\",\"RPTDATE\",\"RPTIME\",\"TZ\",\"RPTTYPE\",\"RPTPD\",\"IVALDATE\",\"IVALSTART\",\"IVALEND\",\"NUMENTIDS\"\n" +
                "\"alpsgada0aw\",\"EAGLE 46.5.1.0.0-70.45.1\",\"2023-11-21\",\"17:30:09\",\"EST \",\"COMPONENT MEASUREMENTS ON LINK\",\"LAST\",\"2023-11-21\",\"17:00:00\",\"17:30:00\",81\n" +
                "\n" +
                "\"STATUS\",\"LSN\",\"LOC\",\"LINK\",\"LNKTYPE\",\"MSGSTRAN\",\"MSGSRCVD\",\"MSURETRN\",\"OCTRETRN\",\"MOCTTRAN\",\"MOCTRCVD\",\"MTCEUSG\",\"DURLKOTG\",\"MSGSRGTT\",\"MOCTRGTT\",\"TDCNGLV1\",\"TDCNGLV2\",\"TDCNGLV3\",\"ECCNGLV1\",\"ECCNGLV2\",\"ECCNGLV3\",\"MSGDISC0\",\"MSGDISC1\",\"MSGDISC2\",\"MSGDISC3\",\"LNKAVAIL\",\"NMGWSDSABL\",\"OUTCELLS\",\"INCCELLS\",\"SDPDUTRN\",\"SDPDURCV\",\"SDPDURTR\",\"LMSUTRN\",\"LMSURCV\",\"LMSUOCTTRN\",\"LMSUOCTRCV\",\"LMSUTRNDSC\",\"LMSURCVDSC\",\"M2PUDMTR\",\"M2PUDOCT\",\"M2PUDMRC\",\"M2PUDOCR\",\"M2PLKNIS\",\"ECLNKCB\",\"ECLNKXCO\",\"GTTONLIM\",\"GTTFORSM\"\n" +
                "\"K\",\"scalpdul\",\"1201\",\"A  \",\"IPVHSL\",4644,4936,0,0,56150,59943,0,0,3,423,0,0,0,0,0,0,0,0,0,0,1800,0,0,0,0,0,0,0,0,0,0,0,0,4644,135098,4936,143855,0,0,0,0,0\n";

        Tuple2<String, CollectionAudit> tuple = new Tuple2<>(csvContent, collectionAudit);

        transformer.flatMap(tuple, collector);

        verify(collector, times(1)).collect(any(Tuple2.class));
        assertEquals(1, transformer.getSuccessIntCounter());
    }

    @Test
    public void testFlatMapFailure() throws Exception {
        String csvContent = "\"CLLI\",\"SWREL\",\"RPTDATE\",\"RPTIME\",\"TZ\",\"RPTTYPE\",\"RPTPD\",\"IVALDATE\",\"IVALSTART\",\"IVALEND\",\"NUMENTIDS\"\n" +
                "\"alpsgada0aw\",\"EAGLE 46.5.1.0.0-70.45.1\",\"2023-11-21\",\"17:30:09\",\"EST \",\"COMPONENT MEASUREMENTS ON LINK\",\"LAST\",\"2023-11-21\",\"17:00:00\",\"17:30:00\",81\n" +
                "\n" +
                "\"STATUS\",\"LSN\",\"LOC\",\"LINK\",\"LNKTYPE\",\"MSGSTRAN\",\"MSGSRCVD\",\"MSURETRN\",\"OCTRETRN\",\"MOCTTRAN\",\"MOCTRCVD\",\"MTCEUSG\",\"DURLKOTG\",\"MSGSRGTT\",\"MOCTRGTT\",\"TDCNGLV1\",\"TDCNGLV2\",\"TDCNGLV3\",\"ECCNGLV1\",\"ECCNGLV2\",\"ECCNGLV3\",\"MSGDISC0\",\"MSGDISC1\",\"MSGDISC2\",\"MSGDISC3\",\"LNKAVAIL\",\"NMGWSDSABL\",\"OUTCELLS\",\"INCCELLS\",\"SDPDUTRN\",\"SDPDURCV\",\"SDPDURTR\",\"LMSUTRN\",\"LMSURCV\",\"LMSUOCTTRN\",\"LMSUOCTRCV\",\"LMSUTRNDSC\",\"LMSURCVDSC\",\"M2PUDMTR\",\"M2PUDOCT\",\"M2PUDMRC\",\"M2PUDOCR\",\"M2PLKNIS\",\"ECLNKCB\",\"ECLNKXCO\",\"GTTONLIM\",\"GTTFORSM\"\n" +
                "\"K\",\"scalpdul\",\"1201\",\"A  \",\"IPVHSL\",4644,4936,0,0,56150,59943,0,0,3,423,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1800,0,0,0,0,0,0,0,0,0,0,0,0,4644,135098,4936,143855,0,0,0,0,0\n" +
                "\"K\",\"scalpdul\",\"1201\",\"A  \",\"IPVHSL\",4644,4936,0,0,56150,59943,0,0,3,423,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1800,0,0,0,0,0,0,0,0,0,0,0,0,4644,135098,4936,143855,0,0,0,0,0";

        Tuple2<String, CollectionAudit> tuple = new Tuple2<>(csvContent, collectionAudit);

        transformer.flatMap(tuple, collector);

        verify(collector, times(0)).collect(any(Tuple2.class));
        assertEquals(1, transformer.getFailureIntCounter());
    }

    @Test
    public void testGetJSONObject() throws JSONException {
        String[] headers = {"HEADER1", "HEADER2"};
        String[] data = {"DATA1", "DATA2"};
        JSONObject commonJSON = new JSONObject();
        commonJSON.put("COMMONKEY", "COMMONVALUE");

        JSONObject result = transformer.getJSONObject(headers, data, commonJSON, "fileName");

        assertEquals("COMMONVALUE", result.getString("COMMONKEY"));
        assertEquals("DATA1", result.getString("HEADER1"));
        assertEquals("DATA2", result.getString("HEADER2"));
        assertEquals("fileName", result.getString("FILENAME"));
    }

    @Test
    public void testGetSuccessIntCounter() {
        transformer.getSuccessIntCounter().add(1);
        assertEquals(1, transformer.getSuccessIntCounter().intValue());
    }

    @Test
    public void testGetFailureIntCounter() {
        transformer.getFailureIntCounter().add(1);
        assertEquals(1, transformer.getFailureIntCounter().intValue());
    }
}
