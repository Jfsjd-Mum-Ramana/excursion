<Grid container spacing={4} alignItems="flex-end">
  <Grid item xs={12} sm={6} md>
    <FormControl variant="outlined" fullWidth>
      <InputLabel id="select-collection-type-label">Collection Type</InputLabel>
      <Select
        labelId="select-collection-type-label"
        id="select-collection-type"
        label="Collection Type"
        value={selectedCollectionType}
        onChange={handleCollectionTypeChange}
      >
        {collectionTypes.map((type) => (
          <MenuItem key={type.typeId} value={type.type}>
            {type.type}
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  </Grid>
  <Grid item xs={12} sm={6} md>
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <DatePicker
        label="Start Date"
        value={fromDate}
        onChange={(newValue) => setSelectedFromDate(newValue)}
        renderInput={(params) => (
          <FormControl fullWidth>
            <Box {...params} />
          </FormControl>
        )}
      />
    </LocalizationProvider>
  </Grid>
  <Grid item xs={12} sm={6} md>
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <DatePicker
        label="End Date"
        value={toDate}
        onChange={(newValue) => setSelectedToDate(newValue)}
        renderInput={(params) => (
          <FormControl fullWidth>
            <Box {...params} />
          </FormControl>
        )}
      />
    </LocalizationProvider>
  </Grid>
  <Grid item xs={12} sm={6} md="auto">
    <LoadingButton
      loading={loading}
      variant="contained"
      disabled={isButtonDisabled()}
      onClick={handleFetchClick}
      sx={{ width: '100%' }}
    >
      Fetch
    </LoadingButton>
  </Grid>
  <Grid item xs={12} sm={6} md="auto">
    <LoadingButton
      variant="outlined"
      onClick={handleReset}
      sx={{ width: '100%' }}
    >
      Reset
    </LoadingButton>
  </Grid>
</Grid>