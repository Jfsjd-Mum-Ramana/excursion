package com.verizon.ucs.service;

import com.verizon.ucs.config.NexusConfig;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.model.NexusData;
import com.verizon.ucs.parser.Nexus1250Parser;
import com.verizon.ucs.parser.Nexus1450Parser;
import com.verizon.ucs.parser.Nexus1500Parser;
import com.verizon.ucs.parser.NexusParser;
import com.verizon.ucs.service.pulsar.PulsarPublisherService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.nio.file.Files;
import java.nio.file.Paths;

@Service
public class NexusService {
    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);

    @Autowired
    private NexusConfig config;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryTemplate retryTemplate;

    @Autowired
    private PulsarPublisherService pulsarPublisherService;

    public void getNexusData(DeviceInfo device) {
        try {
            String response;

            // Read from file if sample data is enabled
            if (config.isUseSampleData()) {
                response = readSampleData(device);
            } else {
                response = fetchDataFromDevice(device);
            }

            // Parse the response based on device type
            NexusParser parser = getParser(device.getModel());
            NexusData data = parser.parse(response);

            // Validate and publish data
            validateData(data);
            publishData(data, device.getDeviceIP());

        } catch (Exception e) {
            logger.error("Failed to process device {}: {}", device.getDeviceIP(), e.getMessage());
            if ("Nexus 1450".equals(device.getModel())) {
                sendLovNotification(device.getDeviceIP());
            }
        }
    }

    private String readSampleData(DeviceInfo device) throws Exception {
        String deviceType = device.getModel().replace("Nexus ", "").trim();
        String filePath = config.getSampleDataPaths().get(deviceType);
        return new String(Files.readAllBytes(Paths.get(filePath)));
    }

    private String fetchDataFromDevice(DeviceInfo device) throws Exception {
        String deviceType = device.getModel().replace("Nexus ", "").trim();
        String url = config.getApiEndpoints().get(deviceType).replace("{siteIP}", device.getDeviceIP());

        return retryTemplate.execute(context -> restTemplate.getForObject(url, String.class));
    }

    private NexusParser getParser(String deviceType) {
        switch (deviceType) {
            case "1250":
                return new Nexus1250Parser();
            case "1450":
                return new Nexus1450Parser();
            case "1500":
                return new Nexus1500Parser();
            default:
                throw new IllegalArgumentException("Unsupported device type: " + deviceType);
        }
    }

    private void validateData(NexusData data) throws Exception {
        if (data == null || data.getDeviceName() == null) {
            throw new Exception("Invalid data: Device name is missing");
        }
    }

    private void publishData(NexusData data, String deviceIp) throws Exception {
        String jsonData = new com.fasterxml.jackson.databind.ObjectMapper().writeValueAsString(data);
        pulsarPublisherService.publishMessage(jsonData);
        logger.info("Published data for device: {}", deviceIp);
    }

    private void sendLovNotification(String deviceIP) {
        String lovMessage = String.format("{\"event\": \"LOV\", \"device\": \"%s\", \"status\": \"unreachable\"}", deviceIP);
        try {
            pulsarPublisherService.publishMessage(lovMessage);
            logger.info("LOV notification sent for device {}", deviceIP);
        } catch (Exception e) {
            logger.error("Failed to send LOV notification: {}", e.getMessage());
        }
    }
}



Yes, if you want a complete Apache Pulsar integration in your Spring Boot application, you will need:

1. Pulsar Publisher (Producer) Service → Already implemented in PulsarPublisherService.java


2. Pulsar Consumer (Subscriber) Service → Listens to messages from a Pulsar topic


3. Pulsar Controller → REST API to send messages via HTTP




---

1️⃣ Pulsar Consumer (Subscriber) - PulsarConsumerService.java

This service will listen to messages from Pulsar and process them.

package com.verizon.ucs.service.pulsar;

import com.verizon.ucs.config.VMBProperties;
import org.apache.pulsar.client.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;

@Service
public class PulsarConsumerService {
    private static final Logger logger = LoggerFactory.getLogger(PulsarConsumerService.class);

    @Autowired
    private VMBProperties properties;

    private PulsarClient pulsarClient;
    private Consumer<byte[]> consumer;

    @PostConstruct
    public void init() {
        try {
            logger.info("Initializing Pulsar Consumer for topic: {}", properties.getTopicName());

            pulsarClient = PulsarClient.builder()
                    .serviceUrl(properties.getServiceUrl())
                    .tlsTrustCertsFilePath(properties.getTlsTrustCertsFile())
                    .authentication("org.apache.pulsar.client.impl.auth.AuthenticationTls", 
                                    properties.getTlsCertFile(), properties.getTlsKeyFile())
                    .enableTls(true)
                    .build();

            consumer = pulsarClient.newConsumer()
                    .topic(properties.getTopicName())
                    .subscriptionName("nexus-subscription")
                    .subscriptionType(SubscriptionType.Shared)
                    .messageListener((c, msg) -> {
                        try {
                            String receivedMessage = new String(msg.getData());
                            logger.info("Received Pulsar message: {}", receivedMessage);
                            c.acknowledge(msg);
                        } catch (Exception e) {
                            logger.error("Failed to process message", e);
                            c.negativeAcknowledge(msg);
                        }
                    })
                    .subscribe();

            logger.info("Pulsar Consumer started successfully.");
        } catch (PulsarClientException e) {
            logger.error("Failed to initialize Pulsar Consumer", e);
        }
    }

    public void close() {
        try {
            if (consumer != null) {
                consumer.close();
            }
            if (pulsarClient != null) {
                pulsarClient.close();
            }
        } catch (PulsarClientException e) {
            logger.error("Error closing Pulsar resources", e);
        }
    }
}


---

2️⃣ Pulsar Controller (REST API) - PulsarController.java

This controller will expose an API to send messages to the Pulsar topic.

package com.verizon.ucs.controller;

import com.verizon.ucs.service.pulsar.PulsarPublisherService;
import org.apache.pulsar.client.api.PulsarClientException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/pulsar")
public class PulsarController {
    private static final Logger logger = LoggerFactory.getLogger(PulsarController.class);

    @Autowired
    private PulsarPublisherService pulsarPublisherService;

    @PostMapping("/publish")
    public String publishMessage(@RequestBody String message) {
        try {
            logger.info("Publishing message to Pulsar: {}", message);
            pulsarPublisherService.publishMessage(message);
            return "Message sent successfully";
        } catch (PulsarClientException e) {
            logger.error("Error publishing message to Pulsar", e);
            return "Failed to send message: " + e.getMessage();
        }
    }
}


---

3️⃣ Required Dependencies in pom.xml

Make sure the following dependencies are in your pom.xml:

<dependencies>
    <!-- Apache Pulsar Client -->
    <dependency>
        <groupId>org.apache.pulsar</groupId>
        <artifactId>pulsar-client</artifactId>
        <version>3.1.0</version>
    </dependency>

    <!-- Pulsar TLS Authentication -->
    <dependency>
        <groupId>org.apache.pulsar</groupId>
        <artifactId>pulsar-client-admin</artifactId>
        <version>3.1.0</version>
    </dependency>

    <!-- SLF4J for Logging -->
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>2.0.7</version>
    </dependency>

    <!-- Logback for Logging Implementation -->
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.4.7</version>
    </dependency>

    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter for Dependency Injection -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
</dependencies>


---

4️⃣ Configuration in application.yaml

Ensure the following properties are set in your application.yaml file:

vmb:
  serviceUrl: pulsar+ssl://vmb-aws-us-east-1-nonprod.verizon.com:6651
  topicName: persistent://enmv/psc/nexus-meter
  tlsCertFile: src/main/resources/vmb-ple-certs/enmv.cert.pem
  tlsKeyFile: src/main/resources/vmb-ple-certs/enmv.key-pk8.pem
  tlsTrustCertsFile: src/main/resources/vmb-ple-certs/ca.cert.pem


---

5️⃣ How Everything Works Together

✅ Pulsar Publisher (PulsarPublisherService.java) → Sends messages to Pulsar.
✅ Pulsar Consumer (PulsarConsumerService.java) → Listens for messages from Pulsar.
✅ Pulsar Controller (PulsarController.java) → REST API to send messages.

6️⃣ Testing the Implementation

Start the Spring Boot Application

mvn spring-boot:run

Test API with curl

Send a message to Pulsar using the REST API:

curl -X POST http://localhost:8080/api/pulsar/publish -H "Content-Type: application/json" -d '"Hello Pulsar!"'

Check Logs for Consumer Output

If everything works correctly, you should see logs like:

[INFO] Received Pulsar message: "Hello Pulsar!"


---

Final Summary

✅ Pulsar Publisher (PulsarPublisherService) - Sends messages.
✅ Pulsar Consumer (PulsarConsumerService) - Listens for messages.
✅ Pulsar Controller (PulsarController) - API to send messages.
✅ Dependencies & Configuration Included.

Try running the updated code and let me know if you need any more modifications! 🚀

