package com.verizon.ucs.service;

import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;

import com.verizon.ucs.model.DataWrapperDTO;
import com.verizon.ucs.properties.DbProperties;
import com.verizon.ucs.util.RestTemplateCustomizer;

@Component
public class TtlScheduler {
    private static final Logger logger = LoggerFactory.getLogger(TtlScheduler.class);

    @Autowired
    private RestTemplateCustomizer restTemplateCustomizer;

    @Autowired
    private DbProperties databaseConfig;

    // @Scheduled(cron = "0 0 0 * * ?") // Every day at midnight
    @Scheduled(cron = "${scheduler.ttl.cron}")
    public void scheduleCallStp() {
            logger.info("Starting scheduleCallStp method");
        try {

            DataWrapperDTO dto = new DataWrapperDTO();
            dto.setParameterList(new String[] { "dummy" });
            dto.setStpName(databaseConfig.getTransactionDeleteStpName());// delete_hpov_s2im_transactions
            restTemplateCustomizer.callApi(dto);
            logger.info("Completed scheduleCallStp method");
        } catch (Exception e) {
            logger.error("Error in scheduleCallStp method", e);
        }
    }

}

package com.verizon.ucs.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.sql.Timestamp;


public class TransactionDTO {
	@JsonProperty("transaction_id")
    private String transactionId;
	@JsonProperty("server_id")
    private int serverId;
	
    private String serverIP;
    
    @JsonProperty("is_updated_host")
    private boolean isUpdatedHost;
    
    @JsonProperty("collected_time")
    private String collectedTime;

    public TransactionDTO(String transactionId, int serverId, boolean isUpdatedHost, String collectedTime, String serverIP) {
        this.transactionId = transactionId;
        this.serverId = serverId;
        this.isUpdatedHost = isUpdatedHost;
        this.collectedTime = collectedTime;
        this.serverIP = serverIP;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    public int getServerId() {
        return serverId;
    }

    public void setServerId(int serverId) {
        this.serverId = serverId;
    }
    

	public String getCollectedTime() {
		return collectedTime;
	}

	public void setCollectedTime(String collectedTime) {
		this.collectedTime = collectedTime;
	}

	public String getServerIP() {
		return serverIP;
	}

	public void setServerIP(String serverIP) {
		this.serverIP = serverIP;
	}

	public boolean isUpdatedHost() {
		return isUpdatedHost;
	}

	public void setUpdatedHost(boolean isUpdatedHost) {
		this.isUpdatedHost = isUpdatedHost;
	}

	@Override
	public String toString() {
		return "TransactionDTO [transactionId=" + transactionId + ", serverId=" + serverId + ", serverIP="
				+ serverIP + ", isUpdatedHost=" + isUpdatedHost + ", collectedTime=" + collectedTime + "]";
	}

	

}

package com.verizon.ucs.properties;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import lombok.Data;

@Configuration
@Data
@ConfigurationProperties(prefix = "dbconfig")
public class DbProperties {
	private String dbUpdateUrl;
	private String dbCallUrl;
	private String serverStpName;
	private String transactionStpName;
	private String deviceStpName;
	private String transactionDeleteStpName;

	public String getDbUpdateUrl() {
		return dbUpdateUrl;
	}

	public void setDbUpdateUrl(String dbUpdateUrl) {
		this.dbUpdateUrl = dbUpdateUrl;
	}

	public String getDbCallUrl() {
		return dbCallUrl;
	}

	public void setDbCallUrl(String dbCallUrl) {
		this.dbCallUrl = dbCallUrl;
	}

	public String getServerStpName() {
		return serverStpName;
	}

	public void setServerStpName(String serverStpName) {
		this.serverStpName = serverStpName;
	}

	public String getTransactionStpName() {
		return transactionStpName;
	}

	public void setTransactionStpName(String transactionStpName) {
		this.transactionStpName = transactionStpName;
	}

	public String getDeviceStpName() {
		return deviceStpName;
	}

	public void setDeviceStpName(String deviceStpName) {
		this.deviceStpName = deviceStpName;

	}
	public String getTransactionDeleteStpName() {
		return transactionDeleteStpName;
	}
	public void setTransactionDeleteStpName(String transactionDeleteStpName) {
		this.transactionDeleteStpName = transactionDeleteStpName;
	}
}

 transactionDeleteStpName: delete_hpov_s2im_transactions


A scheduler must be created to trigger the stored procedure once a week at midnight UTC.
Stored Procedure (STP):

Create a single stored procedure to delete records from the hpov_s2im_devices_audit and hpov_s2im_transactions tables.
Ensure the stored procedure is optimized for performance and handles potential errors gracefully.
Execution Timing:

The stored procedure should be executed by the scheduler once a week at midnight UTC.
Testing and Validation:

Test the stored procedure to ensure it correctly deletes the records from both tables.
Validate that the scheduler triggers the stored procedure at the specified time.
Document the implementation and testing process, including any issues found and resolved.
