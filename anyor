import React, { useState, useEffect, useCallback } from 'react';
import { Grid, Card, CardContent, Typography, MenuItem, TextField, Button, CircularProgress, Box, Divider, Chip, Stack, Alert } from '@mui/material';
import { Bar } from 'react-chartjs-2';
import { AVAILABLE_ALARM_COLLECTION_TYPES_QUERY, FETCH_ALARM_METRICS_QUERY } from '../../graphQL/graphqlQueries';
import { __UCS_GRAPHQL_URL__ } from '../../api-endpoints';
import { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);

const OverallHealthMetrics = () => {
    const [collectionTypes, setCollectionTypes] = useState([]);
    const [selectedCollectionType, setSelectedCollectionType] = useState('');
    const [fromDate, setFromDate] = useState('');
    const [toDate, setToDate] = useState('');
    const [loading, setLoading] = useState(false);
    const [metricsData, setMetricsData] = useState([]);
    const [chartData, setChartData] = useState(null);
    const [error, setError] = useState('');
    const [dateRangeError, setDateRangeError] = useState('');

    // Fetch collection types from GraphQL API
    const fetchCollectionTypes = useCallback(async () => {
        try {
            const response = await fetch(__UCS_GRAPHQL_URL__, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    query: AVAILABLE_ALARM_COLLECTION_TYPES_QUERY,
                }),
            });

            const { data } = await response.json();
            setCollectionTypes(data.availableAlarmCollectionTypes);
        } catch (err) {
            setError('Failed to fetch collection types.');
        }
    }, []);

    // Fetch metrics based on selected filters
    const fetchMetrics = async () => {
        if (!selectedCollectionType || !fromDate || !toDate) {
            setDateRangeError('Please select a collection type and date range.');
            return;
        }

        setLoading(true);
        setDateRangeError('');

        try {
            const response = await fetch(__UCS_GRAPHQL_URL__, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    query: FETCH_ALARM_METRICS_QUERY,
                    variables: { collectionType: selectedCollectionType, fromDate, toDate },
                }),
            });

            const { data } = await response.json();
            const metrics = data.alarmMetrics || [];
            setMetricsData(metrics);

            const labels = metrics.map(item => item.date);
            const totalSize = metrics.map(item => item.totalSizeOfFilesBytes);
            const totalFiles = metrics.map(item => item.totalNumberOfFiles);

            setChartData({
                labels,
                datasets: [
                    {
                        label: 'Total Size of Files (Bytes)',
                        data: totalSize,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    },
                    {
                        label: 'Total Number of Files',
                        data: totalFiles,
                        backgroundColor: 'rgba(153, 102, 255, 0.6)',
                    },
                ],
            });
        } catch (err) {
            setError('Failed to fetch alarm metrics.');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchCollectionTypes();
    }, [fetchCollectionTypes]);

    return (
        <Box sx={{ width: '100%' }}>
            <Card>
                <CardContent>
                    {/* Header */}
                    <Typography variant="h5" gutterBottom>
                        Overall Health Metrics
                    </Typography>

                    {/* Collection Type and Date Filters */}
                    <Grid container spacing={2} marginBottom={3}>
                        <Grid item xs={12} sm={4}>
                            <TextField
                                select
                                fullWidth
                                label="Collection Type"
                                value={selectedCollectionType}
                                onChange={(e) => setSelectedCollectionType(e.target.value)}
                            >
                                {collectionTypes.map((type) => (
                                    <MenuItem key={type.typeId} value={type.type}>
                                        {type.type}
                                    </MenuItem>
                                ))}
                            </TextField>
                        </Grid>

                        <Grid item xs={12} sm={4}>
                            <TextField
                                type="date"
                                fullWidth
                                label="From Date"
                                value={fromDate}
                                onChange={(e) => setFromDate(e.target.value)}
                                InputLabelProps={{ shrink: true }}
                            />
                        </Grid>

                        <Grid item xs={12} sm={4}>
                            <TextField
                                type="date"
                                fullWidth
                                label="To Date"
                                value={toDate}
                                onChange={(e) => setToDate(e.target.value)}
                                InputLabelProps={{ shrink: true }}
                            />
                        </Grid>
                    </Grid>

                    {/* Error Alert */}
                    {dateRangeError && (
                        <Alert severity="error" sx={{ marginBottom: 2 }}>
                            {dateRangeError}
                        </Alert>
                    )}

                    {/* Metrics Fetch Button */}
                    <Grid container justifyContent="flex-end" marginBottom={3}>
                        <Button variant="contained" color="primary" onClick={fetchMetrics} disabled={loading}>
                            {loading ? <CircularProgress size={20} color="inherit" /> : 'Fetch Metrics'}
                        </Button>
                    </Grid>

                    {/* General Error Handling */}
                    {error && <Alert severity="error">{error}</Alert>}

                    {/* Metrics Data Visualization - Chart */}
                    {chartData && (
                        <Card sx={{ marginTop: 3 }}>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    Metrics Overview
                                </Typography>
                                <Bar data={chartData} options={{ responsive: true }} />
                            </CardContent>
                        </Card>
                    )}

                    {/* Data Table or No Data */}
                    {metricsData.length > 0 ? (
                        <Card sx={{ marginTop: 3 }}>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    Data Table
                                </Typography>
                                <Grid container spacing={2}>
                                    {metricsData.map((metric, index) => (
                                        <Grid item xs={12} sm={6} key={index}>
                                            <Card>
                                                <CardContent>
                                                    <Typography variant="h6">{metric.date}</Typography>
                                                    <Stack direction="row" spacing={1}>
                                                        <Chip label={`Total Size: ${metric.totalSizeOfFilesBytes}`} />
                                                        <Chip label={`Total Files: ${metric.totalNumberOfFiles}`} />
                                                    </Stack>
                                                </CardContent>
                                            </Card>
                                        </Grid>
                                    ))}
                                </Grid>
                            </CardContent>
                        </Card>
                    ) : (
                        !loading && (
                            <Typography variant="body1" color="textSecondary" align="center" sx={{ marginTop: 3 }}>
                                No data available for the selected filters.
                            </Typography>
                        )
                    )}
                </CardContent>
            </Card>
        </Box>
    );
};

export default OverallHealthMetrics;