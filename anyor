package com.verizon.ucs.service;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.config.Constants;
import com.verizon.ucs.config.NexusConfig;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.model.NexusData;
import com.verizon.ucs.parser.Nexus1250Parser;
import com.verizon.ucs.parser.Nexus1450Parser;
import com.verizon.ucs.parser.Nexus1500Parser;
import com.verizon.ucs.parser.NexusParser;
import com.verizon.ucs.service.pulsar.PulsarPublisherService;

@Service
public class NexusService {
    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);

    @Autowired
    private NexusConfig config;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryTemplate retryTemplate;

    @Autowired
    private PulsarPublisherService pulsarPublisherService;

    public NexusData getNexusData(DeviceInfo device) throws Exception {
        String response;
        String deviceType = device.getModel().replace("Nexus ", "").trim();

        // Check if the device type is supported
        NexusParser parser = getParser(deviceType);
        if (parser == null) {
            throw new IllegalArgumentException("Unsupported device type: " + deviceType);
        }

        // Read from sample data if enabled
        if (config.isUseSampleData()) {
            String filePath = config.getSampleDataPaths().get(deviceType);
            response = Files.readString(Paths.get(filePath));
        } else {
            response = fetchDataFromDevice(deviceType, device.getDeviceIP());
        }

        // Parse data
        NexusData data = parser.parse(response);
        validateData(data);

        // Publish data
        publishData(data, device.getDeviceIP());
        return data;
    }

    private String fetchDataFromDevice(String deviceType, String deviceIP) throws Exception {
        return retryTemplate.execute(context -> {
            String url = config.getApiEndpoints().get(deviceType).replace("{siteIP}", deviceIP);
            logger.info("Fetching data from {} at IP: {}", deviceType, deviceIP);

            return switch (deviceType) {
                case "1250", "1500" -> restTemplate.getForObject(url, String.class);
                case "1450" -> restTemplate.postForObject(url, getHttpEntity(), String.class);
                default -> throw new IllegalArgumentException("Unsupported device type: " + deviceType);
            };
        }, context -> {
            logger.error("All retry attempts failed for device {}", deviceIP);
            sendLovNotification(deviceIP);
            return null;
        });
    }

    private HttpEntity<String> getHttpEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        return new HttpEntity<>(createRequestPayload(Constants.REQUEST_BODY_1450), headers);
    }

    private String createRequestPayload(String[] chans) {
        try {
            return new ObjectMapper().writeValueAsString(Map.of("chans", chans));
        } catch (Exception e) {
            logger.error("Error creating JSON request payload", e);
            return null;
        }
    }

    private NexusParser getParser(String deviceType) {
        return switch (deviceType) {
            case "1250" -> new Nexus1250Parser();
            case "1450" -> new Nexus1450Parser();
            case "1500" -> new Nexus1500Parser();
            default -> null;
        };
    }

    private void validateData(NexusData data) throws Exception {
        if (data == null || data.getDeviceName() == null || data.getDeviceName().trim().isEmpty()) {
            throw new Exception("Invalid Nexus data: missing device name");
        }
    }

    private void publishData(NexusData data, String deviceIp) throws Exception {
        String jsonData = new ObjectMapper().writeValueAsString(data);
        pulsarPublisherService.publishMessage(jsonData);
        logger.info("Published data for device: {}", deviceIp);
    }

    private void sendLovNotification(String deviceIP) {
        try {
            String lovMessage = String.format("{\"event\": \"LOV\", \"device\": \"%s\", \"status\": \"unreachable\"}", deviceIP);
            pulsarPublisherService.publishMessage(lovMessage);
            logger.info("LOV notification sent for device {}", deviceIP);
        } catch (Exception e) {
            logger.error("Failed to send LOV notification", e);
        }
    }
}