To resolve the error and adjust the repository structure according to the provided reference, I'll modify the repository and query implementation, ensuring it matches your needs for the ucsp_alarm_inventory and ucsp_alarm_metrics tables.

Based on the reference repository you provided, I'll ensure that the queries are written in a correct format, leveraging native SQL queries for more complex filtering and data aggregation.

1. UCSPAlarmInventoryRepository

This repository should handle queries for ucsp_alarm_inventory (metadata of collections and devices).

UCSPAlarmInventoryRepository.java

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface UCSPAlarmInventoryRepository extends JpaRepository<UCSPAlarmInventory, Long> {

    // Query to filter collections by protocol
    @Query("SELECT u FROM UCSPAlarmInventory u WHERE u.ucgSource = :protocol")
    List<UCSPAlarmInventory> findByProtocol(@Param("protocol") String protocol);
}

2. UCSPAlarmMetricsRepository

The ucsp_alarm_metrics table holds the metrics for each collection. The repository will handle complex queries like aggregation of metrics based on the protocol and collection name.

UCSPAlarmMetricsRepository.java

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface UCSPAlarmMetricsRepository extends JpaRepository<UCSPAlarmMetrics, Long> {

    // Query to get scatter plot data by protocol (aggregation based on protocol)
    @Query(nativeQuery = true, value = "SELECT c.collection_name AS collectionName, " +
            "TO_CHAR(m.last_updated, 'YYYY-MM-DD') AS date, " +
            "m.size_of_msgs AS yValue " +
            "FROM ucsp_alarm_inventory c " +
            "JOIN ucsp_alarm_metrics m ON c.collection_name = m.collection_name " +
            "WHERE c.ucg_source = :protocol")
    List<ScatterPlotData> findScatterPlotDataByProtocol(@Param("protocol") String protocol);

    // Query to filter metrics by protocol
    @Query("SELECT m FROM UCSPAlarmMetrics m WHERE m.ucspAlarmInventory.ucgSource = :protocol")
    List<UCSPAlarmMetrics> findMetricsByProtocol(@Param("protocol") String protocol);
}

3. ScatterPlotData Model

This model represents the data structure for scatter plot data. It is used in the repository and returned in GraphQL queries.

ScatterPlotData.java

package com.verizon.ucs.restapi.model;

public class ScatterPlotData {

    private String collectionName;
    private String date;
    private Long yValue;

    public ScatterPlotData(String collectionName, String date, Long yValue) {
        this.collectionName = collectionName;
        this.date = date;
        this.yValue = yValue;
    }

    // Getters and setters
    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public Long getYValue() {
        return yValue;
    }

    public void setYValue(Long yValue) {
        this.yValue = yValue;
    }
}

4. Service Layer

The service layer uses the repositories to interact with the data, encapsulating the logic and fetching the required data.

UCSPAlarmService.java

package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.repository.UCSPAlarmInventoryRepository;
import com.verizon.ucs.restapi.repository.UCSPAlarmMetricsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UCSPAlarmService {

    @Autowired
    private UCSPAlarmInventoryRepository inventoryRepository;

    @Autowired
    private UCSPAlarmMetricsRepository metricsRepository;

    // Fetch data by protocol (inventory)
    public List<UCSPAlarmInventory> getInventoryByProtocol(String protocol) {
        return inventoryRepository.findByProtocol(protocol);
    }

    // Fetch scatter plot data by protocol
    public List<ScatterPlotData> getScatterPlotDataByProtocol(String protocol) {
        return metricsRepository.findScatterPlotDataByProtocol(protocol);
    }

    // Fetch metrics by protocol
    public List<UCSPAlarmMetrics> getMetricsByProtocol(String protocol) {
        return metricsRepository.findMetricsByProtocol(protocol);
    }
}

5. Controller Layer (GraphQL)

The controller uses GraphQL's @QueryMapping to define GraphQL queries for fetching data.

UCSPAlarmController.java

package com.verizon.ucs.restapi.controller;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.service.UCSPAlarmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.util.List;

@Controller
public class UCSPAlarmController {

    @Autowired
    private UCSPAlarmService alarmService;

    // Query to get data by protocol (Inventory)
    @QueryMapping
    public List<UCSPAlarmInventory> filterDataByProtocol(String protocol) {
        return alarmService.getInventoryByProtocol(protocol);
    }

    // Query to get scatter plot data by protocol
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotDataByProtocol(String protocol) {
        return alarmService.getScatterPlotDataByProtocol(protocol);
    }

    // Query to get metrics data by protocol
    @QueryMapping
    public List<UCSPAlarmMetrics> filterMetricsByProtocol(String protocol) {
        return alarmService.getMetricsByProtocol(protocol);
    }
}

6. GraphQL Schema

The schema definition allows GraphQL to query the data.

schema.graphqls

type ScatterPlotData {
    collectionName: String
    date: String
    yValue: Long
}

type UCSPAlarmInventory {
    id: Long
    collectionName: String
    deviceName: String
    deviceIp: String
    ucgSource: String
    vendor: String
}

type UCSPAlarmMetrics {
    id: Long
    collectionName: String
    lastUpdated: String
    numberOfMsgs: Int
    sizeOfMsgs: Long
}

type Query {
    filterDataByProtocol(protocol: String): [UCSPAlarmInventory]
    getScatterPlotDataByProtocol(protocol: String): [ScatterPlotData]
    filterMetricsByProtocol(protocol: String): [UCSPAlarmMetrics]
}

Conclusion

This setup resolves the issues and adapts the repository query to work with your data model. Here's a summary of the changes:

Native SQL Query: Queries are written as native SQL to ensure compatibility with complex data aggregation (similar to the ucsp_trends_raw query you provided).

Repository Layer: Custom queries are used for filtering and aggregating data based on protocols.

Service Layer: Business logic is abstracted to ensure a clean separation of concerns.

GraphQL Controller: Queries are mapped to GraphQL @QueryMapping methods.


Now, you can test these queries by sending GraphQL queries like:

1. Filter Data by Protocol

query {
    filterDataByProtocol(protocol: "SNMP") {
        collectionName
        deviceName
        deviceIp
        ucgSource
        vendor
    }
}

2. Get Scatter Plot Data by Protocol

query {
    getScatterPlotDataByProtocol(protocol: "SNMP") {
        collectionName
        date
        yValue
    }
}

3. Filter Metrics by Protocol

query {
    filterMetricsByProtocol(protocol: "SNMP") {
        collectionName
        lastUpdated
        numberOfMsgs
        sizeOfMsgs
    }
}

With this configuration, your repository, service, and controller layers should function as expected for the given use case.

