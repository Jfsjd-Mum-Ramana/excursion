package com.verizon.ucs.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.util.JsonFormat;
import com.verizon.ucs.config.VMBProperties;
import com.verizon.ucs.model.NexusData;
import com.verizon.ucs.service.pulsar.PulsarPublisherService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.stereotype.Service;
import com.verizon.ucs.data.UcgDataPacket;

import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.Map;
import java.util.Iterator;

@Service
@EnableConfigurationProperties({ VMBProperties.class })
public class NormaliseReactorService {

	private static final Logger logger = LoggerFactory.getLogger(NormaliseReactorService.class);

	@Autowired
	private PulsarPublisherService pulsarPublisherService;

	@Autowired
	private VMBProperties vmbProperties;

	public void handleAndPublishData(NexusData data, String deviceIp) throws Exception {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
		String timestamp = dateFormat.format(new Date());

		// Convert NexusData to JSON and trim spaces from all string values
		ObjectMapper objectMapper = new ObjectMapper();
		ObjectNode ucgRawDataNode = (ObjectNode) objectMapper.valueToTree(data);
		Iterator<Map.Entry<String, JsonNode>> fields = ucgRawDataNode.fields();
		while (fields.hasNext()) {
			Map.Entry<String, JsonNode> field = fields.next();
			if (field.getValue().isTextual()) {
				ucgRawDataNode.put(field.getKey(), field.getValue().asText().replaceAll("\\s+$", ""));
			}
		}

		String ucgRawData = objectMapper.writeValueAsString(ucgRawDataNode);
		logger.info("UCGRAW  JSON DATA:" + ucgRawData);

		Map<String, Object> ucgData = Map.of(
				"ucgTimestamp", timestamp,
				"ucgSource", deviceIp,
				"ucgRawData", ucgRawData,
				"ucgDeviceName", data.getDeviceName().trim(),
				"ucgType", "LIVE",
				"ucgTopic", vmbProperties.getTopicName());

		String ucgDataJsonString = new ObjectMapper().writeValueAsString(ucgData);
		logger.info("UCG JSON DATA:" + ucgDataJsonString);
		pulsarPublisherService.publishMessage(ucgDataJsonString);
	}
}

package com.verizon.ucs.service;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.retry.RetryCallback;
import org.springframework.retry.RetryContext;
import org.springframework.retry.RetryListener;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.config.Constants;
import com.verizon.ucs.config.NexusConfig;
import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.model.NexusData;
import com.verizon.ucs.parser.Nexus1250Parser;
import com.verizon.ucs.parser.Nexus1450Parser;
import com.verizon.ucs.parser.NexusParser;

@Service
public class NexusService {
    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);
    @Autowired
    private NexusConfig config;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryTemplate retryTemplate;

    @Autowired
    private NormaliseReactorService normaliseReactorService;


    public NexusData getNexusData(DeviceInfo device) throws Exception {
        String response;
        String deviceType = device.getModel().replace("Nexus ", "");

        if (config.isUseSampleData()) {
            response = new String(Files.readAllBytes(Paths.get(config.getSampleDataPaths().get(deviceType))));
        } else {
            response = fetchDataFromDevice(deviceType,device.getDeviceIP());
        }

        NexusParser parser = getParser(deviceType);
        NexusData data = parser.parse(response);
        logger.info("NexusData::  {}", data);
        validateData(data);
        normaliseReactorService.handleAndPublishData(data,"kk");
        return data;
    }

    public String fetchDataFromDevice(String deviceType, String deviceIP) throws Exception {
        return retryTemplate.execute(context -> {
            String url = config.getApiEndpoints().get(deviceType).replace("{siteIP}", deviceIP);
            System.out.println("Attempting to fetch data from device: " + deviceType + " at IP: " + deviceIP);
            switch (deviceType) {
                case "1250":
                    return restTemplate.getForObject(url, String.class);
                case "1450":
                    return restTemplate.postForObject(url, getHttpEntity(), String.class);
                case "1500":
                    return restTemplate.getForObject(url, String.class);
                default:
                    throw new IllegalArgumentException("Unsupported device type: " + deviceType);
            }
        }, context -> {
            // Recovery logic
            System.out.println("All retry attempts failed. Executing recovery logic.");
            return "Recovery response";
        });
    }
    private HttpEntity<String> getHttpEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(createRequestPayload(Constants.REQUEST_BODY_1450), headers);
        return entity;
    }
    private String createRequestPayload(String[] chans) {
        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> payloadMap = Map.of("chans", chans);
        try {
            return mapper.writeValueAsString(payloadMap);
        } catch (JsonProcessingException e) {
            logger.error("Error creating JSON request payload", e);
            return null;
        }
    }

    private NexusParser getParser(String deviceType) {
        switch (deviceType) {
            case "1250":
                return new Nexus1250Parser();
            case "1450":
                return new Nexus1450Parser();
            case "1500":
                return new Nexus1250Parser();
            default:
                throw new IllegalArgumentException("Unsupported device type: " + deviceType);
        }
    }

    private void validateData(NexusData data) throws Exception {
        if(data !=null && data.getDeviceName()!=null) {
            return;
        }
    }
}




package com.verizon.ucs.config;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Data
@Component
@ConfigurationProperties("vmb")
public class PulsarProperties {

    private String serviceUrl;
    private String topicName;
    private boolean compressionEnabled;
    private String tlsCertFile;
    private String tlsKeyFile;
    private String tlsTrustCertsFile;
}


package com.verizon.ucs.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.retry.RetryCallback;
import org.springframework.retry.RetryContext;
import org.springframework.retry.RetryListener;
import org.springframework.retry.backoff.FixedBackOffPolicy;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.retry.support.RetryTemplate;

@Configuration
public class RetryConfig {
    @Bean
    public RetryTemplate retryTemplate() {
        RetryTemplate retryTemplate = new RetryTemplate();
        // Configure retry policy
        SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();
        retryPolicy.setMaxAttempts(3); // Number of retry attempts
        retryTemplate.setRetryPolicy(retryPolicy);
        // Configure backoff policy
        FixedBackOffPolicy backOffPolicy = new FixedBackOffPolicy();
        backOffPolicy.setBackOffPeriod(2000); // 2 seconds backoff period
        retryTemplate.setBackOffPolicy(backOffPolicy);
        // Add retry listener for logging
        retryTemplate.registerListener(new RetryListener() {
            @Override
            public <T, E extends Throwable> boolean open(RetryContext context, RetryCallback<T, E> callback) {
                return true;
            }

            @Override
            public <T, E extends Throwable> void close(RetryContext context, RetryCallback<T, E> callback,
                                                       Throwable throwable) {
            }

            @Override
            public <T, E extends Throwable> void onError(RetryContext context, RetryCallback<T, E> callback,
                                                         Throwable throwable) {
                System.out.println(
                        "Retry attempt " + context.getRetryCount() + " failed due to: " + throwable.getMessage());
            }
        });
        return retryTemplate;
    }
}
package com.verizon.ucs.config;

import com.verizon.eclipse.pulsar.producer.EclipsePulsarProducerNr;
import com.verizon.ucs.config.PulsarProperties;
import com.verizon.ucs.scheduler.NexusScheduler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

@Component
public class PulsarConfig {

    private static Logger logger = LoggerFactory.getLogger(PulsarConfig.class);

    @Autowired
    private PulsarProperties pulsarProperties;

    private static EclipsePulsarProducerNr pulsarProducer;

    @Bean
    public EclipsePulsarProducerNr getTl1lAlarmReplayTopicPulsarClient() {
        try {
            if (pulsarProducer == null) {
                pulsarProducer = new EclipsePulsarProducerNr(true, pulsarProperties.getServiceUrl(), pulsarProperties.getTlsTrustCertsFile(),
                        pulsarProperties.getTlsKeyFile(), pulsarProperties.getTlsCertFile(),
                        pulsarProperties.getTopicName());
            } else {
                logger.info(" pulsarProducer object exists");
                return pulsarProducer;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception while creating TL1 pulsar client.", e);
        }
        return pulsarProducer;
    }

}

AC-1: Given a Nexus 1450 device is reachable, when UCS requests data, record all the metrics in Newrelic AC-2: Given a Nexus 1450 device is unreachable, when UCS requests data, send an lov notification to vmb topic

and here the applcation.yaml file

nexus:
  api-endpoints:
    1250: http://{siteIP}/poll_data.xml
    1450: http://{siteIP}/api/dm/data
    1500: http://{siteIP}/I/pdata.xml
  credentials: your-credentials
  use-sample-data: true
  sample-data-paths: 
   1250: src/main/resources/samples/10.219.32.76_nexus_1250.xml
   1450: src/main/resources/samples/nexus_1450.json
   1500: src/main/resources/samples/10.193.40.75_nexus1500.xml
   #15min
vmb:
  #serviceUrl: ${VMB_SERVICE_URL:pulsar+ssl://vmb-aws-us-west-2-nonprod.verizon.com:6651}
  serviceUrl: ${VMB_SERVICE_URL:pulsar+ssl://vmb-aws-us-east-1-nonprod.verizon.com:6651}
  partitionCount: ${VMB_PARTITION_COUNT:16}
  topicName: ${TOPIC_NAME:persistent://enmv/psc/nexus-meter}
  tlsCertFile: ${VMB_TLS_CERT_FILE:src/main/resources/ssl/vmb-ple-certs/enmv.cert.pem}
  tlsKeyFile: ${VMB_TLS_KEY_FILE:src/main/resources/ssl/vmb-ple-certs/enmv.key-pk8.pem}
  tlsTrustCertsFile: ${VMB_TRUST_CERTS_FILE:src/main/resources/ssl/vmb-ple-certs/ca.cert.pem}

db:
  dbCallUrl: ${DB_URL:https://ucs-api-np-bbg1-idn.vzwnet.com/papi/api/call}
  stpName: eclipse.get_avl_stream_devices_fvo_1psc_test1
