Here are the models you can use for the repository, service, and GraphQL queries:

1. UCSPAlarmInventory Model

This model represents the ucsp_alarm_inventory table in your database.

package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.net.InetAddress;
import java.util.Objects;

@Entity
@Table(name = "ucsp_alarm_inventory")
public class UCSPAlarmInventory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "collection_name", nullable = false, unique = true)
    private String collectionName;

    @Column(name = "device_name", nullable = false)
    private String deviceName;

    @Column(name = "device_ip", nullable = false)
    private InetAddress deviceIp;

    @Column(name = "ucg_source", nullable = false)
    private String ucgSource;

    @Column(name = "vendor", nullable = false)
    private String vendor;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDeviceName() {
        return deviceName;
    }

    public void setDeviceName(String deviceName) {
        this.deviceName = deviceName;
    }

    public InetAddress getDeviceIp() {
        return deviceIp;
    }

    public void setDeviceIp(InetAddress deviceIp) {
        this.deviceIp = deviceIp;
    }

    public String getUcgSource() {
        return ucgSource;
    }

    public void setUcgSource(String ucgSource) {
        this.ucgSource = ucgSource;
    }

    public String getVendor() {
        return vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UCSPAlarmInventory that = (UCSPAlarmInventory) o;
        return Objects.equals(id, that.id) &&
               Objects.equals(collectionName, that.collectionName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, collectionName);
    }
}

2. UCSPAlarmMetrics Model

This model represents the ucsp_alarm_metrics table in your database.

package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "ucsp_alarm_metrics")
public class UCSPAlarmMetrics {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "collection_name", referencedColumnName = "collection_name", nullable = false)
    private UCSPAlarmInventory ucspAlarmInventory;

    @Column(name = "last_updated")
    private LocalDateTime lastUpdated;

    @Column(name = "number_of_msgs", nullable = false)
    private Long numberOfMsgs;

    @Column(name = "size_of_msgs", nullable = false)
    private Long sizeOfMsgs;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public UCSPAlarmInventory getUcspAlarmInventory() {
        return ucspAlarmInventory;
    }

    public void setUcspAlarmInventory(UCSPAlarmInventory ucspAlarmInventory) {
        this.ucspAlarmInventory = ucspAlarmInventory;
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public Long getNumberOfMsgs() {
        return numberOfMsgs;
    }

    public void setNumberOfMsgs(Long numberOfMsgs) {
        this.numberOfMsgs = numberOfMsgs;
    }

    public Long getSizeOfMsgs() {
        return sizeOfMsgs;
    }

    public void setSizeOfMsgs(Long sizeOfMsgs) {
        this.sizeOfMsgs = sizeOfMsgs;
    }
}

3. ScatterPlotData Model

This model is used for GraphQL queries related to the scatter plot data.

package com.verizon.ucs.restapi.model;

public class ScatterPlotData {

    private String collectionName;
    private String date;
    private Float yValue;

    // Constructor
    public ScatterPlotData(String collectionName, String date, Float yValue) {
        this.collectionName = collectionName;
        this.date = date;
        this.yValue = yValue;
    }

    // Getters and Setters
    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public Float getyValue() {
        return yValue;
    }

    public void setyValue(Float yValue) {
        this.yValue = yValue;
    }
}

4. GraphQL Query Argument Models

You may also need to pass arguments in GraphQL queries, which could look like this:

package com.verizon.ucs.restapi.model;

public class GraphQLQueryArguments {

    private String protocol;

    // Getter and Setter
    public String getProtocol() {
        return protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }
}

Summary of Models:

1. UCSPAlarmInventory: Represents metadata for the collection, device, and vendor details.


2. UCSPAlarmMetrics: Represents the metrics related to each collection (number of messages, size of messages, etc.).


3. ScatterPlotData: Represents the structure for scatter plot data which includes collectionName, date, and yValue.


4. GraphQLQueryArguments (Optional): Represents the input arguments used in GraphQL queries for filtering by protocol.



These models align with your database structure and can be used in your GraphQL APIs, repositories, services, and controllers.

