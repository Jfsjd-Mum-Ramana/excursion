spring:
  application:
    name: ${APP_NAME:ms-vmb-consumer}

logging:
  vsad: ${VSAD_ID:ENMV}
  level.root: ${LOG_LEVEL:INFO}
  appenderref: ${LOG_APPENDER:STDOUT_JSON_PATTERN}
  logtruncate: ${LOG_TRUNCATE:false}

vmb:
  serviceUrl: ${VMB_SERVICE_URL:pulsar+ssl://vmb-aws-us-east-1-nonprod.verizon.com:6651}
  partitionCount: ${VMB_PARTITION_COUNT:3}
  topicName: ${TOPIC_NAME:NA}
  topicUrl: ${TOPIC_URL:persistent://enmv/gnmi-perf-ciena/grpc-proto-ut-ts}
  ucgSource: ${VMB_SOURCE:vcp-vmb-consumer}
  tlsCertFile: ${VMB_TLS_CERT_FILE:/Users/illasu/ucs/vmb/enmv.cert.pem}
  tlsKeyFile: ${VMB_TLS_KEY_FILE:/Users/illasu/ucs/vmb/enmv.key-pk8.pem}
  tlsTrustCertsFile: ${VMB_TRUST_CERTS_FILE:/Users/illasu/ucs/vmb/ca.cert.pem}
  topicspercontainer: ${TOPICSPERCONTAINER:1}
  subscriptionName: ${SUBSCRIPTION_NAME:SILLA-TEST-0}
  loggingRequired: ${LOGGING_REQUIRED:Y}
  appName: ${APP_NAME:ms-vmb-consumer}
  nrEnvStr: ${APPENV:NP}
  regionStr: ${REGION:kub84-np}
  podNamespace: ${POD_NAMESPACE:bbtpnj33vzbcucs-y-vz-npapp-enmv}
  podName: ${POD_NAME:NA}
  appNameSuffix: ${APP_NAME_SUFFIX:NA}
  s3Json: ${S3_JSON:{"mode":"I","s3Logging":"false","persistenceTimestampFlag":"true","batchProcessing":"true"}}
  s3ApiUrl: ${S3API_SERVICE_URL:ms-sthreeapi-idnipv4-service.twbgohaavzbcucs-y-vz-npapp-enmv.svc.cluster.local:9998}
  s3OverrideAuth: ${S3OVERRIDEAUTH:ucs-tunnel-np.enmv.ebiz.verizon.com}
  s3BucketKey: ${S3BUCKETKEY:BACNET-POLLER-CONSUMER}
  isGrpcPCSR: ${IS_GRPC_PCSR:FALSE}
  topicType: ${TOPIC_TYPE:NA}
  grpcDialType: ${DIAL_TYPE:NA}
  grpcStreamType: ${STREAMING_TYPE:NA}
  grpcUcgType: ${UCG_TYPE:NA}
  grpcNrAppName: ${NRAPPNAME:NA}

server:
  port: -1
  shutdown: graceful



package com.verizon.ucs.vmbc.service.s3;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.vmbc.exception.S3SaveException;
import com.verizon.ucs.vmbc.s3.grpc.proto.DataWrapperDTO;
import com.verizon.ucs.vmbc.s3.grpc.proto.LoadToS3ApiResponse;
import com.verizon.ucs.vmbc.util.Constants;
import com.verizon.ucs.vmbc.yaml.VMBProperties;
import org.apache.commons.collections.CollectionUtils;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.Messages;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.Iterator;
import java.util.List;

@Service
@Scope("prototype")
public class S3MessageService {

    private static Logger logger = LoggerFactory.getLogger(S3MessageService.class);


    private final String newRelicEvents = "enmvVCPVMBConsumer:events";

    @Autowired
    private VMBProperties vmbProperties;

    @Autowired
    private S3GrpcClient s3GrpcClient;

    @Autowired
    private ObjectMapper objectMapper;


    public void saveMessagesToS3(final Messages<byte[]> messages,
                                 final boolean persistenceTimestampFlag) {

        if (messages != null) {

            try {
                logger.debug("saveMessagesToS3 - Messages list size {}", messages.size());
                messages.forEach(message -> {
                    saveMsgToS3(message, persistenceTimestampFlag);
                });
            } catch (Exception e) {
                logger.error("saveMessagesToS3 failed:", e);
            }

        }

    }

    public void saveMessagesListToS3(final List<Message<byte[]>> messages, final boolean persistenceTimestampFlag) {

        if (CollectionUtils.isNotEmpty(messages)) {

            try {
                logger.debug("saveMessagesListToS3 - Messages list size {}", messages.size());
                messages.forEach(message -> {
                    saveMsgToS3(message, persistenceTimestampFlag);
                });
            } catch (Exception e) {
                logger.error("saveMessagesListToS3 failed:", e);
            }

        }

    }

    public void saveMsgToS3(final Message<byte[]> message,
                            final boolean persistenceTimestampFlag) {

        try {
        	logger.debug("saveMsgToS3 - Message");
            String json = new String(message.getValue());
            JSONObject s3RequestPayload = objectMapper.readValue(json, JSONObject.class);
            logger.debug("publishToS3 s3RequestPayload === {}", s3RequestPayload.toString());
            s3RequestPayload.put("_pulsarId", message.getMessageId().toString());
            if (persistenceTimestampFlag) {
                s3RequestPayload.put("persistenceTimestamp", getUtcTimeStamp());
                logger.debug("publishToS3 persistenceTimestamp set is {}", s3RequestPayload.get("persistenceTimestamp"));
            }
            logger.debug("Save vmb-consumer message to s3 initiated ");
            if (s3RequestPayload != null) {
                publishToS3(s3RequestPayload, vmbProperties.getS3BucketKey());
                logger.debug("Save vmb-consumer message to s3 success ");
            }

        } catch (Exception e) {
            throw new S3SaveException("saveMsgToS3 failed", e);
        }
    }


    public void publishToS3(JSONObject dataObject, String s3BucketKey) {
        try {
            logger.debug("publishToS3 s3BucketKey === {}", s3BucketKey);
            logger.debug("publishToS3 dataObject.toJSONString() {}", dataObject.toString());
            JSONObject s3reqObject = new JSONObject();
            s3reqObject.put(Constants.S3_BUCKET_KEY, s3BucketKey);
            s3reqObject.put(Constants.PAYLOAD, dataObject.toString());
            DataWrapperDTO dataWrapperDTO = DataWrapperDTO.newBuilder().setPayload(s3reqObject.toString()).build();
            Iterator<LoadToS3ApiResponse> s3Response = s3GrpcClient.getStub().saveToS3(dataWrapperDTO);
            while (s3Response.hasNext()) {
                LoadToS3ApiResponse response = s3Response.next();
                logger.debug("Response: " + response.getResMessage());
            }
        } catch (Throwable t) {
            logger.error("publishToS3 failed", t);
        }
    }


    /**
     * Setting 24 hour utc timestamp
     */
    private String getUtcTimeStamp() {
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC"));
        DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").appendOffset("+HH:MM", "+00:00").toFormatter();
        return now.format(dateTimeFormatter);
    }

    public void saveMsgToS3(JSONObject s3RequestPayload) {
    	try{
    		logger.debug("saveMsgToS3 with ucgId: " + s3RequestPayload.toJSONString());
    		logger.debug("saveMsgToS3 with vmbProperties.getS3BucketKey() : " + vmbProperties.getS3BucketKey());
    		publishToS3(s3RequestPayload,vmbProperties.getS3BucketKey());
    	}
    	catch (Exception ex){
    		logger.error("Exception while calling s3 api. Error: " + ex.getMessage());
    		ex.printStackTrace();
    	}
    }

}
