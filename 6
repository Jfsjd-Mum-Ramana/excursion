To check and test your GraphQL API, you can use the following steps:

1. Access GraphQL Endpoint

Once your Spring Boot application is running, the default GraphQL endpoint is typically exposed at /graphql. You can test it using the following methods:

GraphiQL Interface: If you're using Spring Boot with the GraphQL starter, you can access the built-in GraphiQL UI (a web-based GraphQL IDE) by navigating to:

http://localhost:8080/graphiql

This is a powerful tool that allows you to write, test, and explore GraphQL queries directly in the browser.

Postman: You can also use Postman to send GraphQL queries if you prefer working with HTTP requests.


2. Test the GraphQL Queries

a. Test the getScatterPlotData Query

To retrieve the scatter plot data, use the following query:

GraphQL Query Example:

query {
  getScatterPlotData(protocol: "SNMP", startDate: "2024-11-01T00:00:00", endDate: "2024-11-30T23:59:59") {
    id
    protocol
    collectionDate
    yValue
  }
}

This query requests scatter plot data for the protocol "SNMP" and within a specified date range (startDate and endDate).

Expected Response:

{
  "data": {
    "getScatterPlotData": [
      {
        "id": "1",
        "protocol": "SNMP",
        "collectionDate": "2024-11-05T10:00:00",
        "yValue": 204800
      },
      {
        "id": "2",
        "protocol": "SNMP",
        "collectionDate": "2024-11-10T14:00:00",
        "yValue": 300000
      }
    ]
  }
}

b. Test the getAllProtocols Query

To get the list of all available protocols, use the following query:

GraphQL Query Example:

query {
  getAllProtocols
}

Expected Response:

{
  "data": {
    "getAllProtocols": ["SNMP", "WSS", "gRPC", "TL1", "syslog"]
  }
}

3. Using GraphiQL Interface

When using the GraphiQL interface at http://localhost:8080/graphiql, follow these steps:

1. Start the Spring Boot application if it's not already running (mvn spring-boot:run or ./mvnw spring-boot:run).


2. Open the browser and navigate to:

http://localhost:8080/graphiql

This should open the GraphiQL interface.


3. In the left pane (where you type your GraphQL query), paste the queries mentioned above.


4. Click the "Play" button (a triangular button on the top left) to execute the query.


5. The results will be shown on the right pane (the response).



4. Using Postman

If you're using Postman to test the API, follow these steps:

1. Open Postman and create a new POST request.


2. Set the request URL to:

http://localhost:8080/graphql


3. Under the Body tab, select GraphQL.


4. In the Query field, input the following GraphQL query (as an example):

query {
  getScatterPlotData(protocol: "SNMP", startDate: "2024-11-01T00:00:00", endDate: "2024-11-30T23:59:59") {
    id
    protocol
    collectionDate
    yValue
  }
}


5. Click Send.


6. The response will appear below, showing the queried data.



5. Handling Errors

If your query fails, you will see an error response. Make sure the following:

The date format is correct (i.e., yyyy-MM-dd'T'HH:mm:ss).

The protocol you specify exists in your database.


For instance, if the protocol "SNMP" is invalid or if no data is found for the given date range, the response might look like:

{
  "errors": [
    {
      "message": "No data found for the given protocol and date range.",
      "locations": [{ "line": 2, "column": 3 }],
      "path": ["getScatterPlotData"]
    }
  ]
}

Conclusion

By using GraphiQL or Postman, you can test the queries and get the scatter plot data or available protocols. The built-in tools will help you validate your GraphQL endpoint and ensure everything works as expected.

