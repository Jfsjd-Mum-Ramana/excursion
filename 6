Hereâ€™s a full implementation of the GraphQL APIs, including changes to the model, repository, controller (resolvers in the GraphQL context), and other necessary components.


---

Database Table Schema

Ensure the following table exists in your PostgreSQL database for scatterplotdata.

CREATE TABLE scatterplotdata (
    id SERIAL PRIMARY KEY,
    collection_name VARCHAR(255) NOT NULL,
    collection_date TIMESTAMP NOT NULL,
    protocol VARCHAR(50) NOT NULL,
    number_of_msgs INT NOT NULL,
    size_of_msgs BIGINT NOT NULL
);


---

Model Class

package com.example.project.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "scatterplotdata")
public class ScatterPlotData {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "collection_name", nullable = false)
    private String collectionName;

    @Column(name = "collection_date", nullable = false)
    private LocalDateTime collectionDate;

    @Column(name = "protocol", nullable = false)
    private String protocol;

    @Column(name = "number_of_msgs", nullable = false)
    private int numberOfMsgs;

    @Column(name = "size_of_msgs", nullable = false)
    private long sizeOfMsgs;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public LocalDateTime getCollectionDate() {
        return collectionDate;
    }

    public void setCollectionDate(LocalDateTime collectionDate) {
        this.collectionDate = collectionDate;
    }

    public String getProtocol() {
        return protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    public int getNumberOfMsgs() {
        return numberOfMsgs;
    }

    public void setNumberOfMsgs(int numberOfMsgs) {
        this.numberOfMsgs = numberOfMsgs;
    }

    public long getSizeOfMsgs() {
        return sizeOfMsgs;
    }

    public void setSizeOfMsgs(long sizeOfMsgs) {
        this.sizeOfMsgs = sizeOfMsgs;
    }
}


---

Repository

package com.example.project.repository;

import com.example.project.model.ScatterPlotData;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ScatterPlotDataRepository extends JpaRepository<ScatterPlotData, Long> {

    @Query("SELECT s FROM ScatterPlotData s WHERE s.protocol = :protocol AND s.collectionDate BETWEEN :startDate AND :endDate")
    List<ScatterPlotData> findByProtocolAndDateRange(String protocol, LocalDateTime startDate, LocalDateTime endDate);

    @Query("SELECT DISTINCT s.protocol FROM ScatterPlotData s")
    List<String> findAllProtocols();

    List<ScatterPlotData> findByProtocol(String protocol);
}


---

Service

package com.example.project.service;

import com.example.project.model.ScatterPlotData;
import com.example.project.repository.ScatterPlotDataRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class ScatterPlotDataService {

    private final ScatterPlotDataRepository repository;

    public ScatterPlotDataService(ScatterPlotDataRepository repository) {
        this.repository = repository;
    }

    public List<ScatterPlotData> getScatterPlotData(String protocol, LocalDateTime startDate, LocalDateTime endDate) {
        return repository.findByProtocolAndDateRange(protocol, startDate, endDate);
    }

    public List<String> getAvailableProtocols() {
        return repository.findAllProtocols();
    }

    public List<ScatterPlotData> getDataByProtocol(String protocol) {
        return repository.findByProtocol(protocol);
    }
}


---

GraphQL Resolvers

1. Scatter Plot Data Resolver

package com.example.project.graphql;

import com.example.project.model.ScatterPlotData;
import com.example.project.service.ScatterPlotDataService;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
public class ScatterPlotDataResolver {

    private final ScatterPlotDataService service;

    public ScatterPlotDataResolver(ScatterPlotDataService service) {
        this.service = service;
    }

    public List<ScatterPlotData> scatterPlotData(String protocol, String startDate, String endDate) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
        LocalDateTime start = LocalDateTime.parse(startDate, formatter);
        LocalDateTime end = LocalDateTime.parse(endDate, formatter);

        return service.getScatterPlotData(protocol, start, end);
    }
}

2. Available Protocols Resolver

package com.example.project.graphql;

import com.example.project.service.ScatterPlotDataService;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class AvailableProtocolsResolver {

    private final ScatterPlotDataService service;

    public AvailableProtocolsResolver(ScatterPlotDataService service) {
        this.service = service;
    }

    public List<String> availableProtocols() {
        return service.getAvailableProtocols();
    }
}

3. Filter Data by Protocol Resolver

package com.example.project.graphql;

import com.example.project.model.ScatterPlotData;
import com.example.project.service.ScatterPlotDataService;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class FilterDataByProtocolResolver {

    private final ScatterPlotDataService service;

    public FilterDataByProtocolResolver(ScatterPlotDataService service) {
        this.service = service;
    }

    public List<ScatterPlotData> filterDataByProtocol(String protocol) {
        return service.getDataByProtocol(protocol);
    }
}


---

GraphQL Schema

type Query {
    scatterPlotData(protocol: String!, startDate: String!, endDate: String!): [ScatterPlotData!]!
    availableProtocols: [String!]!
    filterDataByProtocol(protocol: String!): [ScatterPlotData!]!
}

type ScatterPlotData {
    id: ID!
    collectionName: String!
    collectionDate: String!
    protocol: String!
    numberOfMsgs: Int!
    sizeOfMsgs: Long!
}


---

GraphQL Queries

1. Fetch Scatter Plot Data

query {
    scatterPlotData(protocol: "SNMP", startDate: "2024-01-01T00:00:00", endDate: "2024-01-31T23:59:59") {
        collectionName
        collectionDate
        numberOfMsgs
        sizeOfMsgs
    }
}


2. Fetch Available Protocols

query {
    availableProtocols
}


3. Filter Data by Protocol

query {
    filterDataByProtocol(protocol: "SNMP") {
        collectionName
        collectionDate
        numberOfMsgs
        sizeOfMsgs
    }
}




---

Test Data Insertion

INSERT INTO scatterplotdata (collection_name, collection_date, protocol, number_of_msgs, size_of_msgs)
VALUES 
('Collection1', '2024-01-15 10:00:00', 'SNMP', 500, 10240),
('Collection2', '2024-01-16 11:30:00', 'gRPC', 700, 20480),
('Collection3', '2024-01-17 14:45:00', 'WSS', 300, 5120);

This provides a complete implementation of the three APIs. Let me know if you need any modifications!

