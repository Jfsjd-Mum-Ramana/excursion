package com.example.project.controller;

import com.example.project.model.ScatterPlotData;
import com.example.project.service.ScatterPlotDataService;
import graphql.GraphQL;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.graphql.data.method.annotation.MutationMapping;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.stereotype.Controller;

import java.time.LocalDateTime;
import java.util.List;

@Controller
public class ScatterPlotDataController {

    private final ScatterPlotDataService scatterPlotDataService;
    private final GraphQL graphQL;

    @Autowired
    public ScatterPlotDataController(ScatterPlotDataService scatterPlotDataService, GraphQL graphQL) {
        this.scatterPlotDataService = scatterPlotDataService;
        this.graphQL = graphQL;
    }

    /**
     * GraphQL Query: Fetch scatter plot data based on protocol and date range.
     *
     * @param protocol  The protocol to filter by (e.g., SNMP, WSS).
     * @param startDate The start date for the range.
     * @param endDate   The end date for the range.
     * @return A list of ScatterPlotData entries matching the criteria.
     */
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotData(
            @Argument String protocol,
            @Argument String startDate,
            @Argument String endDate) {
        LocalDateTime start = LocalDateTime.parse(startDate);
        LocalDateTime end = LocalDateTime.parse(endDate);
        return scatterPlotDataService.getScatterPlotData(protocol, start, end);
    }

    /**
     * GraphQL Query: Fetch a list of all available protocols.
     *
     * @return A list of distinct protocol names.
     */
    @QueryMapping
    public List<String> getAllProtocols() {
        return scatterPlotDataService.getAllProtocols();
    }

    /**
     * GraphQL Mutation: Insert a new scatter plot data entry.
     *
     * @param protocol      The protocol (e.g., SNMP, WSS).
     * @param collectionDate The date of the collection.
     * @param yValue        The Y-value (e.g., number of messages or size of messages).
     * @return The newly created ScatterPlotData entry.
     */
    @MutationMapping
    public ScatterPlotData addScatterPlotData(
            @Argument String protocol,
            @Argument String collectionDate,
            @Argument Double yValue) {
        LocalDateTime collectionTimestamp = LocalDateTime.parse(collectionDate);
        return scatterPlotDataService.addScatterPlotData(protocol, collectionTimestamp, yValue);
    }
}