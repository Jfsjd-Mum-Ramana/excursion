Here’s the corrected and optimized function and procedure for deleting old records from hpov_s2im_transactions and hpov_s2im_devices_audit.


---

1. Corrected Function (delete_hpov_s2im_transactions)

Returns a JSON object with the deleted row counts.

Handles errors properly and logs the error details.

Ensures it works even if no records exist (it will return 0 instead of an error).


CREATE OR REPLACE FUNCTION eclipse.delete_hpov_s2im_transactions()
RETURNS json
LANGUAGE plpgsql
AS $$
DECLARE
    transactions_deleted_count INT := 0;
    devices_audit_deleted_count INT := 0;
    err_context TEXT;
BEGIN
    -- Delete old transactions and store the deleted count
    DELETE FROM eclipse.hpov_s2im_transactions 
    WHERE collected_time < NOW() - INTERVAL '7 days';
    GET DIAGNOSTICS transactions_deleted_count = ROW_COUNT;

    -- Delete old device audits and store the deleted count
    DELETE FROM eclipse.hpov_s2im_devices_audit 
    WHERE update_timestamp < NOW() - INTERVAL '7 days';
    GET DIAGNOSTICS devices_audit_deleted_count = ROW_COUNT;

    -- Return successful JSON response
    RETURN json_build_object(
        'status', 'Transactions Deleted Successfully',
        'transactions_deleted_count', transactions_deleted_count,
        'devices_audit_deleted_count', devices_audit_deleted_count
    );

EXCEPTION
    WHEN OTHERS THEN
        -- Capture error details and return them in JSON format
        GET STACKED DIAGNOSTICS err_context = PG_EXCEPTION_CONTEXT;
        RETURN json_build_object(
            'status', 'Transactions Failed to Delete',
            'error', SQLERRM,
            'context', err_context
        );
END;
$$;


---

2. Corrected Procedure (delete_hpov_s2im_transactions_proc)

Works without returning a value (useful for scheduled jobs).

Deletes old records and logs a message.


CREATE OR REPLACE PROCEDURE eclipse.delete_hpov_s2im_transactions_proc()
LANGUAGE plpgsql
AS $$
DECLARE
    transactions_deleted_count INT := 0;
    devices_audit_deleted_count INT := 0;
BEGIN
    -- Delete records older than 7 days from hpov_s2im_transactions
    DELETE FROM eclipse.hpov_s2im_transactions 
    WHERE collected_time < NOW() - INTERVAL '7 days';
    GET DIAGNOSTICS transactions_deleted_count = ROW_COUNT;

    -- Delete records older than 7 days from hpov_s2im_devices_audit
    DELETE FROM eclipse.hpov_s2im_devices_audit 
    WHERE update_timestamp < NOW() - INTERVAL '7 days';
    GET DIAGNOSTICS devices_audit_deleted_count = ROW_COUNT;

    -- Log the deleted record count
    RAISE NOTICE 'Deleted % records from hpov_s2im_transactions', transactions_deleted_count;
    RAISE NOTICE 'Deleted % records from hpov_s2im_devices_audit', devices_audit_deleted_count;
END;
$$;


---

How to Use These

Run the Function (Returns JSON Response)

SELECT eclipse.delete_hpov_s2im_transactions();

Example Response (if records exist):

{
  "status": "Transactions Deleted Successfully",
  "transactions_deleted_count": 50,
  "devices_audit_deleted_count": 20
}

Example Response (if no records exist):

{
  "status": "Transactions Deleted Successfully",
  "transactions_deleted_count": 0,
  "devices_audit_deleted_count": 0
}

Run the Procedure (Does Not Return Data, Just Logs)

CALL eclipse.delete_hpov_s2im_transactions_proc();

Output in logs:

NOTICE: Deleted 50 records from hpov_s2im_transactions
NOTICE: Deleted 20 records from hpov_s2im_devices_audit


---

Changes & Fixes

✅ Removed dummy text parameter (not needed).
✅ Ensured proper error handling (catches errors and logs details).
✅ Works even if no records exist (returns 0 instead of error).
✅ Schema-qualified table names (eclipse.hpov_s2im_transactions).

This should work perfectly. Let me know if you need any changes!

