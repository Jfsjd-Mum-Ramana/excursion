The models are already there implement the two api's only inside the below repository and controller and service


1. Get Scatter Plot Data API

Purpose:
Retrieves both collection and metric data based on selected protocol and data type (e.g., number of messages or size of messages) to populate the scatter plot.

Endpoint:

GET /api/alarms/scatter-plot-data


Request Parameters:
 `protocol`: (SNMP, WSS, etc.)
 `data_type`: (e.g., "number_of_msgs", "size_of_msgs")

Response:


{
  "scatter_plot_data": [
    {
      "collection_name": "Collection1" // Represents protocal names
      "date": "2024-11-20T10:30:00Z",  // Represents last updated
      "y_value": 204800 // Represents size of messages OR number of messages
    }
  ]
}


Why We Need It:

- This API is used to fetch the data required for dynamically rendering the scatter plot. It ensures that only relevant data (based on the user's protocol and data type selection) is fetched.



2. Filter Data by Protocol API

Purpose:
Filters the available collections by the selected protocol (e.g., SNMP, WSS, gRPC), allowing users to visualize only the data for a specific protocol.

Endpoint:

GET /api/alarms/scatter-plot-data/{protocal}


Request Parameters:
- `protocol`: (SNMP, WSS, gRPC, etc.)

Response:


{
  "scatter_plot_data": [
    {
      "collection_name": "Collection1" // Represents protocal names
      "date": "2024-11-20T10:30:00Z",  // Represents last updated
      "y_value": 204800 // Represents size of messages OR number of messages
    }
  ]
}


Here the details of model classes and repository 

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;


@Repository
public interface UCSPAlarmRepository extends JpaRepository<ScatterPlotData, Long> {

    // Fetch scatter plot data based on protocol and date range
    @Query("SELECT s FROM ScatterPlotData s WHERE s.protocol = :protocol AND s.collectionDate BETWEEN :startDate AND :endDate")
    List<ScatterPlotData> findByProtocolAndDateRange(String protocol, LocalDateTime startDate, LocalDateTime endDate);

    // Fetch all available protocols
    @Query("SELECT DISTINCT s.protocol FROM ScatterPlotData s")
    List<String> findAllProtocols();
}



package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "ucsp_alarm_metrics")
public class UCSPAlarmMetrics {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "collection_name", referencedColumnName = "collection_name", nullable = false)
    private UCSPAlarmInventory ucspAlarmInventory;

    @Column(name = "last_updated")
    private LocalDateTime lastUpdated;

    @Column(name = "number_of_msgs", nullable = false)
    private Long numberOfMsgs;

    @Column(name = "size_of_msgs", nullable = false)
    private Long sizeOfMsgs;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public UCSPAlarmInventory getUcspAlarmInventory() {
        return ucspAlarmInventory;
    }

    public void setUcspAlarmInventory(UCSPAlarmInventory ucspAlarmInventory) {
        this.ucspAlarmInventory = ucspAlarmInventory;
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public Long getNumberOfMsgs() {
        return numberOfMsgs;
    }

    public void setNumberOfMsgs(Long numberOfMsgs) {
        this.numberOfMsgs = numberOfMsgs;
    }

    public Long getSizeOfMsgs() {
        return sizeOfMsgs;
    }

    public void setSizeOfMsgs(Long sizeOfMsgs) {
        this.sizeOfMsgs = sizeOfMsgs;
    }
}


package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.net.InetAddress;
import java.util.Objects;

@Entity
@Table(name = "ucsp_alarm_inventory")
public class UCSPAlarmInventory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "collection_name", nullable = false, unique = true)
    private String collectionName;

    @Column(name = "device_name", nullable = false)
    private String deviceName;

    @Column(name = "device_ip", nullable = false)
    private InetAddress deviceIp;

    @Column(name = "ucg_source", nullable = false)
    private String ucgSource;

    @Column(name = "vendor", nullable = false)
    private String vendor;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDeviceName() {
        return deviceName;
    }

    public void setDeviceName(String deviceName) {
        this.deviceName = deviceName;
    }

    public InetAddress getDeviceIp() {
        return deviceIp;
    }

    public void setDeviceIp(InetAddress deviceIp) {
        this.deviceIp = deviceIp;
    }

    public String getUcgSource() {
        return ucgSource;
    }

    public void setUcgSource(String ucgSource) {
        this.ucgSource = ucgSource;
    }

    public String getVendor() {
        return vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UCSPAlarmInventory that = (UCSPAlarmInventory) o;
        return Objects.equals(id, that.id) &&
                Objects.equals(collectionName, that.collectionName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, collectionName);
    }
}
