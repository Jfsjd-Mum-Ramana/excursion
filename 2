package com.verizon.ucs.restapi.controllers;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.service.UCSPAlarmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class UCSPAlarmController {

    @Autowired
    private UCSPAlarmService alarmService;

    // Query to get data by protocol (Inventory)
    @QueryMapping
    public List<UCSPAlarmInventory> filterDataByProtocol(@Argument String protocol) {
        return alarmService.getInventoryByProtocol(protocol);
    }

    // Query to get scatter plot data by protocol
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotDataByProtocol(@Argument String protocol) {
        return alarmService.getScatterPlotDataByProtocol(protocol);
    }

    // Query to get metrics data by protocol
    @QueryMapping
    public List<UCSPAlarmMetrics> filterMetricsByProtocol(@Argument String protocol) {
        return alarmService.getMetricsByProtocol(protocol);
    }
}
package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.repository.UCSPAlarmInventoryRepository;
import com.verizon.ucs.restapi.repository.UCSPAlarmMetricsRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UCSPAlarmService {

    Logger logger = LoggerFactory.getLogger(UCSPAlarmService.class);

    @Autowired
    private UCSPAlarmInventoryRepository inventoryRepository;

    @Autowired
    private UCSPAlarmMetricsRepository metricsRepository;

    // Fetch data by protocol (inventory)
    public List<UCSPAlarmInventory> getInventoryByProtocol(String protocol) {
        return inventoryRepository.findByProtocol(protocol);
    }

    // Fetch scatter plot data by protocol
    public List<ScatterPlotData> getScatterPlotDataByProtocol(String protocol) {
        logger.debug("Received request to fetch scatter plot data for protocol: " + protocol);
        List<ScatterPlotData> scatterPlotData = metricsRepository.findScatterPlotDataByProtocol(protocol);
        logger.debug("Returning scatter plot data: " + scatterPlotData);
        return scatterPlotData;
    }

    // Fetch metrics by protocol
    public List<UCSPAlarmMetrics> getMetricsByProtocol(String protocol) {
        return metricsRepository.findMetricsByProtocol(protocol);
    }
}

package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "ucsp_alarm_metrics")
public class UCSPAlarmMetrics {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "collection_name", referencedColumnName = "collection_name", nullable = false)
    private UCSPAlarmInventory ucspAlarmInventory;

    @Column(name = "last_updated")
    private LocalDateTime lastUpdated;

    @Column(name = "number_of_msgs", nullable = false)
    private Long numberOfMsgs;

    @Column(name = "size_of_msgs", nullable = false)
    private Long sizeOfMsgs;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public UCSPAlarmInventory getUcspAlarmInventory() {
        return ucspAlarmInventory;
    }

    public void setUcspAlarmInventory(UCSPAlarmInventory ucspAlarmInventory) {
        this.ucspAlarmInventory = ucspAlarmInventory;
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public Long getNumberOfMsgs() {
        return numberOfMsgs;
    }

    public void setNumberOfMsgs(Long numberOfMsgs) {
        this.numberOfMsgs = numberOfMsgs;
    }

    public Long getSizeOfMsgs() {
        return sizeOfMsgs;
    }

    public void setSizeOfMsgs(Long sizeOfMsgs) {
        this.sizeOfMsgs = sizeOfMsgs;
    }
}

package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.net.InetAddress;
import java.util.Objects;

@Entity
@Table(name = "ucsp_alarm_inventory")
public class UCSPAlarmInventory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "collection_name", nullable = false, unique = true)
    private String collectionName;

    @Column(name = "device_name", nullable = false)
    private String deviceName;

    @Column(name = "device_ip", nullable = false)
    private InetAddress deviceIp;

    @Column(name = "ucg_source", nullable = false)
    private String ucgSource;

    @Column(name = "vendor", nullable = false)
    private String vendor;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDeviceName() {
        return deviceName;
    }

    public void setDeviceName(String deviceName) {
        this.deviceName = deviceName;
    }

    public InetAddress getDeviceIp() {
        return deviceIp;
    }

    public void setDeviceIp(InetAddress deviceIp) {
        this.deviceIp = deviceIp;
    }

    public String getUcgSource() {
        return ucgSource;
    }

    public void setUcgSource(String ucgSource) {
        this.ucgSource = ucgSource;
    }

    public String getVendor() {
        return vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UCSPAlarmInventory that = (UCSPAlarmInventory) o;
        return Objects.equals(id, that.id) &&
                Objects.equals(collectionName, that.collectionName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, collectionName);
    }
}


package com.verizon.ucs.restapi.model;

import java.util.Date;

public interface ScatterPlotData {

    String getCollectionName();

    String getDate();

    public Integer getValue();

}


package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPAlarmInventoryRepository extends JpaRepository<UCSPAlarmInventory, Long> {

    // Query to filter collections by protocol
    @Query("SELECT u FROM UCSPAlarmInventory u WHERE u.ucgSource = :protocol")
    List<UCSPAlarmInventory> findByProtocol(@Param("protocol") String protocol);
}


package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPAlarmMetricsRepository extends JpaRepository<UCSPAlarmMetrics, Long> {
    Logger logger = LoggerFactory.getLogger(UCSPAlarmMetricsRepository.class);
    // Query to get scatter plot data by protocol (aggregation based on protocol)
    @Query(nativeQuery = true, value = "SELECT c.collection_name AS collectionName, " +
            "TO_CHAR(m.last_updated, 'YYYY-MM-DD') AS date, " +
            "m.size_of_msgs AS value " +
            "FROM ucsp_alarm_inventory c " +
            "JOIN ucsp_alarm_metrics m ON c.collection_name = m.collection_name " +
            "WHERE c.ucg_source = :protocol")
    List<ScatterPlotData> findScatterPlotDataByProtocol(@Param("protocol") String protocol);
    default  List<ScatterPlotData> findScatterPlotDataWithLogging(String protocol) {
        logger.info("Executing query for protocol: " +protocol) ;
        List<ScatterPlotData> result = findScatterPlotDataByProtocol(protocol);
        logger.info("Query result: " +result);
        return result;
    }
    // Query to filter metrics by protocol
    @Query("SELECT m FROM UCSPAlarmMetrics m WHERE m.ucspAlarmInventory.ucgSource = :protocol")
    List<UCSPAlarmMetrics> findMetricsByProtocol(@Param("protocol") String protocol);
}
