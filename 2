To implement the required functionality using GraphQL with the provided models, let's break down the structure into three main components: Repository, Service, and Controller. Each of the APIs will be implemented using GraphQL, and the necessary queries and mutations will be defined in the repository.

1. Repository: This will interface with the database and provide custom queries.

UCSPAlarmInventoryRepository.java

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPAlarmInventoryRepository extends JpaRepository<UCSPAlarmInventory, Long> {

    // Custom query to get all protocols (ucgSource) from UCSPAlarmInventory
    @Query("SELECT DISTINCT u.ucgSource FROM UCSPAlarmInventory u")
    List<String> findAllProtocols();

    // Find collections by protocol
    List<UCSPAlarmInventory> findByUcgSource(String protocol);
}

UCSPAlarmMetricsRepository.java

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPAlarmMetricsRepository extends JpaRepository<UCSPAlarmMetrics, Long> {

    // Custom query to get scatter plot data for a specific protocol and data type
    @Query("SELECT new com.verizon.ucs.restapi.model.ScatterPlotData(a.collectionName, m.lastUpdated, m.numberOfMsgs) " +
           "FROM UCSPAlarmMetrics m JOIN m.ucspAlarmInventory a WHERE a.ucgSource = ?1")
    List<ScatterPlotData> findScatterPlotDataByProtocol(String protocol);

    @Query("SELECT new com.verizon.ucs.restapi.model.ScatterPlotData(a.collectionName, m.lastUpdated, m.sizeOfMsgs) " +
           "FROM UCSPAlarmMetrics m JOIN m.ucspAlarmInventory a WHERE a.ucgSource = ?1")
    List<ScatterPlotData> findScatterPlotDataBySize(String protocol);
}

ScatterPlotData.java (DTO for scatter plot response)

package com.verizon.ucs.restapi.model;

import java.time.LocalDateTime;

public class ScatterPlotData {

    private String collectionName;
    private LocalDateTime date;
    private Long yValue;

    public ScatterPlotData(String collectionName, LocalDateTime date, Long yValue) {
        this.collectionName = collectionName;
        this.date = date;
        this.yValue = yValue;
    }

    // Getters and Setters
    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public LocalDateTime getDate() {
        return date;
    }

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    public Long getyValue() {
        return yValue;
    }

    public void setyValue(Long yValue) {
        this.yValue = yValue;
    }
}


---

2. Service: This will handle the business logic by interacting with the repositories.

UCSPAlarmService.java

package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.repository.UCSPAlarmInventoryRepository;
import com.verizon.ucs.restapi.repository.UCSPAlarmMetricsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UCSPAlarmService {

    @Autowired
    private UCSPAlarmInventoryRepository inventoryRepository;

    @Autowired
    private UCSPAlarmMetricsRepository metricsRepository;

    public List<String> getAvailableProtocols() {
        return inventoryRepository.findAllProtocols();
    }

    public List<ScatterPlotData> getScatterPlotData(String protocol, String dataType) {
        if ("number_of_msgs".equals(dataType)) {
            return metricsRepository.findScatterPlotDataByProtocol(protocol);
        } else if ("size_of_msgs".equals(dataType)) {
            return metricsRepository.findScatterPlotDataBySize(protocol);
        }
        return null;
    }

    public List<ScatterPlotData> filterDataByProtocol(String protocol) {
        return metricsRepository.findScatterPlotDataByProtocol(protocol);
    }
}


---

3. Controller: This will expose the GraphQL queries to the client.

UCSPAlarmController.java

package com.verizon.ucs.restapi.controller;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.service.UCSPAlarmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.graphql.data.method.annotation.QueryMapping;

import java.util.List;

@RestController
public class UCSPAlarmController {

    @Autowired
    private UCSPAlarmService ucspAlarmService;

    // Get available protocols
    @QueryMapping
    public List<String> getAvailableProtocols() {
        return ucspAlarmService.getAvailableProtocols();
    }

    // Get scatter plot data based on protocol and data type
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotData(@RequestParam String protocol, @RequestParam String dataType) {
        return ucspAlarmService.getScatterPlotData(protocol, dataType);
    }

    // Get filtered data by protocol
    @QueryMapping
    public List<ScatterPlotData> filterDataByProtocol(@RequestParam String protocol) {
        return ucspAlarmService.filterDataByProtocol(protocol);
    }
}


---

Explanation of GraphQL Queries:

1. getAvailableProtocols: This query retrieves the list of protocols (e.g., SNMP, WSS, gRPC, etc.) from the database.

Query: getAvailableProtocols



2. getScatterPlotData: This query retrieves the scatter plot data based on the protocol and data type (either "number_of_msgs" or "size_of_msgs").

Query: getScatterPlotData(protocol: String!, dataType: String!): [ScatterPlotData]



3. filterDataByProtocol: This query filters the scatter plot data based on the selected protocol.

Query: filterDataByProtocol(protocol: String!): [ScatterPlotData]





---

4. GraphQL Configuration

You also need to configure GraphQL in your application.properties or application.yml.

application.properties

spring.graphql.enabled=true
spring.graphql.schema.location=classpath:graphql/schema.graphqls

schema.graphqls

type ScatterPlotData {
    collectionName: String
    date: String
    yValue: Long
}

type Query {
    getAvailableProtocols: [String]
    getScatterPlotData(protocol: String!, dataType: String!): [ScatterPlotData]
    filterDataByProtocol(protocol: String!): [ScatterPlotData]
}

Final Remarks:

The Repository interfaces define custom queries for retrieving data specific to GraphQL.

The Service class handles business logic, processing requests for scatter plot data based on protocol and data type.

The Controller exposes the GraphQL queries using @QueryMapping annotations.


With this implementation, your system will support the GraphQL queries as required for fetching scatter plot data based on protocol and data type.

