The error you are encountering indicates that Spring GraphQL is having trouble resolving the parameters for the getScatterPlotDataByProtocol method in the UCSPAlarmController. The specific issue is related to the GraphQL query parameter not being recognized.

The error message:

IllegalStateException: Parameter [0] in public java.util.List<com.verizon.ucs.restapi.model.ScatterPlotData> com.verizon.ucs.restapi.controllers.UCSPAlarmController.getScatterPlotDataByProtocol(java.lang.String): was not recognized by any resolver

Solution:

To resolve this issue, you need to make sure that Spring GraphQL can recognize the parameters passed to the @QueryMapping annotated methods. The issue is that Spring GraphQL is not recognizing the method parameters correctly when a query is executed. This might be due to the lack of a correct parameter binding in the GraphQL schema or the method signature not being aligned with the GraphQL request.

Steps to resolve:

1. Correct Parameter Naming: Ensure that the parameter in the method matches the expected query parameter from GraphQL. GraphQL expects to use the name of the field in the query as the parameter name in the controller method. Make sure that the parameter in the GraphQL query corresponds to the method signature.


2. Use @Argument annotation: Spring GraphQL uses @Argument to bind query parameters to method arguments. You need to add the @Argument annotation to your method parameters.



Here's the corrected code:

UCSPAlarmController class

package com.verizon.ucs.restapi.controllers;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.service.UCSPAlarmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.stereotype.Controller;

import java.util.List;

@Controller
public class UCSPAlarmController {

    @Autowired
    private UCSPAlarmService alarmService;

    // Query to get data by protocol (Inventory)
    @QueryMapping
    public List<UCSPAlarmInventory> filterDataByProtocol(@Argument String protocol) {
        return alarmService.getInventoryByProtocol(protocol);
    }

    // Query to get scatter plot data by protocol
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotDataByProtocol(@Argument String protocol) {
        return alarmService.getScatterPlotDataByProtocol(protocol);
    }

    // Query to get metrics data by protocol
    @QueryMapping
    public List<UCSPAlarmMetrics> filterMetricsByProtocol(@Argument String protocol) {
        return alarmService.getMetricsByProtocol(protocol);
    }
}

Explanation of Changes:

The @Argument annotation was added to the method parameters (String protocol). This ensures that the parameters passed from the GraphQL query are mapped to the method arguments properly.

The GraphQL query will now recognize the protocol parameter and pass it to the corresponding service methods.


With this change, the Spring GraphQL framework should be able to recognize the query parameters and correctly execute the methods.

Notes:

Ensure that the GraphQL query is structured correctly on the client side when you call this method. For example:


{
  getScatterPlotDataByProtocol(protocol: "SNMP") {
    collectionName
    date
    yValue
  }
}

By applying these changes, you should be able to resolve the issue and allow the GraphQL queries to work as expected.

