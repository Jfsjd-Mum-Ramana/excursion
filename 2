To develop the APIs mentioned earlier in the context of this GraphQL-based Java Spring project, the following implementation details are required. Here's how you can integrate the API requirements into your project:

---

### 1. **Scatter Plot Data API**
- **Endpoint**: `/api/alarms/scatter-plot-data`
- **Logic**:
  - Fetch scatter plot data from `ucsp_alarm_metrics` based on optional filters for `protocol` and `data_type`.
  - Return `collection_name`, `last_updated`, and a calculated or selected `y_value`.

#### Implementation
**Add Query in Repository**:
```java
@Query(nativeQuery = true, value = "SELECT collection_name, last_updated, :dataType AS y_value " +
        "FROM ucsp_alarm_metrics " +
        "JOIN ucsp_alarm_inventory ON ucsp_alarm_metrics.collection_name = ucsp_alarm_inventory.collection_name " +
        "WHERE ucg_source = :protocol")
List<Map<String, Object>> fetchScatterPlotData(@Param("protocol") String protocol, @Param("dataType") String dataType);
```

**Add Method in Service**:
```java
public List<Map<String, Object>> getScatterPlotData(String protocol, String dataType) {
    return uCSPRepository.fetchScatterPlotData(protocol, dataType);
}
```

**Controller**:
```java
@QueryMapping(value = "scatterPlotData")
public List<Map<String, Object>> getScatterPlotData(@Argument String protocol, @Argument String dataType) {
    return uCSPService.getScatterPlotData(protocol, dataType);
}
```

---

### 2. **Filter Data by Protocol API**
- **Endpoint**: `/api/alarms/scatter-plot-data/{protocol}`
- **Logic**:
  - Use the protocol filter to retrieve data from `ucsp_alarm_metrics` linked with `ucsp_alarm_inventory`.

#### Implementation
**Reuse Repository Query**:
The same query from `fetchScatterPlotData` applies, using the protocol as a filter.

**Add Controller Method**:
```java
@QueryMapping(value = "filterByProtocol")
public List<Map<String, Object>> getScatterPlotDataByProtocol(@Argument String protocol) {
    return uCSPService.getScatterPlotData(protocol, "size_of_msgs");
}
```

---

### 3. **Available Protocols API**
- **Endpoint**: `/api/alarms/protocols`
- **Logic**:
  - Fetch distinct protocols from `ucsp_alarm_inventory`.

#### Implementation
**Add Query in Repository**:
```java
@Query("SELECT DISTINCT ucg_source FROM ucsp_alarm_inventory")
List<String> findAllProtocols();
```

**Add Method in Service**:
```java
public List<String> getAvailableProtocols() {
    return uCSPRepository.findAllProtocols();
}
```

**Controller**:
```java
@QueryMapping(value = "availableProtocols")
public List<String> getProtocols() {
    return uCSPService.getAvailableProtocols();
}
```

---

### GraphQL Schema Update

**Update Schema to Include APIs**:
```graphql
type Query {
    scatterPlotData(protocol: String, dataType: String): [ScatterPlotData]
    filterByProtocol(protocol: String): [ScatterPlotData]
    availableProtocols: [String]
}

type ScatterPlotData {
    collectionName: String
    date: String
    yValue: Int
}
```

---

### API Output Examples

1. **Scatter Plot Data API**  
   **Query**:
   ```graphql
   query {
       scatterPlotData(protocol: "SNMP", dataType: "size_of_msgs") {
           collectionName
           date
           yValue
       }
   }
   ```
   **Response**:
   ```json
   {
       "scatterPlotData": [
           {
               "collectionName": "Collection1",
               "date": "2024-11-20T10:30:00Z",
               "yValue": 204800
           }
       ]
   }
   ```

2. **Filter by Protocol API**  
   **Query**:
   ```graphql
   query {
       filterByProtocol(protocol: "SNMP") {
           collectionName
           date
           yValue
       }
   }
   ```

3. **Available Protocols API**  
   **Query**:
   ```graphql
   query {
       availableProtocols
   }
   ```
   **Response**:
   ```json
   {
       "protocols": ["SNMP", "WSS", "gRPC", "TL1", "syslog"]
   }
   ```

---

### Notes:
1. Ensure proper error handling and validations in the service methods.
2. Validate inputs in GraphQL arguments (e.g., non-nullable fields).
3. Implement caching or pagination if the dataset is large.