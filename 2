import React, { useEffect, useState } from 'react';
import { Box, Container, FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent, TextField, Typography, Autocomplete, Button } from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import dayjs, { Dayjs } from 'dayjs';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import axios from 'axios';
import { authenticate, getToken } from '../auth';
import { __UCS_GRAPHQL_URL__ } from '../api-endpoints';
import { API_ENDPOINTS } from '../api-endpoints';
import { UNIQUE_UGS_SOURCE_QUERY, UNIQUE_PROJECT_QUERY } from '../graphQL/graphqlQueries';
import LoadingButton from "@mui/lab/LoadingButton";
import { useSnackbar } from '../utils/SnackbarContext';

const S3Audit: React.FC = () => {
    const [projectList, setProjectList] = useState<any[]>([]);
    const [ucgSourceList, setUcgSourceList] = useState<{ id: number, name: string }[]>([]);

    const [selectedProject, setSelectedProject] = useState<any>(null);
    const [selectedDeviceName, setSelectedDeviceName] = useState<string>('');
    const [selectedSearchString, setSelectedSearchString] = useState<string>('');
    const [selectedUCGSource, setSelectedUCGSource] = useState<string>('');
    const [fromDate, setSelectedFromDate] = React.useState<Dayjs>(dayjs().subtract(1, 'day'));
    const [toDate, setSelectedToDate] = React.useState<Dayjs | null>(dayjs());

    const [loading, setLoading] = useState<boolean>(false);
    const [ucgsourceLoading, setUcgsourceLoading] = useState<boolean>(false);

    const [responseData, setResponseData] = useState<string>('');
    const { showSnackbar } = useSnackbar();

    useEffect(() => {
        const fetchProjectData = async () => {
            try {
                const projectResponse = await axios.post(__UCS_GRAPHQL_URL__, {
                    query: UNIQUE_PROJECT_QUERY,
                });
                //console.log("projectResponse",projectResponse);
                if (projectResponse.data?.data?.uniqueUCSPProjects && projectResponse.data.data.uniqueUCSPProjects.length > 0) {
                    setProjectList(projectResponse.data.data.uniqueUCSPProjects);
                }
            } catch (error) {
                showSnackbar('Error fetching project data!');
                console.error('Error fetching project data', error);
            }
        };
        fetchProjectData();

    }, []);

    const handleProjectChange = async (options: any) => {
        //console.log("options ",options.id);
        setSelectedProject(options);
        setUcgsourceLoading(true);
        setSelectedUCGSource('');
        setUcgSourceList([]);
        if (options && options.id) {
            try {
                const ucgSourcesResponse = await axios.post(__UCS_GRAPHQL_URL__, {
                    query: UNIQUE_UGS_SOURCE_QUERY,
                    variables: { projectId: options.id },
                });

                //console.log("ucgSourcesResponse",ucgSourcesResponse);
                if (ucgSourcesResponse.data?.data?.uniqueUCGSourcesByProject && ucgSourcesResponse.data.data.uniqueUCGSourcesByProject.length > 0) {
                    setUcgSourceList(ucgSourcesResponse.data.data.uniqueUCGSourcesByProject);
                } else {
                    showSnackbar('No UCGsource exists for this Project!');
                }
            } catch (error) {
                showSnackbar('Error fetching UCGsource data!');
                console.error('Error fetching UCG source:', error);
            } finally {
                setUcgsourceLoading(false);
            }
        }
    }

    const handleSelectChange = (setter: React.Dispatch<React.SetStateAction<string>>, resetOthers: () => void) => (
        event: SelectChangeEvent<string>) => {
        setter(event.target.value as string);
    };
    const handleTextFieldChange = (setter: React.Dispatch<React.SetStateAction<string>>, resetOthers: () => void) => (
        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        setter(event.target.value);
    };

    const handleFetchClick = () => {
        setResponseData('');
        const trimmedSearchString = selectedSearchString.trim();
        if (trimmedSearchString.startsWith('{') && trimmedSearchString.endsWith('}')) {
            try {
                const parsedInput = JSON.parse(trimmedSearchString);
                if (parsedInput && typeof parsedInput === 'object') {
                    handleSubmit('json');
                } else {
                    showSnackbar('Invalid input. Please enter a valid JSON string.');
                }
            } catch (error) {
                showSnackbar('Invalid input. Please enter a valid JSON string.');
            }
        } else {
            handleSubmit('text');
        }
    };

    //const dummyData = [{"ucgMessageId":"10.139.126.180_1029","ucgTimestamp":"TC:1723729156855:10.194.236.247/9977;","ucgSource":"HPOVTRAP","ucgRawData":{"pdu":"TRAP[requestID=1208871447, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.2.1.1.3.0 = 13 days, 12:30:37.18; 1.3.6.1.6.3.1.1.4.1.0 = 1.3.6.1.4.1.750.501.0.1; 1.3.6.1.4.1.750.501.1.1.1 = 21084251; 1.3.6.1.4.1.750.501.1.1.2 = 07:e8:08:0f:0d:27:0f:07:2b:00:00; 1.3.6.1.4.1.750.501.1.1.3 = IPI; 1.3.6.1.4.1.750.501.1.1.5 = 1; 1.3.6.1.4.1.750.501.1.1.6 = ACTIVE; 1.3.6.1.4.1.750.501.1.1.4 = NOCC VOLTE Day Alerts - PST Time; 1.3.6.1.4.1.750.501.1.1.7.1.1.1 = 1; 1.3.6.1.4.1.750.501.1.1.7.1.2.1 = 20; 1.3.6.1.4.1.750.501.1.1.7.1.3.1 = SGW: Azusa_Vista_SAEGW11(ID: 92676); 1.3.6.1.4.1.750.501.1.1.8 = VOLTE Day Alerts to the NOCC - Maintenance window excluded (6am - 11:55pm PST); 1.3.6.1.4.1.750.501.1.1.13 = 1.27; 1.3.6.1.4.1.750.501.1.1.15 = 1.00; 1.3.6.1.4.1.750.501.1.1.9 = NOCC SNMP Day - PST Time; 1.3.6.1.4.1.750.501.1.1.10 = Public; 1.3.6.1.4.1.750.501.1.1.11 = Gm(S1-U) RTP eNB Gap Duration Ratio Avg (%); 1.3.6.1.4.1.750.501.1.1.12 = 2; 1.3.6.1.4.1.750.501.1.1.14 = >; 1.3.6.1.4.1.750.501.1.1.16 = Absolute; 1.3.6.1.4.1.750.501.1.1.17 = N/A; 1.3.6.1.4.1.750.501.1.1.18 = 22393053; 1.3.6.1.4.1.750.501.1.1.19 = 85000; 1.3.6.1.4.1.750.501.1.1.20 = N/A; 1.3.6.1.4.1.750.501.1.1.21 = N/A; 1.3.6.1.4.1.750.501.1.1.22 = N/A; 1.3.6.1.4.1.750.501.1.1.23 = N/A; 1.3.6.1.4.1.750.501.1.1.24 = N/A; 1.3.6.1.4.1.750.501.1.1.25 = N/A; 1.3.6.1.4.1.750.501.1.1.26 = https://caroirvisap01v.nss.vzwnet.com:443/VoLTE-SIP-RTP-ipi/dynamicDash?drill=%7B%22minSamples%22:%220%22,%22interfaceType%22:%2249%22,%22interfaceBundle%22:%22-1%22,%22fromTime%22:%221723726800000%22,%22toTime%22:%221723729156835%22,%22resolution%22:%22ENTRY%22,%22kpiProtocol%22:%221007%22,%22category%22:%223%22,%22dynamic-ea-dimensionType-1%22:%2220_node%22,%22dynamic-dimension-1%22:%22Azusa_Vista_SAEGW11%22,%22templateName%22:%22ea-trendVolume-kpi%22,%22dashboardName%22:%22ea-element%22,%22trendKpi%22:%228341072%22%7D; 1.3.6.1.4.1.750.501.1.1.27 = N/A]]","sourcePort":54835,"sourceAddress":"10.139.126.180","receiveAddress":"10.194.236.247","receivePort":9977,"community":"public","version":"2","network":"EDN","timestamp":1723729156855},"ucgId":"HPOVTRAP-10.139.126.180-1723729157512","ucgDeviceName":"10.139.126.180","ucgType":"LIVE","ucgTopic":"persistent://enmv/hpov-alarm/hpov-snmp-trap"}]
    const handleSubmit = async (json: string) => {
        setLoading(true);
        try {
            const formattedFromDate = dayjs(fromDate).format('YYYY-MM-DD-HH:mm');
            const formattedToDate = dayjs(toDate).format('YYYY-MM-DD-HH:mm');

            let searchString;
            if (json === 'text') {
                searchString = {
                    globalsearch: selectedSearchString,
                };
            } else {
                searchString = JSON.parse(selectedSearchString.trim());
            }
            const data = {
                deviceName: selectedDeviceName,
                rootBucketKey: selectedProject.name,
                ucgSource: selectedUCGSource,
                fromDate: formattedFromDate,
                toDate: formattedToDate,
                searchContent: searchString,
            };

            // console.log(data);
            const response = await axios.post(API_ENDPOINTS.S3_DATA_SEARCH, data, {
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            // console.log(response);
            if (response && response.data && Object.keys(response.data).length > 0) {
                setResponseData(JSON.stringify(response, null, 2));
            } else {
                showSnackbar("No Match Found!");
            }
        } catch (error) {
            showSnackbar("Error While fetching the Data from the Server");
            console.error('Error fetching data', error);
            setResponseData('Error fetching data');
        } finally {
            setLoading(false);
        }

    };

    const resetSelections = () => {
        setSelectedDeviceName('');
        setSelectedSearchString('');
    }

    const isButtonDisabled = () => {
        return !selectedProject || !selectedDeviceName || !selectedSearchString || !selectedUCGSource;
    };

    const handleReset = () => {
        setSelectedProject(null);
        setSelectedDeviceName('');
        setSelectedSearchString('');
        setSelectedUCGSource('');
        setSelectedFromDate(dayjs().subtract(1, 'day'));
        setSelectedToDate(dayjs());
        setResponseData('');
    };

    const popperSxConfig = {
        popper: {
            sx: {
                "& .MuiMultiSectionDigitalClockSection-root:first-of-type": {
                    width: '55px !important',
                    scrollbarWidth: 'thin',
                },
                "& .MuiMultiSectionDigitalClockSection-root:not(:first-of-type):not(:last-of-type)": {
                    width: '63px !important',
                    scrollbarWidth: 'thin',
                },
            },
        },
    };

    const fullWidthHeight = { width: '100%', height: '100%' };

    return (

        <Box sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            //overflow: 'auto',
            //padding: '1%',
            boxSizing: 'border-box',

        }}>

            <Grid container spacing={4} alignItems="flex-end">
                <Grid item xs={12} sm={6} md={2}>
                    <Autocomplete
                        value={selectedProject}
                        onChange={(e, options) => handleProjectChange(options)}
                        loading
                        disablePortal
                        options={projectList}
                        getOptionLabel={(option) => option.name}
                        renderInput={(params: any) => <TextField {...params} label="Project" placeholder="Project Name" />}
                    />
                </Grid>
                <Grid item xs={12} sm={6} md={2}>
                    <TextField
                        variant="outlined"
                        placeholder='Device Name'
                        label="Device"
                        sx={fullWidthHeight}
                        value={selectedDeviceName}
                        onChange={(event) => handleTextFieldChange(setSelectedDeviceName, resetSelections)(event)}

                    />
                </Grid>
                <Grid item xs={12} sm={6} md={2}>
                    <FormControl variant="outlined" sx={fullWidthHeight}>
                        <InputLabel id="select-outlined-label">UCG Source</InputLabel>
                        <Select
                            labelId="select-outlined-label"
                            id="select-outlined"
                            label="UCG Source"
                            value={selectedUCGSource}
                            onChange={(event) => handleSelectChange(setSelectedUCGSource, resetSelections)(event)}

                        >
                            {ucgsourceLoading ? (
                                <MenuItem disabled>
                                    Loading…
                                </MenuItem>
                            ) : (
                                ucgSourceList?.map((source, i) => (
                                    <MenuItem
                                        key={source.name}
                                        id="dropDown"
                                        value={source.name}
                                    >
                                        {source.name}
                                    </MenuItem>
                                ))
                            )}
                        </Select>
                    </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md={2}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DateTimePicker
                            slotProps={popperSxConfig}
                            label="Start DateTime"
                            sx={fullWidthHeight}
                            value={fromDate} onChange={(newValue: Dayjs | null) => {
                                setSelectedFromDate(newValue || dayjs());
                                // If newValue is after toDate, reset toDate
                                if (newValue && toDate && newValue.isAfter(toDate)) {
                                    setSelectedToDate(null);
                                }
                            }}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} sm={6} md={2}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DateTimePicker
                            label="End DateTime"
                            slotProps={popperSxConfig}
                            sx={fullWidthHeight}
                            value={toDate}
                            minDate={fromDate}
                            onChange={(newValue) => setSelectedToDate(newValue)}
                        />
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={12} sm={6} md={2}>
                    <TextField
                        variant="outlined"
                        label="Search String"
                        sx={fullWidthHeight}
                        value={selectedSearchString}
                        onChange={(event) => handleTextFieldChange(setSelectedSearchString, resetSelections)(event)}

                    />
                </Grid>

                <Grid item xs={12} sm={6} md={12} sx={{ textAlign: 'right' }} >
                    <Button variant="contained" onClick={handleReset} color="primary" sx={{ marginRight: 2 }}>Reset</Button>
                    <LoadingButton onClick={handleFetchClick} loading={loading} loadingIndicator="Fetching…" variant="contained"
                        disabled={isButtonDisabled()}>
                        <span>Fetch</span>
                    </LoadingButton>

                </Grid>
            </Grid>
            <Box mt={2} sx={{ width: '100%' }}>
                <TextField
                    variant="outlined"
                    multiline
                    rows={15}
                    fullWidth
                    value={responseData}
                />
            </Box>
        </Box>

    );
}

export default S3Audit;
