package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.dto.ApiRequest;
import com.verizon.ucs.restapi.dto.TrendsRequest;
import com.verizon.ucs.restapi.model.Device;
import com.verizon.ucs.restapi.model.Trends;
import com.verizon.ucs.restapi.model.UcspProject;
import com.verizon.ucs.restapi.repository.UCSPProjectsRepository;
import com.verizon.ucs.restapi.repository.UCSPRepository;
import com.verizon.ucs.restapi.repository.UCSPTrendsRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class UCSPService {

	private static final Logger logger = LoggerFactory.getLogger(UCSPService.class);

	@Autowired
	private UCSPRepository uCSPRepository;

	@Autowired
	private UCSPTrendsRepository uCSPTrendsRepository;

	@Autowired
	private UCSPProjectsRepository ucspProjectsRepository;

	public List<UcspProject> getUniqueUCGSourcesByProject(Long projectId) {
		try {
			List<UcspProject> ucgSources = ucspProjectsRepository.findDistinctUCGSourcesByProject(projectId);
			if (ucgSources == null || ucgSources.isEmpty()) {
				throw new RuntimeException("No UCG Sources found for the given project ID: " + projectId);
			}
			return ucgSources;
		} catch (Exception e) {
			logger.error("Error in service method getUniqueUCGSourcesByProject", e);
			throw e;
		}
	}

	public List<Device> searchDevices(ApiRequest params) {
		if (params.getDeviceName() != null && !params.getDeviceName().isEmpty()) {
			return uCSPRepository.findByDeviceNameIgnoreCase(params.getDeviceName());
		}
		if (params.getLoopback() != null && !params.getLoopback().isEmpty()) {
			return uCSPRepository.findByLoopbackIgnoreCase(params.getLoopback());
		}
		if (params.getNetwork() != null && !params.getNetwork().isEmpty()) {
			return uCSPRepository.findByNetworkIgnoreCase(params.getNetwork());
		}
		if (params.getVendor() != null && !params.getVendor().isEmpty()) {
			return uCSPRepository.findByVendorIgnoreCase(params.getVendor());
		}
		if (params.getModel() != null && !params.getModel().isEmpty()) {
			return uCSPRepository.findByModelIgnoreCase(params.getModel());
		}
		return null;
	}

	public List<Trends> getDailyTrends(TrendsRequest params) {
		return uCSPTrendsRepository.findDailyTrends(params.getUcgSourceID(), params.getFromDate(), params.getToDate());
	}

	public Map<String, List<String>> getUniqueValues() {
		Map<String, List<String>> uniqueValues = new HashMap<>();
		uniqueValues.put("models", uCSPRepository.findDistinctModels());
		uniqueValues.put("vendors", uCSPRepository.findDistinctVendors());
		uniqueValues.put("networks", uCSPRepository.findDistinctNetworks());
		return uniqueValues;
	}
	public List<String> getUniqueUCGSources(){
		return uCSPRepository.findDistinctUCGSources();
	}
	public List<Device> getAllDevices() {
		return uCSPRepository.findAll();
	}

	public List<UcspProject> getUniqueProjects() {
		return ucspProjectsRepository.findUniqueProjects();
	}
}


package com.verizon.ucs.restapi.repository;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.verizon.ucs.restapi.model.Trends;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.verizon.ucs.restapi.model.Device;

public interface UCSPRepository extends JpaRepository<Device, String> {

	List<Device> findByDeviceNameIgnoreCase(String deviceName);

	List<Device> findByLoopbackIgnoreCase(String loopback);

	List<Device> findByNetworkIgnoreCase(String network);

	List<Device> findByVendorIgnoreCase(String vendor);

	List<Device> findByModelIgnoreCase(String model);

	@Query("SELECT DISTINCT d.model FROM Device d")
	List<String> findDistinctModels();

	@Query("SELECT DISTINCT d.vendor FROM Device d")
	List<String> findDistinctVendors();

	@Query("SELECT DISTINCT d.network FROM Device d")
	List<String> findDistinctNetworks();

	@Query(nativeQuery=true, value="SELECT DISTINCT u.ucg_source FROM ucsp_ucgsources u")
	List<String> findDistinctUCGSources();

	/*List<Device> findByDeviceNameIgnoreCaseOrLoopbackIgnoreCaseOrNetworkIgnoreCaseOrVendorIgnoreCaseOrModelIgnoreCase(
			String deviceName, String loopback, String network, String vendor, String model);

	List<Device> findByDeviceNameContainingIgnoreCaseOrLoopbackContainingIgnoreCaseOrNetworkContainingIgnoreCaseOrVendorContainingIgnoreCaseOrModelContainingIgnoreCase(
			String deviceName, String loopback, String network, String vendor, String model);

	 * @Query("SELECT d FROM Device d WHERE " +
	 * "LOWER(d.name) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
	 * "LOWER(d.ip) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
	 * "LOWER(d.network) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
	 * "LOWER(d.vendor) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
	 * "LOWER(d.model) LIKE LOWER(CONCAT('%', :searchTerm, '%'))") List<Device>
	 * search(@Param("searchTerm") String searchTerm);
	 */
}


package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "devices")
public class Device {

	@Id
	@Column(name = "device_name", nullable = false)
	private String deviceName;

	@Column(name = "model")
	private String model;

	@Column(name = "loopback")
	private String loopback;

	@Column(name = "status")
	private String status;

	@Column(name = "vendor")
	private String vendor;

	@Column(name = "router_type")
	private String routerType;

	@Column(name = "pollercluster")
	private String pollerCluster;

	@Column(name = "poller_interval")
	private Integer pollerInterval;

	@Column(name = "network", nullable = false)
	private String network;

	@Column(name = "last_update", columnDefinition = "timestamp default now()")
	private Timestamp lastUpdate;

	@Column(name = "phys_ip")
	private String physIp;

	/*@Column(name = "name")
    private String name;

    @Column(name = "asn")
    private Integer asn;

    @Column(name = "sub_asn")
    private Integer subAsn;
    
    @Column(name = "hub_name")
    private String hubName;
    
    @Column(name = "usage")
    private String usage;

    @Column(name = "snmp_comm_string")
    private String snmpCommString;

    @Column(name = "code_version")
    private String codeVersion;

    @Column(name = "subtechnology")
    private String subtechnology;
    
     @Column(name = "poll_interval", columnDefinition = "int4 default 86400")
    private Integer pollInterval;

    @Column(name = "max_oids")
    private Integer maxOids;

    @Column(name = "max_pdu_size")
    private Integer maxPduSize;

    @Column(name = "max_retries")
    private Integer maxRetries;

    @Column(name = "max_pdu_per_sec")
    private Integer maxPduPerSec;

    @Column(name = "wug_threads")
    private Integer wugThreads;

    @Column(name = "uptime")
    private String uptime;

    @Column(name = "indx_type")
    private String indxType;
    
    @Column(name = "pollerclusterlov")
    private String pollerclusterlov;

    @Column(name = "pollerclusteralarm")
    private String pollerclusteralarm;

    @Column(name = "phys_ip_address")
    private String physIpAddress;

    @Column(name = "location_code")
    private String locationCode;
    
    @Column(name = "functional_type")
    private String functionalType;

    @Column(name = "shelf_type")
    private String shelfType;

    @Column(name = "telem_mngd_network")
    private String telemMngdNetwork;

    @Column(name = "domain_flag")
    private String domainFlag;
    */
	public String getDeviceName() {
		return deviceName;
	}

	public void setDeviceName(String deviceName) {
		this.deviceName = deviceName;
	}

	public String getModel() {
		return model;
	}

	public void setModel(String model) {
		this.model = model;
	}

	public String getLoopback() {
		return loopback;
	}

	public void setLoopback(String loopback) {
		this.loopback = loopback;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getVendor() {
		return vendor;
	}

	public void setVendor(String vendor) {
		this.vendor = vendor;
	}

	public String getRouterType() {
		return routerType;
	}

	public void setRouterType(String routerType) {
		this.routerType = routerType;
	}

	public String getPollerCluster() {
		return pollerCluster;
	}

	public void setPollerCluster(String pollerCluster) {
		this.pollerCluster = pollerCluster;
	}

	public String getNetwork() {
		return network;
	}

	public void setNetwork(String network) {
		this.network = network;
	}

	public Integer getPollerInterval() {
		return pollerInterval;
	}

	public void setPollerInterval(Integer pollerInterval) {
		this.pollerInterval = pollerInterval;
	}

	public Timestamp getLastUpdate() {
		return lastUpdate;
	}

	public void setLastUpdate(Timestamp lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	public String getPhysIp() {
		return physIp;
	}

	public void setPhysIp(String physIp) {
		this.physIp = physIp;
	}


}


package com.verizon.ucs.restapi.controllers;

import com.verizon.ucs.restapi.dto.ApiRequest;
import com.verizon.ucs.restapi.dto.TrendsRequest;
import com.verizon.ucs.restapi.model.Device;
import com.verizon.ucs.restapi.model.Trends;
import com.verizon.ucs.restapi.model.UcspProject;
import com.verizon.ucs.restapi.service.UCSPService;
import graphql.GraphQLException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.graphql.data.method.annotation.SchemaMapping;
import org.springframework.stereotype.Controller;

import java.util.List;

/**
 * Controller interface for UCS Portal Application with JPA
 */
@Controller
public class UCSPController {
    private static final Logger logger = LoggerFactory.getLogger(UCSPController.class);

    @Autowired
    private UCSPService uCSPService;

    @QueryMapping(value = "searchDevices")
    public List<Device> getFilteredDevices(@Argument ApiRequest apiRequest) {
        return uCSPService.searchDevices(apiRequest);
    }

    @QueryMapping(value = "allDevices")
    public List<Device> getAllDevices() {
        return uCSPService.getAllDevices();
    }

    @SchemaMapping(typeName = "Query", value = "uniqueModels")
    public List<String> getUniqueModels() {
        return uCSPService.getUniqueValues().get("models");
    }

    @QueryMapping(value = "uniqueVendors")
    public List<String> getUniqueVendors() {
        return uCSPService.getUniqueValues().get("vendors");
    }

    @QueryMapping(value = "dailyTrends")
    public List<Trends> getTrends(@Argument TrendsRequest trendsRequest) {
        return uCSPService.getDailyTrends(trendsRequest);
    }

    @QueryMapping
    public List<String> uniqueNetworks() {
        return uCSPService.getUniqueValues().get("networks");
    }

    @QueryMapping(value = "uniqueUCSPProjects")
    public List<UcspProject> getUniqueProjects() {
        List<UcspProject> ucgProjects = uCSPService.getUniqueProjects();
        return ucgProjects;
    }

    @QueryMapping(value = "uniqueUCGSources")
    public List<String> getUniqueUCGSources() {
        List<String> ucgSources = uCSPService.getUniqueUCGSources();
        return ucgSources;
    }

    @QueryMapping(value = "uniqueUCGSourcesByProject")
    public List<UcspProject> getUniqueUCGSourcesByProject(@Argument Long projectId) {
        try {
            return uCSPService.getUniqueUCGSourcesByProject(projectId);
        } catch (DataAccessException e) {
            logger.error("Database error occurred while fetching UCG Sources", e);
            throw new GraphQLException("Database error: Unable to fetch UCG Sources for project ID: " + projectId);
        } catch (RuntimeException e) {
            logger.error("Runtime error occurred", e);
            throw new GraphQLException("Runtime error: " + e.getMessage());
        } catch (Exception e) {
            logger.error("Unexpected error occurred", e);
            throw new GraphQLException("Unexpected error: " + e.getMessage());
        }
    }
}


Here the backend class details take reference and modify to display the remaining fields in the grid here the graphql file:

type Query {
    allDevices: [Device]
    searchDevices(apiRequest: ApiRequest): [Device]
    uniqueModels: [String]
    uniqueNetworks: [String]
    dailyTrends(trendsRequest: TrendsRequest): [Trends]
    uniqueUCGSources: [String]
    uniqueUCGSourcesByProject(projectId: ID): [UcspProject]
    uniqueVendors: [String]
    uniqueUCSPProjects:[UcspProject]
}

type Device {
    deviceName: ID!
    model: String
    loopback: String
    status: String
    vendor: String
    routerType: String
    pollerCluster: String
    pollerInterval: Int
    network: String
    lastUpdate: String
    physIp: String
}
type UcspProject{
    id:ID!
    name:String!
}


input TrendsRequest {
    ucgSourceID: Int
    fromDate: String
    toDate: String
}

type Trends {
    id: ID!
    ucgSourceID: Int
    collectionDate: String
    sizeOfFilesKB: Int
    numberOfFiles: Int
}

input ApiRequest {
    deviceName: String
    model: String
    loopback: String
    vendor: String
    network: String
}
