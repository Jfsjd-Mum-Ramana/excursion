public boolean retrieveData(SpaceCollector sp, String dateReceived, String auditTopic) throws Exception {
    LOGGER.info("Entered SSH service");
    String sshUsername = sp.getUserName();
    String sshHost = sp.getUrl();
    String sshPassword = sp.getPassword();
    int port = sp.getPort().intValue();
    JSch jsch = getJsch(sshHost, sshPassword);
    Session session = getSession(sshUsername, sshHost, sshPassword, port, jsch);
    session.connect();
    ChannelSftp channelSftp = null;
    try {
        String remoteDirectory = FileUtil.getDirectory(sp.getInputFilePath());
        String localDirectory = FileUtil.getDirectory(sp.getOutputFilePath());
        LOGGER.info("remoteDirectory : " + remoteDirectory + " localDirectory : " + localDirectory);
        channelSftp = getChannelSftp(session, remoteDirectory);
        // Recursively retrieve and process files and directories
        retrieveAndProcessDirectory(sp, dateReceived, auditTopic, remoteDirectory, localDirectory, channelSftp);
    } finally {
        if (channelSftp != null) {
            channelSftp.disconnect();
        }
        if (session != null) {
            session.disconnect();
        }
    }
    return true;
}

private void retrieveAndProcessDirectory(SpaceCollector sp, String dateReceived, String auditTopic,
                                         String remoteDirectory, String localDirectory, ChannelSftp channelSftp) throws Exception {
    Vector<ChannelSftp.LsEntry> files = channelSftp.ls(remoteDirectory);
    LOGGER.info("Number of files/Directories found in " + remoteDirectory + ":" + files.size());
    Map<String, String> auditStatusMap = getAuditStatusMap(files, remoteDirectory);
    
    // Calculate the time threshold for the last 24 hours
    long currentTimeMillis = System.currentTimeMillis();
    long timeThreshold = currentTimeMillis - 24 * 60 * 60 * 1000; // 24 hours in milliseconds

    for (ChannelSftp.LsEntry file : files) {
        if (!".".equals(file.getFilename()) && !"..".equals(file.getFilename())) {
            String filePath = remoteDirectory + "/" + file.getFilename();
            long fileModificationTime = file.getAttrs().getMTime() * 1000L; // Convert to milliseconds

            // Process only if the file was modified in the last 24 hours
            if (fileModificationTime > timeThreshold) {
                if (!file.getAttrs().isDir()) {
                    LOGGER.info("found file in LS: " + file.getFilename());
                    LOGGER.info("filePath for lookup in COLLECTION_AUDIT: " + filePath);
                    String status = auditStatusMap.get(filePath);
                    if (status == null || "COLLECTION_FAILED".equals(status)) {
                        try {
                            String outputFile = localDirectory + "/" + file.getFilename();
                            LOGGER.info("in filePath : " + filePath + " out filePath : " + outputFile);
                            FileUtil.downloadFile(outputStreamCreator.create(outputFile), channelSftp.get(filePath),
                                    filePath, outputFile, sp.getOutputFilePath());
                            processDownloadedFile(sp, dateReceived, auditTopic, outputFile, localDirectory);
                        } catch (Exception e) {
                            CollectionAudit audit = createAuditObject(sp,
                                    filePath, JobStatus.COLLECTION_FAILED.toString(), e.getMessage());
                            kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit), "",
                                    auditTopic);
                            LOGGER.error("Error on retrieveData {}", e);
                        }
                    }
                } else {
                    LOGGER.info("DIR found : " + file.getFilename());
                    String subRemoteDirectory = remoteDirectory + "/" + file.getFilename();
                    String subLocalDirectory = localDirectory + "/" + file.getFilename();
                    FileUtil.createDirectoryIfNotExists(subLocalDirectory);
                    retrieveAndProcessDirectory(sp, dateReceived, auditTopic, subRemoteDirectory, subLocalDirectory, channelSftp);
                }
            }
        }
    }
}

private void processDownloadedFile(SpaceCollector sp, String dateReceived, String auditTopic,
                                   String outputFile, String localDirectory) throws Exception {
    List<String> filesList = new ArrayList<>();
    LOGGER.info("Processing downloaded file: " + outputFile);
    if (ZipUtil.isZipFile(outputFile)) {
        LOGGER.info("Zip file found: " + outputFile);
        String fileNameWithoutExtn = FileUtil.getFileNameWithoutExtn(outputFile);
        FileUtil.createDirectoryIfNotExists(localDirectory + "/" + fileNameWithoutExtn);
        ZipUtil.extract(outputFile, localDirectory + "/" + fileNameWithoutExtn);
        filesList.addAll(FileUtil.readFilesInDirectory(localDirectory + "/" + fileNameWithoutExtn));
    } else {
        LOGGER.info("non Zip file found: " + outputFile);
        filesList.add(outputFile);
    }
    for (String fileName : filesList) {
        Path insideFilePath = Paths.get(fileName);
        Path folderPath = Paths.get(sp.getOutputFilePath()).relativize(insideFilePath.getParent());
        String unixBasedPath = folderPath.toString().replace("\\", "/");
        String key = String.format("%s/%s/%s/%s/%s",
                ProfileCheckConfig.activeProfile,
                sp.getFileType(),
                sp.getUrl(),
                dateUtil.getDateInMMddyyyy(),
                !StringUtils.isBlank(unixBasedPath)
                        ? (unixBasedPath.toString() + "/" + insideFilePath.getFileName())
                        : insideFilePath.getFileName());
        System.out.println("**************************");
        System.out.println("Filename: " + fileName);
        System.out.println("Key: " + key);
        System.out.println("folderPath: " + folderPath);
        System.out.println("Inside File Path: " + insideFilePath);
        System.out.println("**************************");
        s3Service.pushToS3(fileName, key);
        CollectionAudit audit = createAuditObject(sp,
                key, JobStatus.COLLECTION_SUCCESSFUL.toString(), "");
        kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit),
                "", auditTopic);
        // Check if the file is an archive and process it further
        if (ZipUtil.isZipFile(fileName)) {
            String nestedFileNameWithoutExtn = FileUtil.getFileNameWithoutExtn(fileName);
            FileUtil.createDirectoryIfNotExists(localDirectory + "/" + nestedFileNameWithoutExtn);
            ZipUtil.extract(fileName, localDirectory + "/" + nestedFileNameWithoutExtn);
            List<String> nestedFilesList = FileUtil.readFilesInDirectory(localDirectory + "/" + nestedFileNameWithoutExtn);
            for (String nestedFile : nestedFilesList) {
                processDownloadedFile(sp, dateReceived, auditTopic, nestedFile, localDirectory);
            }
        }
    }
}

private CollectionAudit createAuditObject(SpaceCollector sp,
                                          String auditInputFilePath,
                                          String auditJobStatus,
                                          String auditExceptions) {
    CollectionAudit audit = getCollectionAudit(sp);
    audit.setInputFilePath(auditInputFilePath);
    audit.setJobStatus(auditJobStatus);
    audit.setExceptions(auditExceptions);
    return audit;
}

public void retrieveAttributesOfRemoteFile(ChannelSftp channelSftp,
                                           ChannelSftp.LsEntry file,
                                           String remoteDirectory,
                                           String inputFilePath)
        throws Exception {
    String filePath = file.getFilename(); // Use relative file path to fetch the actual file because we have already moved inside the remote directory
    try {
        channelSftp.stat(filePath);
        LOGGER.info("in filePath : " + filePath + " exists");
    } catch (SftpException e) {
        if (e.id == ChannelSftp.SSH_FX_NO_SUCH_FILE) {
            LOGGER.error("Remote file does not exist: " + inputFilePath);
        }
        throw e;
    }
}




for (ChannelSftp.LsEntry file : files) {
    if (!".".equals(file.getFilename()) && !"..".equals(file.getFilename())) {
        String filePath = remoteDirectory + "/" + file.getFilename();
        long fileModificationTime = file.getAttrs().getMTime() * 1000L; // Convert to milliseconds

        // Process only if the file was modified in the last 24 hours
        if (fileModificationTime > timeThreshold) {
            if (!file.getAttrs().isDir()) {
                LOGGER.info("found file in LS: " + file.getFilename());
                LOGGER.info("filePath for lookup in COLLECTION_AUDIT: " + filePath);
                String status = auditStatusMap.get(filePath);
                if (status == null || "COLLECTION_FAILED".equals(status)) {
                    try {
                        String outputFile = localDirectory + "/" + file.getFilename();
                        LOGGER.info("in filePath : " + filePath + " out filePath : " + outputFile);
                        FileUtil.downloadFile(outputStreamCreator.create(outputFile), channelSftp.get(filePath),
                                filePath, outputFile, sp.getOutputFilePath());
                        processDownloadedFile(sp, dateReceived,





@Test
public void testRetrieveAndProcessDirectory_withFilesModifiedWithinLast24Hours() throws Exception {
    // Set up the test environment
    SpaceCollector sp = new SpaceCollector();
    sp.setUserName("testUser");
    sp.setUrl("testUrl");
    sp.setPassword("testPassword");
    sp.setPort(22);
    sp.setInputFilePath("/remote/test/path");
    sp.setOutputFilePath("/local/test/path");

    // Mock dependencies
    JSch jsch = mock(JSch.class);
    Session session = mock(Session.class);
    ChannelSftp channelSftp = mock(ChannelSftp.class);
    when(jsch.getSession(anyString(), anyString(), anyInt())).thenReturn(session);
    when(session.openChannel("sftp")).thenReturn(channelSftp);

    // Mock directory listing with files modified within the last 24 hours
    Vector<ChannelSftp.LsEntry> files = new Vector<>();
    files.add(mockFile("recentFile1.txt", System.currentTimeMillis() / 1000));
    files.add(mockFile("oldFile.txt", (System.currentTimeMillis() - 48 * 60 * 60 * 1000) / 1000));
    when(channelSftp.ls(anyString())).thenReturn(files);

    // Run the method
    boolean result = retrieveData(sp, "dateReceived", "auditTopic");

    // Verify the results
    assertTrue(result);
    verify(channelSftp, times(1)).get("/remote/test/path/recentFile1.txt");
    verify(channelSftp, never()).get("/remote/test/path/oldFile.txt");
}

private ChannelSftp.LsEntry mockFile(String filename, long mtime) {
    ChannelSftp.LsEntry entry = mock(ChannelSftp.LsEntry.class);
    when(entry.getFilename()).thenReturn(filename);
    SftpATTRS attrs = mock(SftpATTRS.class);
    when(attrs.getMTime()).thenReturn((int) mtime);
    when(entry.getAttrs()).thenReturn(attrs);
    return entry;
}
