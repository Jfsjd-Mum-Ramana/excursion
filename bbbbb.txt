import org.apache.flink.util.Collector;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;

class TexttoJsonTransformerTest {

    // flatMap_Success test remains the same as before

    @Test
    void flatMap_EmptyInput_Failure() {
        // Creating an empty test input string
        String testInput = "";

        // Creating an instance of the TexttoJsonTransformer
        TexttoJsonTransformer transformer = new TexttoJsonTransformer();

        // Invoking the flatMap method with the empty test input and asserting the exception
        assertThrows(Exception.class, () -> transformer.flatMap(testInput, new Collector<String>() {
            @Override
            public void collect(String s) { }

            @Override
            public void close() { }
        }));
    }
}








import org.apache.flink.api.java.utils.ParameterTool;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.File;
import java.io.FileNotFoundException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

class MainTest {

    @Test
    void testMainMethodWithValidInput() throws Exception {
        // Arrange
        String[] args = {"--input", "validPath"};
        ParameterTool parameterTool = ParameterTool.fromArgs(args);

        // Act & Assert
        assertDoesNotThrow(() -> Main.main(args));
    }

    @Test
    void testMainMethodWithInvalidInput() {
        // Arrange
        String[] args = {"--input", "invalidPath"};

        // Act & Assert
        FileNotFoundException exception = assertThrows(FileNotFoundException.class, () -> Main.main(args));
        assertEquals("File not found!", exception.getMessage());
    }

    @Test
    void testMainMethodWithMockedFile() throws Exception {
        // Arrange
        String[] args = {"--input", "somePath"};
        ParameterTool parameterTool = Mockito.mock(ParameterTool.class);
        when(parameterTool.getRequired("input")).thenReturn("somePath");

        File mockedFile = Mockito.mock(File.class);
        Mockito.when(mockedFile.exists()).thenReturn(true);
        Mockito.whenNew(File.class).withArguments("somePath").thenReturn(mockedFile);

        // Act & Assert
        assertDoesNotThrow(() -> Main.main(args));
    }

    // Add more test cases as needed...
}
