package com.verizon.ucs.restapi.controller;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.service.UCSPService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.util.List;

@Controller
public class UCSPGraphQLController {

    @Autowired
    private UCSPService ucspService;

    // GraphQL Query Mapping for scatter plot data (fetch by protocol and data type)
    @QueryMapping
    public List<ScatterPlotData> scatterPlotData(String protocol, String dataType) {
        return ucspService.getScatterPlotData(protocol, dataType);
    }

    // GraphQL Query Mapping for scatter plot data (fetch by protocol)
    @QueryMapping
    public List<ScatterPlotData> scatterPlotDataByProtocol(String protocol) {
        return ucspService.getScatterPlotDataByProtocol(protocol);
    }

    // GraphQL Query Mapping for available protocols
    @QueryMapping
    public List<String> availableProtocols() {
        return ucspService.getAvailableProtocols();
    }
}






Sure! Below, I will provide you with the entire implementation of the classes based on the two tables you've provided (`ucsp_alarm_inventory` and `ucsp_alarm_metrics`). The GraphQL APIs will fetch scatter plot data, filter by protocol, and retrieve available protocols. I will also explain each class.

### Step-by-Step Implementation:

### 1. **GraphQL Schema (schema.graphqls)**

Define the GraphQL schema in `src/main/resources/schema.graphqls`:

```graphql
type Query {
    # Fetch scatter plot data for a protocol and data type (number_of_msgs or size_of_msgs)
    scatterPlotData(protocol: String!, dataType: String!): [ScatterPlotData]

    # Filter scatter plot data by protocol
    scatterPlotDataByProtocol(protocol: String!): [ScatterPlotData]

    # Fetch all available protocols
    availableProtocols: [String]
}

# Data model for scatter plot data
type ScatterPlotData {
    collectionName: String
    date: String
    yValue: Int
}
```

### 2. **Model Classes**

#### **UCSPAlarmInventory.java**

This class represents the `ucsp_alarm_inventory` table, which stores metadata about collections, devices, and data sources.

```java
package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.net.InetAddress;
import java.util.Objects;

@Entity
@Table(name = "ucsp_alarm_inventory")
public class UCSPAlarmInventory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "collection_name", nullable = false, unique = true)
    private String collectionName;

    @Column(name = "device_name", nullable = false)
    private String deviceName;

    @Column(name = "device_ip", nullable = false)
    private InetAddress deviceIp;

    @Column(name = "ucg_source", nullable = false)
    private String ucgSource;

    @Column(name = "vendor", nullable = false)
    private String vendor;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDeviceName() {
        return deviceName;
    }

    public void setDeviceName(String deviceName) {
        this.deviceName = deviceName;
    }

    public InetAddress getDeviceIp() {
        return deviceIp;
    }

    public void setDeviceIp(InetAddress deviceIp) {
        this.deviceIp = deviceIp;
    }

    public String getUcgSource() {
        return ucgSource;
    }

    public void setUcgSource(String ucgSource) {
        this.ucgSource = ucgSource;
    }

    public String getVendor() {
        return vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UCSPAlarmInventory that = (UCSPAlarmInventory) o;
        return Objects.equals(id, that.id) &&
                Objects.equals(collectionName, that.collectionName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, collectionName);
    }
}
```

#### **UCSPAlarmMetrics.java**

This class represents the `ucsp_alarm_metrics` table, which stores metrics for each collection.

```java
package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "ucsp_alarm_metrics")
public class UCSPAlarmMetrics {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "collection_name", referencedColumnName = "collection_name", nullable = false)
    private UCSPAlarmInventory ucspAlarmInventory;

    @Column(name = "last_updated")
    private LocalDateTime lastUpdated;

    @Column(name = "number_of_msgs", nullable = false)
    private Long numberOfMsgs;

    @Column(name = "size_of_msgs", nullable = false)
    private Long sizeOfMsgs;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public UCSPAlarmInventory getUcspAlarmInventory() {
        return ucspAlarmInventory;
    }

    public void setUcspAlarmInventory(UCSPAlarmInventory ucspAlarmInventory) {
        this.ucspAlarmInventory = ucspAlarmInventory;
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public Long getNumberOfMsgs() {
        return numberOfMsgs;
    }

    public void setNumberOfMsgs(Long numberOfMsgs) {
        this.numberOfMsgs = numberOfMsgs;
    }

    public Long getSizeOfMsgs() {
        return sizeOfMsgs;
    }

    public void setSizeOfMsgs(Long sizeOfMsgs) {
        this.sizeOfMsgs = sizeOfMsgs;
    }
}
```

#### **ScatterPlotData.java**

This is a DTO class that represents the data we return to the client (the GraphQL response).

```java
package com.verizon.ucs.restapi.model;

import java.time.LocalDateTime;

public class ScatterPlotData {

    private String collectionName;
    private LocalDateTime date;
    private Long yValue;

    public ScatterPlotData(String collectionName, LocalDateTime date, Long yValue) {
        this.collectionName = collectionName;
        this.date = date;
        this.yValue = yValue;
    }

    // Getters and Setters

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public LocalDateTime getDate() {
        return date;
    }

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    public Long getyValue() {
        return yValue;
    }

    public void setyValue(Long yValue) {
        this.yValue = yValue;
    }
}
```

### 3. **Repository Layer**

#### **UCSPRepository.java**

This repository interface handles the database queries using Spring Data JPA.

```java
package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmInventory;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface UCSPRepository extends JpaRepository<UCSPAlarmMetrics, Long> {

    // Fetch scatter plot data based on protocol and data type
    @Query("SELECT new com.verizon.ucs.restapi.model.ScatterPlotData(ai.collectionName, am.lastUpdated, am.numberOfMsgs) " +
            "FROM UCSPAlarmInventory ai " +
            "JOIN UCSPAlarmMetrics am ON ai.collectionName = am.ucspAlarmInventory.collectionName " +
            "WHERE ai.ucgSource = :protocol AND :dataType = 'number_of_msgs'")
    List<ScatterPlotData> fetchScatterPlotData(String protocol, String dataType);

    // Fetch scatter plot data by protocol
    @Query("SELECT new com.verizon.ucs.restapi.model.ScatterPlotData(ai.collectionName, am.lastUpdated, am.numberOfMsgs) " +
            "FROM UCSPAlarmInventory ai " +
            "JOIN UCSPAlarmMetrics am ON ai.collectionName = am.ucspAlarmInventory.collectionName " +
            "WHERE ai.ucgSource = :protocol")
    List<ScatterPlotData> fetchScatterPlotDataByProtocol(String protocol);

    // Fetch all available protocols
    @Query("SELECT DISTINCT ai.ucgSource FROM UCSPAlarmInventory ai")
    List<String> fetchAvailableProtocols();
}
```

### 4. **Service Layer**

#### **UCSPService.java**

The service layer interacts with the repository to fetch data.

```java
package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.repository.UCSPRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UCSPService {

    @Autowired
    private UCSPRepository ucspRepository;

    // Fetch scatter plot data based on protocol and data type
    public List<ScatterPlotData> getScatterPlotData(String protocol, String dataType) {
        return ucspRepository.fetchScatterPlotData(protocol, dataType);
    }

    // Fetch scatter plot data by protocol
    public List<ScatterPlotData> getScatterPlotDataByProtocol(String protocol) {
        return ucspRepository.fetchScatterPlotDataByProtocol(protocol);
    }

    // Fetch all available protocols
    public List<String> getAvailableProtocols() {
        return ucspRepository.fetchAvailableProtocols();
    }
}
```

### 5. **GraphQL Resolvers**

#### **UCSPGraphQLResolver.java**

This class is responsible for mapping GraphQL queries to actual service methods.

```java
package com.verizon.ucs.restapi.graphql;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon

.ucs.restapi.service.UCSPService;
import graphql.kickstart.tools.GraphQLQueryResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class UCSPGraphQLResolver implements GraphQLQueryResolver {

    @Autowired
    private UCSPService ucspService;

    // Resolver for scatter plot data by protocol and data type
    public List<ScatterPlotData> scatterPlotData(String protocol, String dataType) {
        return ucspService.getScatterPlotData(protocol, dataType);
    }

    // Resolver for scatter plot data by protocol
    public List<ScatterPlotData> scatterPlotDataByProtocol(String protocol) {
        return ucspService.getScatterPlotDataByProtocol(protocol);
    }

    // Resolver for available protocols
    public List<String> availableProtocols() {
        return ucspService.getAvailableProtocols();
    }
}
```

### 6. **Main Application Class**

#### **UCSApplication.java**

This class is the entry point for the Spring Boot application.

```java
package com.verizon.ucs.restapi;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class UCSApplication {

    public static void main(String[] args) {
        SpringApplication.run(UCSApplication.class, args);
    }
}
```

### Summary of the Implementation:

- **Model Classes** represent the tables (`UCSPAlarmInventory` and `UCSPAlarmMetrics`).
- **Repository** interfaces handle the queries to fetch data.
- **Service Layer** handles the business logic for GraphQL resolvers.
- **GraphQL Queries** include:
  - `scatterPlotData`: Fetch data by protocol and data type.
  - `scatterPlotDataByProtocol`: Fetch data by protocol.
  - `availableProtocols`: Fetch available protocols.
