package com.verizon.ucs.service;

import com.verizon.ucs.model.DeviceInfo;
import com.verizon.ucs.model.NexusData;
import org.apache.pulsar.client.api.PulsarClientException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class NexusService {

    private static final Logger logger = LoggerFactory.getLogger(NexusService.class);

    @Autowired
    private PulsarProducerService pulsarProducerService;

    // Existing method to fetch data from Nexus device
    public NexusData getNexusData(DeviceInfo device) throws Exception {
        NexusData data = null;
        try {
            // Call to a method that fetches data from the device (existing logic)
            data = fetchDataFromDevice(device);

            // If data is null, it means device is unreachable
            if (data == null) {
                sendUnreachableNotification(device);
            }
        } catch (Exception e) {
            logger.error("Error fetching data for device: {}", device.getDeviceName(), e);
            sendUnreachableNotification(device);  // Send notification on error (device unreachable)
            throw e;  // Rethrow exception for further handling (if needed)
        }
        return data;
    }

    // Send notification if device is unreachable
    private void sendUnreachableNotification(DeviceInfo device) {
        String message = String.format("Device %s (%s) is unreachable.", device.getDeviceName(), device.getDeviceIP());
        try {
            pulsarProducerService.sendMessage(message);  // Sending the message to Pulsar
            logger.info("Unreachable device notification sent to Pulsar: {}", message);
        } catch (PulsarClientException e) {
            logger.error("Error sending Pulsar message for unreachable device: {}", device.getDeviceName(), e);
        }
    }

    // Method to fetch data from device (can be your existing logic)
    private NexusData fetchDataFromDevice(DeviceInfo device) {
        // Placeholder: Logic to fetch data from the device based on device info (your existing implementation)
        // For example, use the device IP or model to make an API call or DB query to get data
        logger.info("Fetching data from device: {}", device.getDeviceName());
        
        // Example: Return null to simulate unreachable device (this would be replaced with your actual logic)
        return null;  // Simulating an unreachable device, replace with actual fetching logic
    }

    // Method to fetch Nexus data by device name (optional, if needed)
    public NexusData getDataByDeviceName(String deviceName) throws Exception {
        DeviceInfo device = getDeviceInfoByName(deviceName);
        return getNexusData(device);
    }

    // Example of getting DeviceInfo by device name (this would be your actual logic)
    private DeviceInfo getDeviceInfoByName(String deviceName) {
        // Placeholder logic: Fetch device info based on device name from DB or API
        DeviceInfo deviceInfo = new DeviceInfo();
        deviceInfo.setDeviceName(deviceName);
        deviceInfo.setDeviceIP("192.168.1.1");  // Example IP, replace with actual logic
        return deviceInfo;
    }

}