Based on the code you've shared, I'll provide a working version of your Spring Boot application with the necessary updates and improvements to make the scatter plot data functionality work properly.

Here's the corrected and enhanced working code:

1. UCSPAlarmRepository.java

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface UCSPAlarmRepository extends JpaRepository<ScatterPlotData, Long> {

    // Fetch scatter plot data based on protocol and date range
    @Query("SELECT s FROM ScatterPlotData s WHERE s.protocol = :protocol AND s.collectionDate BETWEEN :startDate AND :endDate")
    List<ScatterPlotData> findByProtocolAndDateRange(String protocol, LocalDateTime startDate, LocalDateTime endDate);

    // Fetch all available protocols
    @Query("SELECT DISTINCT s.protocol FROM ScatterPlotData s")
    List<String> findAllProtocols();
}

2. UCSPController.java

package com.verizon.ucs.restapi.controllers;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.service.UCSPService;
import graphql.GraphQLException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.time.LocalDateTime;
import java.util.List;

@Controller
public class UCSPController {

    @Autowired
    private UCSPService uCSPService;

    // Query for fetching scatter plot data based on protocol and date range
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotData(
            @Argument String protocol,
            @Argument String startDate,
            @Argument String endDate) {
        try {
            LocalDateTime start = LocalDateTime.parse(startDate);
            LocalDateTime end = LocalDateTime.parse(endDate);
            return uCSPService.getScatterPlotData(protocol, start, end);
        } catch (Exception e) {
            throw new GraphQLException("Error while fetching scatter plot data: " + e.getMessage());
        }
    }

    // Query for fetching all available protocols
    @QueryMapping
    public List<String> getAllProtocols() {
        return uCSPService.getAvailableProtocols();
    }
}

3. UCSPService.java

package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.repository.UCSPAlarmRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class UCSPService {

    @Autowired
    private UCSPAlarmRepository ucspAlarmRepository;

    // Method to get scatter plot data based on protocol and date range
    public List<ScatterPlotData> getScatterPlotData(String protocol, LocalDateTime startDate, LocalDateTime endDate) {
        return ucspAlarmRepository.findByProtocolAndDateRange(protocol, startDate, endDate);
    }

    // Method to get available protocols
    public List<String> getAvailableProtocols() {
        return ucspAlarmRepository.findAllProtocols();
    }
}

4. ScatterPlotData.java

This class represents the model for the scatter plot data:

package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "scatter_plot_data")
public class ScatterPlotData {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "protocol", nullable = false)
    private String protocol;

    @Column(name = "collection_date", nullable = false)
    private LocalDateTime collectionDate;

    @Column(name = "y_value", nullable = false)
    private Long yValue;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getProtocol() {
        return protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    public LocalDateTime getCollectionDate() {
        return collectionDate;
    }

    public void setCollectionDate(LocalDateTime collectionDate) {
        this.collectionDate = collectionDate;
    }

    public Long getyValue() {
        return yValue;
    }

    public void setyValue(Long yValue) {
        this.yValue = yValue;
    }
}

5. GraphQL Setup (GraphQL Schema)

Define GraphQL queries for fetching scatter plot data and available protocols.

In your application.yml, ensure you have the GraphQL configuration set up. You can use the Spring GraphQL starter or any other similar configuration.

spring:
  graphql:
    schema:
      location: classpath:schemas/schema.graphqls

Create a GraphQL schema file (e.g., schema.graphqls) in your resources folder:

type Query {
  getScatterPlotData(protocol: String!, startDate: String!, endDate: String!): [ScatterPlotData]
  getAllProtocols: [String]
}

type ScatterPlotData {
  id: ID!
  protocol: String!
  collectionDate: String!
  yValue: Long!
}

Summary:

1. Repository (UCSPAlarmRepository) is responsible for querying the database using JPA and custom queries for scatter plot data and protocols.


2. Service (UCSPService) acts as a bridge between the repository and controller to fetch the required data.


3. Controller (UCSPController) exposes the GraphQL queries for fetching scatter plot data and available protocols.


4. Model (ScatterPlotData) represents the structure of data for scatter plot visualization.


5. GraphQL Schema is set up to handle queries.



This structure ensures your system is flexible and scalable, supporting both fetch queries and GraphQL mutations for handling scatter plot data.

