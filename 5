package com.verizon.ucs.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.ucs.model.DataWrapperDTO;
import com.verizon.ucs.properties.DbProperties;
import com.verizon.ucs.util.RestTemplateCustomizer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class TtlScheduler {
    private static final Logger logger = LoggerFactory.getLogger(TtlScheduler.class);

    @Autowired
    private RestTemplateCustomizer restTemplateCustomizer;

    @Autowired
    private DbProperties databaseConfig;

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Scheduled(cron = "${scheduler.ttl.cron}")
    public void scheduleCallFunction() {
        String functionName = databaseConfig.getTransactionDeleteFunctionName();
        logger.info("Starting transaction deletion using function: {}", functionName);

        try {
            // Prepare the DTO
            DataWrapperDTO dto = new DataWrapperDTO();
            dto.setParameterList(new String[]{});  // No parameters needed
            dto.setFunctionName(functionName);

            logger.info("Sending request with DTO: {}", dto);

            // Call API and get response as String
            String responseBody = restTemplateCustomizer.callApi(dto);

            logger.info("Raw API Response Body: {}", responseBody);

            // Parse and log response
            parseAndLogResponse(responseBody);

        } catch (Exception e) {
            logger.error("Unexpected error while deleting transactions.", e);
        }
    }

    private void parseAndLogResponse(String responseBody) {
        try {
            JsonNode jsonNode = objectMapper.readTree(responseBody);

            logger.info("Parsed JSON Response: {}", jsonNode.toPrettyString());

            String status = jsonNode.has("status") ? jsonNode.get("status").asText() : "Unknown status";
            int transactionsDeleted = jsonNode.has("transactions_deleted_count") 
                                      ? jsonNode.get("transactions_deleted_count").asInt() 
                                      : 0;
            int devicesAuditDeleted = jsonNode.has("devices_audit_deleted_count") 
                                      ? jsonNode.get("devices_audit_deleted_count").asInt() 
                                      : 0;

            if (transactionsDeleted > 0 || devicesAuditDeleted > 0) {
                logger.info("Transaction Deletion Summary: Status: {}, Transactions Deleted: {}, Devices Audit Deleted: {}",
                        status, transactionsDeleted, devicesAuditDeleted);
            } else {
                logger.warn("No transactions or devices audit records were deleted. Status: {}", status);
            }

        } catch (Exception e) {
            logger.error("Failed to parse JSON response from function: {}", responseBody, e);
        }
    }
}