package com.verizon.ucs.vmbc.pulsar;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.newrelic.api.agent.NewRelic;
import com.verizon.ucs.vmbc.ordertest.*;
import com.verizon.ucs.vmbc.service.s3.S3MessageService;
import com.verizon.ucs.vmbc.yaml.VMBProperties;
import org.apache.commons.lang.StringUtils;
import org.apache.pulsar.client.api.*;
import org.apache.pulsar.client.impl.MessageImpl;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.io.IOException;
import java.time.Instant;
import java.util.*;

class VmbPulsarMessageProcessor implements Runnable {

	private final Logger logger = LoggerFactory.getLogger(VmbPulsarMessageProcessor.class);
	JSONParser parser = new JSONParser();

	private String serviceURL;
	private String topicURL;
	private String subscriptionName;
	private Long countMessages = 0L;
	private Long countDBMessages = 0L;
	private boolean isConsumerRunning=false;
	private boolean isShutdown=false;

	private PulsarClient client ;
	private Consumer<byte[]> consumer =null;
	private long startTime = System.currentTimeMillis();
	private Map<String, Object> basicAttributes = new HashMap<>();
	private boolean isLoggingRequired;
	private VMBCiscogrpctest vmbTest;
	private VMBCalixgrpctest calixTest;
	private VMBJgrpcordertest jgrParse;
	private VMBEPNMCCSParser parse;
	private VMBVnftrapordertest vnftrap;
	private VMBPonnmsordertest ponnms;
	private VMBMcpordertest mcptest;
	private VMBs4vzbtrapordertest s4vzbtrap;
	private VMBensetrapordertest ensetrap;
	private VMBTL1AOrdertest tl1Alarms;
	private S3MessageService s3MessageService;
	private final ObjectMapper mapper = new ObjectMapper();
	private String s3Flag;
	private String topicNameFromDB;
	private boolean s3LoggingRequired = false;
	private boolean persistenceTimestampFlag = false;
	private boolean dailyTableFlag = false;
	private boolean batchProcessing = false;
	private List<Message<byte[]>> messagesList = new ArrayList<Message<byte[]>>();
	private String collectionTimeString = "yyyyMMdd";
	private String retentionType = "";
	private int retentionValue = 0;
	private int consumerReceiverQueueSize = 0;
	private int s3BatchSize = 1000;
	private boolean orderTestingRequired = true;
	private boolean consumerLogging = false;
	String newRelicEvents = "enmvVMBConsumer:events";
	private VMBProperties vmbProperties;
	
	
	

	private static ObjectMapper objectMapper = new ObjectMapper(); // Initialize ObjectMapper

	VmbPulsarMessageProcessor(VMBProperties vmbProperties, String topicURL, String subscriptionName, PulsarClient client,
			boolean isLoggingRequired, S3MessageService s3MessageService,
			String topicNameFromDB, ThreadPoolTaskExecutor s3ThreadPoolTaskExecutor) {
		this.serviceURL = vmbProperties.getServiceUrl(); 
		this.topicURL = topicURL;
		this.subscriptionName = subscriptionName;
		this.client = client;
		this.isLoggingRequired = isLoggingRequired;
		String region = vmbProperties.getRegionStr();
		this.vmbTest = new VMBCiscogrpctest(region);
		this.calixTest = new VMBCalixgrpctest(region);
		this.parse = new VMBEPNMCCSParser(region);
		this.jgrParse = new VMBJgrpcordertest(region);
		this.vnftrap = new VMBVnftrapordertest(region);
		this.ponnms = new VMBPonnmsordertest(region);
		this.mcptest=new VMBMcpordertest(region);
		this.s4vzbtrap=new VMBs4vzbtrapordertest(region);
		this.ensetrap=new VMBensetrapordertest(region);
		this.tl1Alarms=new VMBTL1AOrdertest(region);
		this.s3MessageService = s3MessageService;
		this.s3Flag = vmbProperties.s3Json;
		this.topicNameFromDB = topicNameFromDB;
		this.vmbProperties = vmbProperties;
		
		
		//Check if s3 flag contains json or not
		//if json set s3LoggingRequired,persistenceTimestampFlag,dailyTableFlag
		logger.debug("s3Flag Value {}", s3Flag);
		if(!s3Flag.isEmpty() && null != s3Flag && !"".equalsIgnoreCase(s3Flag) && !"null".equalsIgnoreCase(s3Flag)  && !"I".equalsIgnoreCase(s3Flag) && !"U".equalsIgnoreCase(s3Flag)) {
			String jsonString = s3Flag;
			JSONParser parser = new JSONParser();
			JSONObject jsonObj;
			try {
				
				
				jsonObj = (JSONObject) parser.parse(jsonString);
				int corePoolSize = Integer.parseInt(jsonObj.get("corePoolSize") !=null ? (String) jsonObj.get("corePoolSize") :"0" );
				int maxPoolSize = Integer.parseInt(jsonObj.get("maxPoolSize") !=null ? (String) jsonObj.get("maxPoolSize") :"0" );
				s3LoggingRequired =  Boolean.parseBoolean((String) jsonObj.get("s3Logging"));
				dailyTableFlag =  Boolean.parseBoolean((String) jsonObj.get("dailyTable"));
				persistenceTimestampFlag =  Boolean.parseBoolean((String) jsonObj.get("persistenceTimestampFlag"));
				batchProcessing  =Boolean.parseBoolean(jsonObj.get("batchProcessing")!= null ? (String)jsonObj.get("batchProcessing"):"true");

				retentionType = (String) jsonObj.get("retentionType");

				if(retentionType != null || retentionType != "") {
					if("DAILY".equalsIgnoreCase(retentionType)) {
						collectionTimeString = "yyyyMMdd";
					}

					if("HOURLY".equalsIgnoreCase(retentionType)) {
						collectionTimeString = "yyyyMMdd-HH";
					}

					if("MINUTELY".equalsIgnoreCase(retentionType)) {
						collectionTimeString = "yyyyMMdd-HHmm";
					}
				}

				retentionValue = Integer.parseInt(jsonObj.get("retentionValue") !=null ? (String) jsonObj.get("retentionValue") :"0" );

		        if(corePoolSize !=0)
		        	s3ThreadPoolTaskExecutor.setCorePoolSize(corePoolSize);
		        if(maxPoolSize !=0)
		        s3ThreadPoolTaskExecutor.setMaxPoolSize(maxPoolSize);
		        consumerReceiverQueueSize = Integer.parseInt(jsonObj.get("consumerReceiverQueueSize") !=null ? (String) jsonObj.get("consumerReceiverQueueSize") :"0" );
				s3BatchSize = Integer.parseInt(jsonObj.get("s3BatchSize") !=null ? (String) jsonObj.get("s3BatchSize") :"1000" );
				orderTestingRequired =  Boolean.parseBoolean(jsonObj.get("orderTestingRequired")!= null ? (String)jsonObj.get("orderTestingRequired"):"true");
				consumerLogging =  Boolean.parseBoolean(jsonObj.get("consumerLogging")!= null ? (String)jsonObj.get("consumerLogging"):"false");

			} catch (ParseException e) {
				logger.error("Error occurred while parsing json data from S3 flag inside ConsumerThread constructor",topicURL,subscriptionName,e);
			}   
		}
	}

	/**
	 * Shutdown both consumer and client .
	 */
	void shutdown(boolean isFromShutDown) {
		try {
			if(Objects.nonNull(consumer)) {

				//called unsubscribe method to avoid "Exclusive consumer is already connected"
				//consumer.unsubscribe();
				consumer.close();

				logger.info("Consumer closed for topic : {} and subscription name : {}",topicURL,subscriptionName);
			}
		}catch(Exception e) {
			logger.error("Error occurred while closing Consumer for topic : {} and subscription name : {}",topicURL,subscriptionName);
		}
		try {
			if(Objects.nonNull(client)) {
				client.shutdown();
				logger.info("Pulsar Client closed for topic : {} and subscription name : {}",topicURL,subscriptionName);
			}
		}catch(Exception e) {
			logger.error("Error occurred while closing Pulsar Client for topic : {} and subscription name : {}",topicURL,subscriptionName,e);
		}
		consumer=null;
		client=null;
		if(isFromShutDown)
			isShutdown=true;
		isConsumerRunning=false;
	}

	/**
	 * Healthcheck
	 */
	void healthCheck() {
		if(!isConsumerRunning) {
			init();
		}
	}

	/**
	 * This method is used to create client and consumer.
	 *
	 * @throws PulsarClientException
	 */
	private void init()  {
		try {
			//Setting the thread priority to the highest as consumer should not be impacted
			Thread.currentThread().setPriority(10);
			if(client != null){
				logger.info("client obj is :{}",client);

				//Added below if condition to close any existing subscription. Other wise will encounter 'Exclusive consumer already exists'
				if(consumer != null) {
					consumer.close();
				}
				https://medium.com/@ankushkhanna1988/apache-pulsar-key-shared-mode-sticky-consistent-hashing-a4ee7133930a

				//TODO: Paratameterize receiverqueue in CFT or Read from DB

				if(consumerReceiverQueueSize >0) {
					logger.info("Consumer Queue size from DB:"+consumerReceiverQueueSize);
					consumer = client.newConsumer()
							.topic(topicURL)
							.subscriptionName(subscriptionName)
							.subscriptionType(SubscriptionType.Key_Shared)
							.keySharedPolicy(KeySharedPolicy.autoSplitHashRange())
							.receiverQueueSize(consumerReceiverQueueSize)
							/*
							 * .batchReceivePolicy(BatchReceivePolicy.builder() .maxNumMessages(1000)
							 * .maxNumBytes(10*1024*1024) .timeout(500, TimeUnit.MILLISECONDS) .build() )
							 */.subscribe();
				}else {
					//Default Consumer Settings
					consumer = client.newConsumer()
							.topic(topicURL)
							.subscriptionName(subscriptionName)
							.subscriptionType(SubscriptionType.Key_Shared)
							.keySharedPolicy(KeySharedPolicy.autoSplitHashRange())
							//.receiverQueueSize(consumerReceiverQueueSize)
							/*
							 * .batchReceivePolicy(BatchReceivePolicy.builder() .maxNumMessages(1000)
							 * .maxNumBytes(10*1024*1024) .timeout(500, TimeUnit.MILLISECONDS) .build() )
							 */.subscribe();
				}

				isConsumerRunning=true;
			}
		} catch (PulsarClientException e) {
			isConsumerRunning=false;
			logger.error("Error in init for topic : {} and subscription name : {}",topicURL,subscriptionName,e);

		}
	}

	//@Trace(dispatcher=true)
	@SuppressWarnings("unchecked")
	@Override
	public void run() {
		Map<String, Object> attributes = new HashMap<>();
		basicAttributes.put("clusterID", System.getenv("POD_NAMESPACE"));
		basicAttributes.put("containerID", System.getenv("POD_NAME"));
		
		boolean isGrpcPCSR = false;

		if (this.vmbProperties != null) {

			String grpcpcsr = this.vmbProperties.getIsGrpcPCSR();

			if (grpcpcsr != null && !grpcpcsr.isEmpty()) {
				isGrpcPCSR = Boolean.parseBoolean(grpcpcsr);
			}

			if (isGrpcPCSR)

			{

				String topicType = this.vmbProperties.getTopicType();
				String dialType = this.vmbProperties.getGrpcDialType();
				String streamType = this.vmbProperties.getGrpcStreamType();
				String ucgType = this.vmbProperties.getGrpcUcgType();
				String nrAppName = this.vmbProperties.getGrpcNrAppName();

				basicAttributes.put("topicType", topicType);
				basicAttributes.put("dialType", dialType);
				basicAttributes.put("streamType", streamType);
				basicAttributes.put("ucgType", ucgType);
				basicAttributes.put("pcsrClientName", nrAppName);
			}

			logger.info("is gRPC pcsr :{}  ", isGrpcPCSR);

		}

		try {
			if(!isConsumerRunning) {
				init();
				logger.info("CONSUME FROM PULSAR - Start consuming from Service URL: {} , Topic Name: {}", serviceURL, topicURL);
			}
		} catch(Exception e) {
			logger.error("Exception while initializing consumer thread {}",e.getMessage());
		}
		while (true) {
			long threadStartTime = System.currentTimeMillis();
			long asyncTimerStart = 0;
			long asyncTimerEnd = 0;
			try {

				logger.debug("ConsumerThread inside run method, isShutdown:: {}", isShutdown);
				if (isShutdown)
					break;
				logger.debug("isConsumerRunning Inside ConsumerThread:: {}  {}", isConsumerRunning,Thread.currentThread().getName());
				if (consumer!=null && isConsumerRunning) {
					logger.debug("ConsumerThread inside run method, countMessages outside 30secs check:: {}", countMessages);

					if(batchProcessing) {
						//TODO: Implement batch processing
						logger.debug("isLoggingRequired batchProcessing true");
						Messages<byte[]> messages = consumer.batchReceive();

						logger.debug("isLoggingRequired Inside ConsumerThread:: {}", isLoggingRequired);
						logger.debug("isLoggingRequired Inside s3Flag:: {}", s3Flag);
						//logger.debug("isLoggingRequired - Messages list size {}", messages.size());
						
						if(StringUtils.contains(s3Flag, "I"))	{
							//Added this module to take care of the ucgId pushing to S3 
							if(StringUtils.contains(s3Flag, "ucgIdEnabled")) {
								asyncTimerStart = System.currentTimeMillis();
								logger.debug("isLoggingRequired - ucgIdEnabled");
								try {
									logger.debug("isLoggingRequired Inside messages.size :: {}", messages.size());
									if(messages != null && messages.size() > 0) {

										messages.forEach(message -> {
											logger.debug("isLoggingRequired - Messages message {}", message);
											String json = new String(message.getValue());
											logger.debug("isLoggingRequired - Messages json {}", json);

											JSONObject s3RequestPayload = null;
											try {
												logger.debug("Parsing JSON: {}", json);
												if (json != null && !json.trim().isEmpty()) {
													s3RequestPayload = objectMapper.readValue(json, JSONObject.class);

													if (s3RequestPayload != null) {
														logger.debug("isLoggingRequired s3RequestPayload === {}", s3RequestPayload.toString());

														JsonNode jsonNode = objectMapper.readTree(json);
														//Handling TRAPS and PING
														if (jsonNode.has("ucgId")) {
															String ucgId = jsonNode.get("ucgId").asText();
															logger.debug("Extracted ucgId: {}", ucgId);

															JSONObject s3JsonData = new JSONObject();
															s3JsonData.put("ucgId", ucgId);
															s3MessageService.saveMsgToS3(s3JsonData);
														}
														else {
															//This block of code specially made for HPOV Services like LOV/ALARM/PERF handling
															//Ideally all messages in VMB will must have the ucgId - this is only the first Adaptation for HPOV
															logger.debug("ucgId not found in JSON - checking for SNMP LOV or PERF");
															if (jsonNode.has("ucgTopic")) {
																String ucgTopic = jsonNode.get("ucgTopic").asText();
																logger.debug("Extracted ucgTopic: {}", ucgTopic);
																//Handling LOV-ALARM
																if (ucgTopic.contains("hpov-snmp-alarm")) {
																	String ucgSource = jsonNode.get("ucgSource").asText();
																	String ucgType = jsonNode.get("ucgType").asText();
																	String ucgDeviceName = jsonNode.get("ucgDeviceName").asText();
																	String ucgTimestamp = jsonNode.get("ucgTimestamp").asText();
																	String ucgId = ucgSource+"-"+ucgType+"-"+ucgDeviceName+"-"+ucgTimestamp;
																	logger.debug("Extracted hpov-snmp-alarm-ucgId: {}", ucgId);
																	JSONObject s3JsonData = new JSONObject();
																	s3JsonData.put("ucgId", ucgId);
																	s3MessageService.saveMsgToS3(s3JsonData);
																}
																//Handling LOV
																if (ucgTopic.contains("hpov-lov")) {
																	String ucgSource = jsonNode.get("ucgSource").asText();
																	String ucgType = jsonNode.get("ucgType").asText();
																	String ucgDeviceName = jsonNode.get("ucgDeviceName").asText();
																	String ucgTimestamp = jsonNode.get("ucgTimestamp").asText();
																	String ucgId = ucgSource+"-"+ucgType+"-"+ucgDeviceName+"-"+ucgTimestamp;
																	logger.debug("Extracted hpov-lov-ucgId: {}", ucgId);
																	JSONObject s3JsonData = new JSONObject();
																	s3JsonData.put("ucgId", ucgId);
																	s3MessageService.saveMsgToS3(s3JsonData);
																}
															}
															//Handling PERF
															if (jsonNode.has("internalTopic")) {
																String internalTopic = jsonNode.get("internalTopic").asText();
																logger.debug("Extracted internalTopic: {}", internalTopic);
																if (internalTopic.contains("ENMV.HPOV.IP")) {
																	String deviceName = jsonNode.get("deviceName").asText();
																	String ifDescr = jsonNode.get("ifDescr").asText();
																	String loopback = jsonNode.get("loopback").asText();
																	String ifAlias = jsonNode.get("ifAlias").asText();
																	String dataType = jsonNode.get("dataType").asText();
																	String pollingInterval = jsonNode.get("pollingInterval").asText();
																	String intervalTime = jsonNode.get("intervalTime").asText();

																	if (ifDescr == null || ifDescr.isEmpty()) {
																		ifDescr = "ifDescr";
																	}
																	if (ifAlias == null || ifAlias.isEmpty()) {
																		ifDescr = "ifAlias";
																	}
																	String ucgId = deviceName.trim()+"-"+ifDescr.trim()+"-"+loopback.trim()+"-"+ifAlias.trim()+"-"+dataType.trim()+"-"+pollingInterval.trim()+"-"+internalTopic.trim()+"-"+intervalTime.trim();
																	logger.debug("Extracted ENMV.HPOV.IP-ucgId: {}", ucgId);
																	JSONObject s3JsonData = new JSONObject();
																	s3JsonData.put("ucgId", ucgId);
																	s3MessageService.saveMsgToS3(s3JsonData);
																}
															}
														}
													} else {
														logger.error("s3RequestPayload is null after parsing");
													}
												} else {
													logger.error("JSON string is null or empty");
												}
											} catch (JsonMappingException e) {
												logger.error("Error in 1 {} ", e);
												e.printStackTrace();
											} catch (JsonProcessingException e) {
												logger.error("Error in 2 {} ", e);
												e.printStackTrace();
											}

										});
									}
								}catch (Exception e) {
									logger.error("Error from consumer thread while pushing ucgId to s3 service: "+e.getMessage());

									//TODO: POST error to New Relic
									attributes.put("mngMsgsRejected", messages.size());
									NewRelic.getAgent().getInsights().recordCustomEvent(newRelicEvents, attributes);
									NewRelic.addCustomParameter("VMBConsumer", topicURL);
									NewRelic.noticeError(e, attributes);
								}
								asyncTimerEnd = System.currentTimeMillis();		

							} else {
								asyncTimerStart = System.currentTimeMillis();
								logger.debug("info - persist messages batch");
								//@Aysnc - Asynchronously hand over messages to thread pool for s3 persistence
								try {
									if(messages != null && messages.size() > 0) {
										logger.debug("debug - persist messages batch 1");
										s3MessageService.saveMessagesToS3(messages, persistenceTimestampFlag);
									}

								}catch (Exception e) {
									logger.error("Error from consumer thread while pushing to s3 service"+e.getMessage());
									//TODO: POST error to New Relic
									attributes.put("mngMsgsRejected", messages.size());
									NewRelic.getAgent().getInsights().recordCustomEvent(newRelicEvents, attributes);
									NewRelic.addCustomParameter("VMBConsumer", topicURL);
									NewRelic.noticeError(e, attributes);
								}
								asyncTimerEnd = System.currentTimeMillis();		
							}
						}
								
						if (messages != null) {
							countMessages = countMessages + (long) messages.size();
							if (isLoggingRequired) {
								messages.forEach(message -> {
									if (message.getValue().length > 0) {
										String json = new String(message.getValue());
										logger.debug(new Date() + "," + json + "," + message.getKey() + "," + topicURL);
									}
								});
							}

							//TODO: Parameterize Order testing based on a flag in DB
							if(orderTestingRequired) {
								orderTesting(messages,null);
							}
							
						}
						
						// publish VMB consumer Data to NewRelic to analyze the data. topic has all data every 30 seconds.
						if (System.currentTimeMillis() - startTime >= 60000) {
							logger.debug("Received  {}  messages to VMB consumer.", countMessages);
							basicAttributes.forEach((k, v) -> attributes.put(k, v));
							attributes.put("messagesReceived", countMessages);
							attributes.put("eventName", "receive");
							attributes.put("topic", topicURL);
						    //TODO Comment below for running in local
							//attributes.put("awsRegion", "us-east-1");
							
						//	attributes.put("awsRegion", Regions.getCurrentRegion().getName());
							//String newRelicEvents = "enmvVCPVMBConsumer:events";
							NewRelic.getAgent().getInsights().recordCustomEvent(newRelicEvents, attributes);
							NewRelic.addCustomParameter("VMBConsumer", topicURL);
							countMessages = 0L;
							startTime = System.currentTimeMillis();
						}
						if (messages != null && consumer != null)
							consumer.acknowledge(messages);
						
						Thread.sleep(10);
					
						
					}else {
						
						logger.info("isLoggingRequired batchProcessing false");
					
					Message<byte[]> message =  consumer.receive();
//					applicationConfig.totalMsgCountAtomicInteger.incrementAndGet();
						
						logger.debug("isLoggingRequired Inside ConsumerThread:: {}", isLoggingRequired);
						if (message != null) {
							
							countMessages = countMessages + 1;
							if (isLoggingRequired) {
								if (message.getValue().length > 0) {
									String json = new String(message.getValue());	
									logger.debug("Consumer:"+json);
								}				
							}
//							s3Flag = "I";
							if(StringUtils.contains(s3Flag, "I"))	{
								asyncTimerStart = System.currentTimeMillis();
								messagesList.add(message);
								//TODO: Parameterize Batch size in DB entry
								if(messagesList.size() > s3BatchSize || System.currentTimeMillis() - startTime >= 30000) {
									
									//@Aysnc - Asynchronously hand over messages to thread pool for s3 persistence
									try {
										s3MessageService.saveMessagesListToS3(messagesList, persistenceTimestampFlag);
									}catch (Exception e) {
										logger.error("Error from consumer thread while pushing to s3 service"+e.getMessage());
										//TODO: POST error to New Relic
									}
									countDBMessages = countDBMessages + messagesList.size();
									messagesList = new ArrayList<Message<byte[]>>();
								}
								asyncTimerEnd = System.currentTimeMillis();
							}
							
							/*
							(StringUtils.contains(s3Flag, "I"))	{
								
								//Add messages to a list for batching to 3
								
		
								//TODO: Parameterize Batch size in DB entry


									//@Aysnc - Asynchronously hand over messages to thread pool for s3 persistence
									try {
									s3MessageService.saveMessagesToS3((Messages<byte[]>) message, persistenceTimestampFlag);
									}catch (Exception e) {
										logger.error("Error from consumer thread while pushing to s3 service"+e.getMessage());
										//TODO: POST error to New Relic
									}

									countDBMessages = countDBMessages + 1;

								}
							}*/

							
							
						}
						
						//TODO: Parameterize Order testing based on a flag in DB
						if(orderTestingRequired) {
							orderTesting(null,message);
						}
						
						
						if (System.currentTimeMillis() - startTime >= 30000) {
							
							
							ConsumerStats cStats = consumer.getStats();
							
							/*
							logger.info("MsgNumInReceiverQueue:"+cStats.getMsgNumInReceiverQueue());
							logger.info("getRateBytesReceived:"+cStats.getRateBytesReceived());
							logger.info("getNumReceiveFailed:"+cStats.getNumReceiveFailed());
							logger.info("getNumMsgsReceived:"+cStats.getNumMsgsReceived());
							logger.info("getRateMsgsReceived:"+cStats.getRateMsgsReceived());
							logger.info("getTotalMsgsReceived:"+cStats.getTotalMsgsReceived());
							logger.info("getMsgNumInSubReceiverQueue:"+cStats.getMsgNumInSubReceiverQueue());
							
							*/
							
							basicAttributes.forEach((k, v) -> attributes.put(k, v));
							logger.debug("Received  {}  messages to VMB consumer.", countMessages);
							logger.debug("Sent  {}  messages to s3.", countDBMessages);
							//Consumer Stats
						
							attributes.put("MsgNumInReceiverQueue",cStats.getMsgNumInReceiverQueue());
							attributes.put("getRateBytesReceived",cStats.getRateBytesReceived());
							attributes.put("getNumReceiveFailed",cStats.getNumReceiveFailed());
							attributes.put("getNumMsgsReceived",cStats.getNumMsgsReceived());
							attributes.put("getRateMsgsReceived",cStats.getRateMsgsReceived());
							attributes.put("getTotalMsgsReceived",cStats.getTotalMsgsReceived());
							attributes.put("getMsgNumInSubReceiverQueue",cStats.getMsgNumInSubReceiverQueue());
							
						
							
							attributes.put("messagesReceived", countMessages);
							attributes.put("eventName", "receive");
							attributes.put("topic", topicURL);
							if (!isGrpcPCSR) {
							attributes.put("pcsrClientName", topicNameFromDB);
							}
						    //TODO Comment below for running in local
							//attributes.put("awsRegion", "us-east-1");
							
							
							//attributes.put("awsRegion", Regions.getCurrentRegion().getName());
//							attributes.put("awsRegion", ApplicationConfig.awsRegionString);
							
							NewRelic.getAgent().getInsights().recordCustomEvent(newRelicEvents, attributes);
							NewRelic.addCustomParameter("VMBConsumer", topicURL);
							countMessages = 0L;
							countDBMessages = 0L;
							startTime = System.currentTimeMillis();
							
						}
						if (message != null && consumer != null)
							consumer.acknowledge(message);
		
				}
				}    
			} catch (NullPointerException npe) {
				logger.error("Null Pointer exception while consuming from VMB pulsar", npe);
				//below is missing originally and is needed to re initialized during VMBConsumer.consumerHealthCheck() 
				isConsumerRunning = false;
				throw npe;
			} catch (Exception ex) {
				isConsumerRunning = false;
				NewRelic.noticeError(ex, attributes);
				logger.error("exception while consuming from VMB pulsar", ex);
				ex.printStackTrace();
			}
		
			//TODO: Parameterize logger based on a flag in DB
			if(consumerLogging) {
				long threadEndTime = System.currentTimeMillis();
				long threadTimeElapsed = threadEndTime - threadStartTime;
				if(threadTimeElapsed>10) {
					logger.debug("Consumer processing time :{}",threadTimeElapsed);
//					applicationConfig.totalLargeMsgCountAtomicInteger.incrementAndGet();


					logger.debug("Async processing time :{}",asyncTimerEnd-asyncTimerStart);
				}
				
			}
		}
		logger.debug("ConsumerThread run method end");
	}
	
	
	


    /*
     * Modified Ordertesting method to support both batch processing and single message processing
     */
	private void orderTesting(Messages<byte[]> messages, Message<byte[]> singleMessage){
		JSONParser parser = new JSONParser();
		if (messages != null) {
			messages.forEach(message -> {
				validateOrdering(message);
			});
		}else if(singleMessage  != null) {			
			validateOrdering(singleMessage);
		}
	}

	private void validateOrdering(Message<byte[]> message) {
		try {
			
//			logger.info("validateOrdering - meesage : {}", message.getValue());
			JSONObject jsonObject = (JSONObject) parser.parse(new String(message.getValue()));
			String ucgSource = getKeyFromJsonObject(jsonObject, "ucgSource");
			String ucgType = getKeyFromJsonObject(jsonObject, "ucgType");
			String metaData = getKeyFromJsonObject(jsonObject, "metaData");
			String json = new String(message.getValue());

			logger.debug("jsonObject for order test is" + jsonObject);
			if (topicURL.contains("epnmccs-yang")&& ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for CCS Difference");
				parse.setVmbTopic(topicURL);
				parse.checkDiff(json);
			}

			if (ucgSource.contentEquals("MCPDATA") && topicURL.contains("Eclipse-MCP-ALARM") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for MCPDATA Difference");
				mcptest.setVmbTopic(topicURL);
				mcptest.checkDiff(json);

			}
			if (ucgSource.contentEquals("CAGRPC2") && topicURL.contains("yangjson") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for CAGRPC2 Difference");
				vmbTest.setVmbTopic(topicURL);
				vmbTest.parseJson(json);
			}
			
			if(StringUtils.isNotBlank(metaData)) {
				JSONObject metadatJson = (JSONObject) parser.parse(metaData);
				String ucgSrc = getKeyFromJsonObject(metadatJson, "ucgSource");
				String ucgTyp = getKeyFromJsonObject(metadatJson, "ucgType");
				if (ucgSrc.contentEquals("CLGRPC")  && ucgTyp.contentEquals("PERF")) {
					logger.debug("Checking for CLGRPC Difference");
					calixTest.setVmbTopic(topicURL);
					calixTest.parseJson(json);
				}
			}

			if (ucgSource.contentEquals("JAGRPC2") && topicURL.contains("yangjson") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for JAGRPC2 Difference");
				jgrParse.setVmbTopic(topicURL);
				jgrParse.parseJson(json);
			}

			if (ucgSource.contentEquals("VNFTRAP") && topicURL.contains("Eclipse-vcp-traps-alarm") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for VNFTRAP Difference");
				vnftrap.setVmbTopic(topicURL);
				vnftrap.parseJson(json);
			}

			if (ucgSource.contentEquals("PONNMS") && topicURL.contains("PON-NMS-ALARM") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for PONNMS Difference");
				ponnms.setVmbTopic(topicURL);
				ponnms.parseJson(json);
			}

			if (ucgSource.contentEquals("S4VZBTRAP") && topicURL.contains("s4vzb-snmp-trap") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for S4VZBTRAP Difference");
				s4vzbtrap.setVmbTopic(topicURL);
				s4vzbtrap.parseJson(json);
			}
			if (ucgSource.contentEquals("") && topicURL.contains("eNSE-snmp-trap") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for ENSETRAP Difference");
				ensetrap.setVmbTopic(topicURL);
				ensetrap.parseJson(json);
			}
			if (ucgSource.contentEquals("TL1A") && ucgType.contentEquals("LIVE")) {
				logger.debug("Checking for TL1A Difference");
				tl1Alarms.setVmbTopic(topicURL);
				tl1Alarms.parseJson(json);
			}
		} catch (ParseException | IOException e) {
			logger.error(e.getMessage());
			//e.printStackTrace();
		}
		
	}

	public void setLoggingRequired(boolean loggingRequired) {
		isLoggingRequired = loggingRequired;
	}
	
	public void setS3Flag(String s3Flag) {
		this.s3Flag = s3Flag;
	}
	
	public void setS3LoggingRequired(boolean s3LoggingRequired) {
		this.s3LoggingRequired = s3LoggingRequired;
	}
	
	public void setPersistenceTimestampFlag(boolean persistenceTimestampFlag) {
		this.persistenceTimestampFlag = persistenceTimestampFlag;
	}
	
	public void setDailyTableFlag(boolean dailyTableFlag) {
		this.dailyTableFlag = dailyTableFlag;
	}

	public boolean isBatchProcessing() {
		return batchProcessing;
	}

	public void setBatchProcessing(boolean batchProcessing) {
		this.batchProcessing = batchProcessing;
	}

	public boolean isConsumerRunning() {
		return isConsumerRunning;
	}
	
	public String getKeyFromJsonObject(JSONObject jsonObj, String pattern) {
		String datakey = "";
		for (Object key : jsonObj.keySet()) {
			try {
				Object keyJsonObj = jsonObj.get(key.toString());
				if (key.toString().contains(pattern)) {
					datakey = keyJsonObj.toString();
					break;
				} else if (keyJsonObj instanceof JSONObject) {
					datakey = getKeyFromJsonObject((JSONObject) keyJsonObj, pattern);
				} else if (keyJsonObj instanceof String && keyJsonObj.toString().contains("{")) {
					JSONParser jp = new JSONParser();
					JSONObject json = (JSONObject) jp.parse(keyJsonObj.toString());
					datakey = getKeyFromJsonObject(json, pattern);
				}
			} catch (Exception e) {
				// e.printStackTrace();
			}
		}
		return datakey;
	}

	public String getRetentionType() {
		return retentionType;
	}

	public void setRetentionType(String retentionType) {
		this.retentionType = retentionType;
	}

	public int getRetentionValue() {
		return retentionValue;
	}

	public void setRetentionValue(int retentionValue) {
		this.retentionValue = retentionValue;
		
		if("DAILY".equalsIgnoreCase(retentionType)) {
			collectionTimeString = "yyyyMMdd"; 
		}
		
		if("HOURLY".equalsIgnoreCase(retentionType)) {
			collectionTimeString = "yyyyMMdd-HH"; 
		}
		
		if("MINUTELY".equalsIgnoreCase(retentionType)) {
			collectionTimeString = "yyyyMMdd-HHmm"; 
		}	
	}

	public int getConsumerReceiverQueueSize() {
		return consumerReceiverQueueSize;
	}

	public void setConsumerReceiverQueueSize(int consumerReceiverQueueSize) {
		this.consumerReceiverQueueSize = consumerReceiverQueueSize;
	}

	public int getS3BatchSize() {
		return s3BatchSize;
	}

	public void setS3BatchSize(int s3BatchSize) {
		this.s3BatchSize = s3BatchSize;
	}

	public boolean isOrderTestingRequired() {
		return orderTestingRequired;
	}

	public void setOrderTestingRequired(boolean orderTestingRequired) {
		this.orderTestingRequired = orderTestingRequired;
	}

	public boolean isConsumerLogging() {
		return consumerLogging;
	}

	public void setConsumerLogging(boolean consumerLogging) {
		this.consumerLogging = consumerLogging;
	}

}
