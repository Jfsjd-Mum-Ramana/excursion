Certainly! Below are the GraphQL Schema and Testing Examples for the APIs you've implemented:

GraphQL Schema

The GraphQL schema defines the queries for fetching data for your APIs. Here's the schema that corresponds to the UCSPAlarmMetrics data and operations:

# schema.graphql

type ScatterPlotData {
    collectionName: String
    lastUpdated: String
    yValue: Long
}

# Query to get available protocols
type Query {
    getAvailableProtocols: [String]

    # Query to get scatter plot data based on the protocol
    getScatterPlotData(protocol: String!): [ScatterPlotData]

    # Query to filter data by protocol
    filterDataByProtocol(protocol: String!): [UCSPAlarmMetrics]
}

# The UCSPAlarmMetrics type for querying data
type UCSPAlarmMetrics {
    id: ID
    ucspAlarmInventory: UCSPAlarmInventory
    lastUpdated: String
    numberOfMsgs: Long
    sizeOfMsgs: Long
}

# The UCSPAlarmInventory type related to each UCSPAlarmMetrics
type UCSPAlarmInventory {
    id: ID
    collectionName: String
    deviceName: String
    deviceIp: String
    ucgSource: String
    vendor: String
}

Explanation of the GraphQL Schema

Query:

getAvailableProtocols: Returns a list of available protocols (e.g., SNMP, WSS, etc.).

getScatterPlotData(protocol: String!): Takes a protocol as an argument and returns a list of ScatterPlotData that includes the collection name, timestamp (lastUpdated), and the number of messages (yValue).

filterDataByProtocol(protocol: String!): Returns a list of UCSPAlarmMetrics for the specified protocol.


Types:

ScatterPlotData: Represents the scatter plot data that will be returned for visualization.

UCSPAlarmMetrics: Represents the alarm metrics data, including a reference to UCSPAlarmInventory.

UCSPAlarmInventory: Represents the inventory metadata for the alarms.



Testing the GraphQL API

To test the GraphQL API, you can use Postman or GraphQL Playground. Below are the steps for testing each API.

1. Get Available Protocols

GraphQL Query:

query {
  getAvailableProtocols
}

Expected Response:

{
  "data": {
    "getAvailableProtocols": ["SNMP", "WSS", "gRPC", "syslog"]
  }
}

2. Get Scatter Plot Data by Protocol

GraphQL Query:

query {
  getScatterPlotData(protocol: "SNMP") {
    collectionName
    lastUpdated
    yValue
  }
}

Expected Response:

{
  "data": {
    "getScatterPlotData": [
      {
        "collectionName": "Collection1",
        "lastUpdated": "2024-11-20T10:30:00",
        "yValue": 204800
      },
      {
        "collectionName": "Collection2",
        "lastUpdated": "2024-11-21T12:00:00",
        "yValue": 300000
      }
    ]
  }
}

3. Filter Data by Protocol

GraphQL Query:

query {
  filterDataByProtocol(protocol: "SNMP") {
    id
    ucspAlarmInventory {
      collectionName
      deviceName
    }
    lastUpdated
    numberOfMsgs
    sizeOfMsgs
  }
}

Expected Response:

{
  "data": {
    "filterDataByProtocol": [
      {
        "id": "1",
        "ucspAlarmInventory": {
          "collectionName": "Collection1",
          "deviceName": "DeviceA"
        },
        "lastUpdated": "2024-11-20T10:30:00",
        "numberOfMsgs": 1000,
        "sizeOfMsgs": 204800
      },
      {
        "id": "2",
        "ucspAlarmInventory": {
          "collectionName": "Collection2",
          "deviceName": "DeviceB"
        },
        "lastUpdated": "2024-11-21T12:00:00",
        "numberOfMsgs": 1500,
        "sizeOfMsgs": 300000
      }
    ]
  }
}


---

Testing with Postman or GraphQL Playground

Step-by-step Testing with GraphQL Playground

1. Install GraphQL Playground if you haven't already, or use an online version like Apollo Studio.


2. Set the URL of your GraphQL API endpoint (e.g., http://localhost:8080/graphql).


3. Run the Queries:

First, run the getAvailableProtocols query to get a list of available protocols.

Next, run the getScatterPlotData query by providing a protocol (e.g., SNMP) to get the scatter plot data.

Finally, run the filterDataByProtocol query to fetch the UCSPAlarmMetrics for a particular protocol.




Step-by-step Testing with Postman

1. Set up a Postman Request:

Method: POST

URL: http://localhost:8080/graphql

Headers: Content-Type: application/json



2. Body:

For the getAvailableProtocols query, use the following JSON in the body:

{
  "query": "query { getAvailable






Certainly! Below are the classes for the repository, service, controller, and model for the GraphQL APIs you're working on. This includes everything you need for your project, from the database queries to GraphQL API endpoints.


---

1. Model Classes

UCSPAlarmInventory.java

package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.net.InetAddress;
import java.util.Objects;

@Entity
@Table(name = "ucsp_alarm_inventory")
public class UCSPAlarmInventory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "collection_name", nullable = false, unique = true)
    private String collectionName;

    @Column(name = "device_name", nullable = false)
    private String deviceName;

    @Column(name = "device_ip", nullable = false)
    private InetAddress deviceIp;

    @Column(name = "ucg_source", nullable = false)
    private String ucgSource;

    @Column(name = "vendor", nullable = false)
    private String vendor;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public String getDeviceName() {
        return deviceName;
    }

    public void setDeviceName(String deviceName) {
        this.deviceName = deviceName;
    }

    public InetAddress getDeviceIp() {
        return deviceIp;
    }

    public void setDeviceIp(InetAddress deviceIp) {
        this.deviceIp = deviceIp;
    }

    public String getUcgSource() {
        return ucgSource;
    }

    public void setUcgSource(String ucgSource) {
        this.ucgSource = ucgSource;
    }

    public String getVendor() {
        return vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UCSPAlarmInventory that = (UCSPAlarmInventory) o;
        return Objects.equals(id, that.id) &&
                Objects.equals(collectionName, that.collectionName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, collectionName);
    }
}

UCSPAlarmMetrics.java

package com.verizon.ucs.restapi.model;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "ucsp_alarm_metrics")
public class UCSPAlarmMetrics {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "collection_name", referencedColumnName = "collection_name", nullable = false)
    private UCSPAlarmInventory ucspAlarmInventory;

    @Column(name = "last_updated")
    private LocalDateTime lastUpdated;

    @Column(name = "number_of_msgs", nullable = false)
    private Long numberOfMsgs;

    @Column(name = "size_of_msgs", nullable = false)
    private Long sizeOfMsgs;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public UCSPAlarmInventory getUcspAlarmInventory() {
        return ucspAlarmInventory;
    }

    public void setUcspAlarmInventory(UCSPAlarmInventory ucspAlarmInventory) {
        this.ucspAlarmInventory = ucspAlarmInventory;
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public Long getNumberOfMsgs() {
        return numberOfMsgs;
    }

    public void setNumberOfMsgs(Long numberOfMsgs) {
        this.numberOfMsgs = numberOfMsgs;
    }

    public Long getSizeOfMsgs() {
        return sizeOfMsgs;
    }

    public void setSizeOfMsgs(Long sizeOfMsgs) {
        this.sizeOfMsgs = sizeOfMsgs;
    }
}

ScatterPlotData.java (Model for the Scatter Plot data)

package com.verizon.ucs.restapi.model;

import java.time.LocalDateTime;

public class ScatterPlotData {

    private String collectionName;
    private LocalDateTime lastUpdated;
    private Long yValue;

    // Constructor
    public ScatterPlotData(String collectionName, LocalDateTime lastUpdated, Long yValue) {
        this.collectionName = collectionName;
        this.lastUpdated = lastUpdated;
        this.yValue = yValue;
    }

    // Getters and Setters
    public String getCollectionName() {
        return collectionName;
    }

    public void setCollectionName(String collectionName) {
        this.collectionName = collectionName;
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(LocalDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public Long getYValue() {
        return yValue;
    }

    public void setYValue(Long yValue) {
        this.yValue = yValue;
    }
}


---

2. Repository Class

UCSPAlarmMetricsRepository.java

package com.verizon.ucs.restapi.repository;

import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.model.ScatterPlotData;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface UCSPAlarmMetricsRepository extends JpaRepository<UCSPAlarmMetrics, Long> {

    // Query to get available protocols (distinct ucgSource)
    @Query("SELECT DISTINCT u.ucgSource FROM UCSPAlarmInventory u")
    List<String> getAvailableProtocols();

    // Query to get scatter plot data for a specific protocol
    @Query("SELECT new com.verizon.ucs.restapi.model.ScatterPlotData(" +
           "m.ucspAlarmInventory.collectionName, m.lastUpdated, m.numberOfMsgs) " +
           "FROM UCSPAlarmMetrics m WHERE m.ucspAlarmInventory.ucgSource = :protocol")
    List<ScatterPlotData> getScatterPlotData(@Param("protocol") String protocol);

    // Query to filter data by protocol
    List<UCSPAlarmMetrics> findByUcspAlarmInventory_UcgSource(String protocol);
}


---

3. Service Class

UCSPAlarmMetricsService.java

package com.verizon.ucs.restapi.service;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.repository.UCSPAlarmMetricsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UCSPAlarmMetricsService {

    @Autowired
    private UCSPAlarmMetricsRepository ucspAlarmMetricsRepository;

    // Get available protocols
    public List<String> getAvailableProtocols() {
        return ucspAlarmMetricsRepository.getAvailableProtocols();
    }

    // Get scatter plot data
    public List<ScatterPlotData> getScatterPlotData(String protocol) {
        return ucspAlarmMetricsRepository.getScatterPlotData(protocol);
    }

    // Filter data by protocol
    public List<UCSPAlarmMetrics> filterDataByProtocol(String protocol) {
        return ucspAlarmMetricsRepository.findByUcspAlarmInventory_UcgSource(protocol);
    }
}


---

4. Controller Class

UCSPAlarmMetricsController.java

package com.verizon.ucs.restapi.controller;

import com.verizon.ucs.restapi.model.ScatterPlotData;
import com.verizon.ucs.restapi.model.UCSPAlarmMetrics;
import com.verizon.ucs.restapi.service.UCSPAlarmMetricsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.util.List;

@Controller
public class UCSPAlarmMetricsController {

    @Autowired
    private UCSPAlarmMetricsService ucspAlarmMetricsService;

    // Query to get available protocols
    @QueryMapping
    public List<String> getAvailableProtocols() {
        return ucspAlarmMetricsService.getAvailableProtocols();
    }

    // Query to get scatter plot data by protocol
    @QueryMapping
    public List<ScatterPlotData> getScatterPlotData(String protocol) {
        return ucspAlarmMetricsService.getScatterPlotData(protocol);
    }

    // Query to filter data by protocol
    @QueryMapping
    public List<UCSPAlarmMetrics> filterDataByProtocol(String protocol) {
        return ucspAlarmMetricsService.filterDataByProtocol(protocol);
    }
}


---

Explanation

Model Classes: These represent the data structure. UCSPAlarmInventory and UCSPAlarmMetrics map to your database tables, and ScatterPlotData is a custom model used for the scatter plot data returned in GraphQL.

Repository: The UCSPAlarmMetricsRepository provides methods to:

1. Get the list of available protocols (getAvailableProtocols).


2. Get the scatter plot data for a specific protocol (`getScatterPlot




