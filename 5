To help you fully integrate Pulsar into your system, I'll provide the necessary Pulsar classes that will allow you to produce, consume, and configure Pulsar in your application.

You already have the PulsarPublisherService class, so I will now provide:

1. Pulsar Configuration Class: To configure the Pulsar client.


2. Pulsar Consumer Class: To consume messages from the Pulsar topic.


3. Pulsar Producer Class: You've already provided this, but I'll make sure it's properly set up.



Let’s start with each necessary component:


---

1️⃣ Pulsar Configuration Class

This class will configure the Pulsar client using values from your application.yml or application.properties.

PulsarConfig.java:

package com.verizon.ucs.config;

import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.impl.auth.AuthenticationTls;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class PulsarConfig {

    @Value("${vmb.serviceUrl}")
    private String serviceUrl;

    @Value("${vmb.tlsTrustCertsFile}")
    private String tlsTrustCertsFile;

    @Value("${vmb.tlsCertFile}")
    private String tlsCertFile;

    @Value("${vmb.tlsKeyFile}")
    private String tlsKeyFile;

    @Bean
    public PulsarClient pulsarClient() throws Exception {
        return PulsarClient.builder()
                .serviceUrl(serviceUrl)
                .tlsTrustCertsFilePath(tlsTrustCertsFile)
                .authentication(new AuthenticationTls(tlsCertFile, tlsKeyFile))
                .build();
    }
}

Explanation:

PulsarClient: Initializes the Pulsar client using TLS authentication and the service URL.

@Value: Reads configuration values (e.g., service URL, TLS cert files) from the application configuration.

@Bean: Makes the Pulsar client available as a Spring bean for dependency injection.



---

2️⃣ Pulsar Consumer Class

Now, let's create a Pulsar consumer that will listen to a topic and process the messages.

PulsarConsumerService.java:

package com.verizon.ucs.service.pulsar;

import org.apache.pulsar.client.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PulsarConsumerService {

    private static final Logger logger = LoggerFactory.getLogger(PulsarConsumerService.class);

    @Autowired
    private PulsarClient pulsarClient;

    public void consumeMessages(String topicName) {
        try {
            Consumer<byte[]> consumer = pulsarClient.newConsumer()
                    .topic(topicName)
                    .subscriptionName("lov-subscription")  // Name of the subscription
                    .subscribe();

            logger.info("Listening for messages on topic: {}", topicName);

            while (true) {
                // Receive a message (blocking call)
                Message<byte[]> msg = consumer.receive();
                String message = new String(msg.getData());

                logger.info("Received message: {}", message);

                // Acknowledge the message after processing
                consumer.acknowledge(msg);
            }
        } catch (PulsarClientException | InterruptedException e) {
            logger.error("Failed to consume messages", e);
        }
    }
}

Explanation:

PulsarConsumerService: This service listens to a Pulsar topic and processes the messages.

pulsarClient.newConsumer(): Creates a Pulsar consumer that subscribes to the specified topic (lov-subscription).

consumer.receive(): Blocks until a message is received.

consumer.acknowledge(msg): Acknowledges that the message was processed successfully.


Usage:

Call consumeMessages("persistent://enmv/psc-alarm/nexus-meter-lov") to start listening to the topic where LOV notifications are published.



---

3️⃣ Pulsar Publisher Service (Already Provided)

You already have the PulsarPublisherService to send messages to Pulsar. Here’s a reminder of the essential parts of your PulsarPublisherService:

Reminder of PulsarPublisherService.java:

package com.verizon.ucs.service.pulsar;

import com.verizon.ucs.config.VMBProperties;
import org.apache.pulsar.client.api.*;
import org.apache.pulsar.client.impl.auth.AuthenticationTls;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.stereotype.Service;

@Service
@EnableConfigurationProperties({ VMBProperties.class })
public class PulsarPublisherService {

    private static final Logger logger = LoggerFactory.getLogger(PulsarPublisherService.class);

    @Autowired
    private VMBProperties properties;

    public void publishMessage(String message) throws PulsarClientException {
        logger.info("Attempting to send message to Pulsar...");

        if (properties.getServiceUrl() == null || properties.getServiceUrl().isEmpty()) {
            logger.error("Pulsar service URL is not configured properly!");
            throw new IllegalArgumentException("Pulsar service URL is missing in configuration.");
        }

        if (properties.getTopicName() == null || properties.getTopicName().isEmpty()) {
            logger.error("Pulsar topic name is not configured properly!");
            throw new IllegalArgumentException("Pulsar topic name is missing in configuration.");
        }

        PulsarClient client = PulsarClient.builder()
                .serviceUrl(properties.getServiceUrl())  // Ensure the correct service URL
                .tlsTrustCertsFilePath(properties.getTlsTrustCertsFile())  // TLS certs
                .authentication(new AuthenticationTls(properties.getTlsCertFile(), properties.getTlsKeyFile())) // TLS auth
                .build();

        logger.debug("Pulsar client initialized successfully. Creating producer for topic: {}", properties.getTopicName());

        Producer<byte[]> producer = client.newProducer()
                .topic(properties.getTopicName())
                .create();

        logger.debug("Sending LOV notification to Pulsar: {}", message);

        producer.send(message.getBytes());

        producer.close();
        client.close();

        logger.info("Message successfully sent to Pulsar topic: {}", properties.getTopicName());
    }
}


---

4️⃣ Integration & Running the Consumer

Now that we have all the necessary components, you can integrate the consumer into your application:

1. Start the Consumer: To start the consumer, you would inject the PulsarConsumerService and call the consumeMessages() method with the topic name to listen for messages.

Example:

@Autowired
private PulsarConsumerService pulsarConsumerService;

@PostConstruct
public void startConsuming() {
    // Start listening to the topic
    pulsarConsumerService.consumeMessages("persistent://enmv/psc-alarm/nexus-meter-lov");
}


2. Test the Integration:

Producer: Use the PulsarPublisherService to publish messages (e.g., the LOV notification).

Consumer: The PulsarConsumerService should receive those messages, process them, and log the content.





---

5️⃣ Conclusion

With these steps, you now have:

PulsarClient configured for your application.

PulsarProducer to send messages (such as the LOV notification).

PulsarConsumer to receive messages and process them.


If you need further assistance with configuring or running the Pulsar components or troubleshooting issues, feel free to ask!

