import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class XmlTransformerApplicationTest {

    @Test
    public void testAllRecordsSuccessfullyProcessed() {
        XmlTransformerApplication app = new XmlTransformerApplication();
        app.processRecords(10, 0);
        assertEquals(10, app.getSuccessCount());
        assertEquals(0, app.getFailureCount());

        KafkaProducer kafkaProducerMock = mock(KafkaProducer.class);
        app.setKafkaProducer(kafkaProducerMock);

        app.pushSuccessMessageToKafka();
        verify(kafkaProducerMock, times(1)).sendMessage("auditTopic", "Success: Processed 10 records successfully");
    }

   @Test
    public void testExceptionThrownAndPushFailureMessage() {
        XmlTransformerApplication app = new XmlTransformerApplication();

        KafkaProducer kafkaProducerMock = mock(KafkaProducer.class);
        app.setKafkaProducer(kafkaProducerMock);

        assertThrows(RuntimeException.class, app::throwExceptionInTransformation);
        assertEquals(0, app.getSuccessCount());
        assertEquals(0, app.getFailureCount());

        app.pushFailureMessageToKafka();
        verify(kafkaProducerMock, times(1)).sendMessage("auditTopic", "Failure: Transformation failed");
    }

    @Test
    public void testPartialSuccessAndFailure() {
        XmlTransformerApplication app = new XmlTransformerApplication();
        app.processRecords(6, 4);
        assertEquals(6, app.getSuccessCount());
        assertEquals(4, app.getFailureCount());

        KafkaProducer kafkaProducerMock = mock(KafkaProducer.class);
        app.setKafkaProducer(kafkaProducerMock);

        app.pushPartialSuccessMessageToKafka();
        verify(kafkaProducerMock, times(1)).sendMessage("auditTopic", "Partial Success: 6 records processed successfully, 4 records failed");
    }

    @Test
    public void testExceptionThrownAndPushFailureMessage() {
        XmlTransformerApplication app = new XmlTransformerApplication();
        KafkaProducer kafkaProducerMock = mock(KafkaProducer.class);
        app.setKafkaProducer(kafkaProducerMock);

        assertThrows(RuntimeException.class, app::throwExceptionInTransformation);
        assertEquals(0, app.getSuccessCount());
        assertEquals(0, app.getFailureCount());

        app.pushFailureMessageToKafka();
        verify(kafkaProducerMock, times(1)).sendMessage("auditTopic", "Failure: Transformation failed");
    }

    @Test
    public void testInputFileNotPresent() {
        XmlTransformerApplication app = new XmlTransformerApplication();
        KafkaProducer kafkaProducerMock = mock(KafkaProducer.class);
        app.setKafkaProducer(kafkaProducerMock);

        app.simulateInputFileNotPresent();
        // Implement assertions or further verifications as per your application's behavior
    }

    @Test
    public void testOutputTopicNotAccessible() {
        XmlTransformerApplication app = new XmlTransformerApplication();
        KafkaProducer kafkaProducerMock = mock(KafkaProducer.class);
        app.setKafkaProducer(kafkaProducerMock);

        app.simulateOutputTopicNotAccessible();
        // Implement assertions or further verifications as per your application's behavior
    }
}



