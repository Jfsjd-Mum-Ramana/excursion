import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.connectors.kafka.KafkaRecordSerializationSchema;
import org.apache.flink.streaming.connectors.kafka.KafkaSink;
import org.apache.flink.streaming.connectors.kafka.delivery.DeliveryGuarantee;
import org.apache.flink.streaming.connectors.kafka.serialization.KafkaSerializationSchema;
import org.apache.flink.streaming.util.serialization.SimpleStringSchema;
import org.json.JSONObject;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

public class KafkaMessagePublisher {

    public static void publishToAuditQueue(
            String bootstrapServer, String auditTopic, String filePath,
            int totalRecords, int processedRecords, int failedRecords) {

        try {
            StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

            // Read file name from the file path
            String fileName = new File(filePath).getName();

            // Get current date for date_received and date_processed
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateReceived = dateFormat.format(new Date());
            String dateProcessed = dateReceived; // Assuming processing time = received time

            JSONObject jsonMessage = new JSONObject();
            jsonMessage.put("file_name", fileName);
            jsonMessage.put("date_received", dateReceived);
            jsonMessage.put("date_processed", dateProcessed);
            jsonMessage.put("no_of_records_in_the_file", totalRecords);
            jsonMessage.put("no_of_records_processed", processedRecords);
            jsonMessage.put("no_of_records_failed", failedRecords);

            KafkaSerializationSchema<String> kafkaSerializationSchema = KafkaRecordSerializationSchema
                    .builder()
                    .setTopic(auditTopic)
                    .setValueSerializationSchema(new SimpleStringSchema())
                    .build();

            KafkaSink<String> sink = KafkaSink.<String>builder()
                    .setBootstrapServers(bootstrapServer)
                    .setRecordSerializer(kafkaSerializationSchema)
                    .setDeliveryGuarantee(DeliveryGuarantee.AT_LEAST_ONCE)
                    .build();

            DataStream<String> messageStream = env.fromElements(jsonMessage.toString());
            messageStream.sinkTo(sink);

            env.execute("Publish to Audit Queue Job");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
