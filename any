package org.vdsi.space.collections.customauditengine.cucumber.glue;

import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import org.junit.jupiter.api.Assertions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.web.client.RestTemplate;
import org.vdsi.space.collections.customauditengine.controllers.S3Controller;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class S3ControllerStepDefinitions {

    private RestTemplate restTemplate = new RestTemplate();

    private MockHttpServletResponse response;



    private static String S3_DOWNLOAD = "/s3download";

    @Given("^an S3 bucket (.*) with file key (.*)$")
    public void an_s3_bucket_with_file_key(String bucketName, String key) {
        S3Object s3Object = new S3Object();
        ObjectMetadata objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(5);
        s3Object.setObjectMetadata(objectMetadata);
        s3Object.setObjectContent(new S3ObjectInputStream(new ByteArrayInputStream("test".getBytes()), null));
    }

    @Given("^the S3 service will throw an IOException$")
    public void the_s3_service_will_throw_an_ioexception() throws IOException {
        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read()).thenThrow(new IOException("Test IOException"));
        S3Object s3Object = new S3Object();
        s3Object.setObjectContent(inputStream);
    }

    @Given("^the file will be read partially$")
    public void the_file_will_be_read_partially() throws IOException {
        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read()).thenReturn((int) 't').thenReturn((int) 'e').thenReturn(-1);
        S3Object s3Object = new S3Object();
        s3Object.setObjectContent(inputStream);
    }

    @Then("^the file is downloaded$")
    public void the_file_is_downloaded() throws IOException {
//        response = new MockHttpServletResponse();
//        s3Controller.downloadFile("bucket-name", "key/file.txt", response);

        // TODO: remove the hard coded url prefix
        String url = "http://localhost:8082" + S3_DOWNLOAD +"?bucketName=bucket-name&key=key/file.txt";
        restTemplate.exchange(url, HttpMethod.GET, null, Void.class);
//        assertTrue(collectionAudits.isEmpty());
    }

    @Then("^the response should contain the file content (.*)$")
    public void the_response_should_contain_the_file_content(String content) throws IOException {
        Assertions.assertEquals(content, response.getContentAsString());
    }

    @Then("^the response header (.*) should be (.*)$")
    public void the_response_header_should_be(String headerName, String headerValue) {
        Assertions.assertEquals(headerValue, response.getHeader(headerName));
    }

    @Then("^an IOException should be thrown$")
    public void an_ioexception_should_be_thrown() {
        Assertions.assertThrows(IOException.class, () -> {
            // TODO: need to use rest template to invoke the api endpoint /s3download and pass the request params
//            s3Controller.downloadFile("bucket-name", "key/file.txt", response);
        });
    }
}
