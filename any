public boolean retrieveData(SpaceCollector sp, String dateReceived, String auditTopic) throws Exception {
    LOGGER.info("Entered SSH service");
    String sshUsername = sp.getUserName();
    String sshHost = sp.getUrl();
    String sshPassword = sp.getPassword();
    int port = sp.getPort().intValue();

    JSch jsch = getJsch(sshHost, sshPassword);

    Session session = getSession(sshUsername, sshHost, sshPassword, port, jsch);
    session.connect();

    ChannelSftp channelSftp = null;
    try {
        String remoteDirectory = FileUtil.getDirectory(sp.getInputFilePath());
        String localDirectory = FileUtil.getDirectory(sp.getOutputFilePath());
        LOGGER.info("remoteDirectory : " + remoteDirectory + " localDirectory : " + localDirectory);

        channelSftp = getChannelSftp(session, remoteDirectory);

        // Recursively retrieve and process files and directories
        retrieveAndProcessDirectory(sp, dateReceived, auditTopic, remoteDirectory, localDirectory, channelSftp);
    } finally {
        if (channelSftp != null) {
            channelSftp.disconnect();
        }
        if (session != null) {
            session.disconnect();
        }
    }
    return true;
}

private void retrieveAndProcessDirectory(SpaceCollector sp, String dateReceived, String auditTopic,
                                         String remoteDirectory, String localDirectory, ChannelSftp channelSftp) throws Exception {
    Vector<ChannelSftp.LsEntry> files = channelSftp.ls(remoteDirectory);

    for (ChannelSftp.LsEntry file : files) {
        if (!file.getAttrs().isDir()) {
            String remoteFilePath = remoteDirectory + "/" + file.getFilename();
            String localFilePath = localDirectory + "/" + file.getFilename();

            // Download file
            try (InputStream inputStream = channelSftp.get(remoteFilePath);
                 OutputStream outputStream = new FileOutputStream(localFilePath)) {
                FileUtil.downloadFile(outputStream, inputStream, localFilePath);
            }

            // Process the downloaded file
            processFile(sp, dateReceived, auditTopic, localFilePath, localDirectory, channelSftp);
        } else {
            if (!".".equals(file.getFilename()) && !"..".equals(file.getFilename())) {
                LOGGER.info("DIR found : " + file.getFilename());
                String subRemoteDirectory = remoteDirectory + "/" + file.getFilename();
                String subLocalDirectory = localDirectory + "/" + file.getFilename();
                FileUtil.createDirectoryIfNotExists(subLocalDirectory);
                retrieveAndProcessDirectory(sp, dateReceived, auditTopic, subRemoteDirectory, subLocalDirectory, channelSftp);
            }
        }
    }
}

private void processFile(SpaceCollector sp, String dateReceived, String auditTopic,
                         String localFilePath, String localDirectory, ChannelSftp channelSftp) throws Exception {
    if (ZipUtil.isZipFile(localFilePath)) {
        String extractedDir = localDirectory + "/" + FileUtil.getFileNameWithoutExtn(localFilePath);
        FileUtil.createDirectoryIfNotExists(extractedDir);
        ZipUtil.extract(localFilePath, extractedDir);

        // Process extracted files
        List<String> extractedFiles = FileUtil.readFilesInDirectory(extractedDir);
        for (String extractedFile : extractedFiles) {
            processFile(sp, dateReceived, auditTopic, extractedFile, extractedDir, channelSftp);
        }
    } else {
        // Push non-zip file to S3
        Path insideFilePath = Paths.get(localFilePath);
        Path folderPath = Paths.get(sp.getOutputFilePath()).relativize(insideFilePath.getParent());
        String unixBasedPath = folderPath.toString().replace("\\", "/");
        String key = String.format("%s/%s/%s/%s/%s",
                ProfileCheckConfig.activeProfile,
                sp.getFileType(),
                sp.getUrl(),
                dateUtil.getDateInMMddyyyy(),
                !StringUtils.isBlank(unixBasedPath)
                        ? (unixBasedPath.toString() + "/" + insideFilePath.getFileName())
                        : insideFilePath.getFileName());

        LOGGER.info("Filename: " + localFilePath + " Key: " + key);
        System.out.println("**************************");
        System.out.println("Filename: " + localFilePath);
        System.out.println("Key: " + key);
        System.out.println("folderPath: " + folderPath);
        System.out.println("Inside File Path: " + insideFilePath);
        System.out.println("**************************");
        s3Service.pushToS3(localFilePath, key);
        CollectionAudit audit = createAuditObject(sp, key, JobStatus.COLLECTION_SUCCESSFUL.toString(), "");
        kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit), "", auditTopic);
    }
}

private JSch getJsch(String sshHost, String sshPassword) throws JSchException {
    jschFactory.createJSch();
    if (sshPassword.equals("")) {
        jsch.addIdentity("/prod/eclapp/lib/id_rsa_decoded");
    }
    if (sshHost.equals("localhost")) {
        String knownHostsFile = System.getProperty("user.home") + SSH_KNOWN_HOSTS;
        jsch.setKnownHosts(knownHostsFile);
    }
    return jsch;
}

private Session getSession(String sshUsername, String sshHost, String sshPassword, int port, JSch jsch) throws JSchException {
    Session session = jsch.getSession(sshUsername, sshHost, port);
    session.setConfig("StrictHostKeyChecking", "no");
    if (!sshPassword.isEmpty()) {
        session.setPassword(sshPassword);
    }
    return session;
}

private ChannelSftp getChannelSftp(Session session, String remoteDirectory) throws JSchException, SftpException {
    ChannelSftp channelSftp = (ChannelSftp) session.openChannel("sftp");
    channelSftp.connect();
    channelSftp.cd(remoteDirectory);
    return channelSftp;
}

private CollectionAudit createAuditObject(SpaceCollector sp, String auditInputFilePath, String auditJobStatus, String auditExceptions) {
    CollectionAudit audit = getCollectionAudit(sp);
    audit.setInputFilePath(auditInputFilePath);
    audit.setJobStatus(auditJobStatus);
    audit.setExceptions(auditExceptions);
    return audit;
}

private CollectionAudit getCollectionAudit(SpaceCollector sp) {
    CollectionAudit audit = new CollectionAudit();
    audit.setId(UUID.randomUUID().toString());
    audit.setDateProcessed(collectorUtil.localDateToString(LocalDateTime.now()));
    audit.setFileType(sp.getFileType());
    audit.setDelimiters(sp.getDelimiter());
    audit.setUrl(sp.getUrl());
    audit.setPort(Integer.valueOf(sp.getPort().toString()));
    audit.setCollectorId(sp.getId());
    audit.setProcessType(ProcessType.Collector);
    return audit;
}
