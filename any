    filesList.addAll(FileUtil.readFilesInDirectory(localDirectory + "/" + fileNameWithoutExtn));
        } else {
            filesList.add(outputFile);
        }

        for (String fileName : filesList) {
            Path insideFilePath = Paths.get(fileName);
            Path folderPath = Paths.get(sp.getOutputFilePath()).relativize(insideFilePath.getParent());

            String unixBasedPath = folderPath.toString().replace("\\", "/");

            String key = String.format("%s/%s/%s/%s/%s",
                    ProfileCheckConfig.activeProfile,
                    sp.getFileType(),
                    sp.getUrl(),
                    dateUtil.getDateInMMddyyyy(),
                    !StringUtils.isBlank(unixBasedPath)
                            ? (unixBasedPath.toString() + "/" + insideFilePath.getFileName())
                            : insideFilePath.getFileName());
            System.out.println("**************************");
            System.out.println("Filename: " + fileName);
            System.out.println("Key: " + key);
            System.out.println("folderPath: " + folderPath);
            System.out.println("Inside File Path: " + insideFilePath);
            System.out.println("**************************");

            s3Service.pushToS3(fileName, key);

            CollectionAudit audit = createAuditObject(sp,
                    key, JobStatus.COLLECTION_SUCCESSFUL.toString(), "");
            kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit),
                    "", auditTopic);

            // Check if the file is an archive and process it further
            if (ZipUtil.isZipFile(fileName)) {
                String nestedFileNameWithoutExtn = FileUtil.getFileNameWithoutExtn(fileName);
                FileUtil.createDirectoryIfNotExists(localDirectory + "/" + nestedFileNameWithoutExtn);

                ZipUtil.extract(fileName, localDirectory + "/" + nestedFileNameWithoutExtn);
                List<String> nestedFilesList = FileUtil.readFilesInDirectory(localDirectory + "/" + nestedFileNameWithoutExtn);

                for (String nestedFile : nestedFilesList) {
                    processDownloadedFile(sp, dateReceived, auditTopic, nestedFile, localDirectory);
                }
            }
        }
