import java.io.*;
import java.nio.file.*;
import java.util.zip.*;
import org.apache.commons.compress.archivers.tar.*;
import org.apache.commons.compress.compressors.gzip.*;

public class UnzipExample {

    public static void main(String[] args) {
        String filePath = "path/to/your/file"; // Change this to your actual file path
        String destDir = "path/to/destination/folder"; // Change this to your actual destination folder

        try {
            extract(filePath, destDir);
            System.out.println("File extracted successfully.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void extract(String filePath, String destDir) throws IOException {
        String fileExtension = getFileExtension(filePath);

        if ("zip".equalsIgnoreCase(fileExtension)) {
            unzip(filePath, destDir);
        } else if ("tar".equalsIgnoreCase(fileExtension)) {
            untar(filePath, destDir);
        } else if ("gz".equalsIgnoreCase(fileExtension)) {
            ungzip(filePath, destDir);
        } else {
            System.err.println("Unsupported file type: " + fileExtension);
        }
    }

    private static String getFileExtension(String filePath) {
        return filePath.substring(filePath.lastIndexOf('.') + 1);
    }

    private static void unzip(String zipFilePath, String destDir) throws IOException {
        byte[] buffer = new byte[1024];

        try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(zipFilePath))) {
            ZipEntry entry = zipInputStream.getNextEntry();

            while (entry != null) {
                String fileName = entry.getName();
                File newFile = new File(destDir + File.separator + fileName);

                // Create directories if necessary
                new File(newFile.getParent()).mkdirs();

                if (!entry.isDirectory()) {
                    try (FileOutputStream fos = new FileOutputStream(newFile)) {
                        int len;
                        while ((len = zipInputStream.read(buffer)) > 0) {
                            fos.write(buffer, 0, len);
                        }
                    }
                } else {
                    // If the entry is a directory, create it
                    newFile.mkdir();
                }

                zipInputStream.closeEntry();
                entry = zipInputStream.getNextEntry();
            }
        }
    }

    private static void untar(String tarFilePath, String destDir) throws IOException {
        try (TarArchiveInputStream tarInput = new TarArchiveInputStream(new FileInputStream(tarFilePath))) {
            TarArchiveEntry entry;
            while ((entry = tarInput.getNextTarEntry()) != null) {
                File destPath = new File(destDir, entry.getName());
                if (entry.isDirectory()) {
                    destPath.mkdirs();
                } else {
                    destPath.getParentFile().mkdirs();
                    try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destPath))) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = tarInput.read(buffer)) != -1) {
                            bos.write(buffer, 0, len);
                        }
                    }
                }
            }
        }
    }

    private static void ungzip(String gzFilePath, String destDir) throws IOException {
        try (GzipCompressorInputStream gzIn = new GzipCompressorInputStream(new FileInputStream(gzFilePath))) {
            String outFilePath = destDir + File.separator + new File(gzFilePath).getName().replace(".gz", "");
            try (FileOutputStream out = new FileOutputStream(outFilePath)) {
                byte[] buffer = new byte[1024];
                int len;
                while ((len = gzIn.read(buffer)) > 0) {
                    out.write(buffer, 0, len);
                }
            }
        }
    }
}
