 for (ChannelSftp.LsEntry file : files) {
                if (!file.getAttrs().isDir()) {
                    String filePath = remoteDirectory + file.getFilename(); // Use absolute file path
                    retrieveAttributesOfRemoteFile(channelSftp, file, remoteDirectory, sp.getInputFilePath());

                    String status = auditStatusMap.get(filePath);
                    if (status == null || "COLLECTION_FAILED".equals(status)) {
                        try {
                            String outputFile = localDirectory + file.getFilename();
                            LOGGER.info("in filePath : " + filePath + " out filePath : " + outputFile);

                            FileUtil.downloadFile(outputStreamCreator.create(outputFile), channelSftp.get(file.getFilename()),
                                    filePath, outputFile, sp.getOutputFilePath());

                            List<String> filesList = new ArrayList<>();
                            if (ZipUtil.isZipFile(outputFile)) {
                                String fileNameWithoutExtn = FileUtil.getFileNameWithoutExtn(filePath);
                                FileUtil.createDirectoryIfNotExists(sp.getOutputFilePath() + "/"+fileNameWithoutExtn);


                                ZipUtil.extract(outputFile, sp.getOutputFilePath() + "/"+fileNameWithoutExtn);
                                filesList.addAll(FileUtil.readFilesInDirectory(sp.getOutputFilePath() + "/"+fileNameWithoutExtn));
                            } else {
                                filesList.add(outputFile);
                            }

                            for (String fileName : filesList) {

                                String key = String.format("%s/%s/%s/%s/%s", ProfileCheckConfig.activeProfile,
                                        sp.getFileType(), sshHost,
                                        dateUtil.getDateInMMddyyyy(),
                                        fileName.substring(fileName.lastIndexOf("./") + 1));
                                s3Service.pushToS3(fileName, key);

                                System.out.println("**************************");
                                System.out.println("Filename: "+fileName);
                                System.out.println("Key: "+key);
                                System.out.println("**************************");
                                CollectionAudit audit = createAuditObject(sp,
                                        key, JobStatus.COLLECTION_SUCCESSFUL.toString(), "");
                                kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit),
                                        "", auditTopic);
                            }
                        } catch (Exception e) {
                            CollectionAudit audit = createAuditObject(sp,
                                    filePath, JobStatus.COLLECTION_FAILED.toString(), e.getMessage());
                            kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit), "",
                                    auditTopic);
                            LOGGER.error("Error on retrieveData {}", e);
                        }
                    }
                }else{
                    LOGGER.info("DIR found : " + file.getFilename());
                }
            }
        } finally {
            if (channelSftp != null) {
                channelSftp.disconnect();
            }
            if (session != null) {
                session.disconnect();
            }
        }
        return true;
    }
