package org.vdsi.space.collections.customsshcollector.util;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class ZipUtil {

    public static boolean isZipFile(String filePath) {
        String extn = ZipUtil.getFileExtension(filePath);

        String[] array = {"zip", "tar", "gz"};
        List<String> list = Arrays.asList(array);

        return list.contains(extn) ? true : false;
    }

    public static void extract(String filePath, String destDir) throws IOException {
        String fileExtension = getFileExtension(filePath);
        /*if ("zip".equalsIgnoreCase(fileExtension)) {
            unzip(filePath, destDir);
        } else*/ if ("tar".equalsIgnoreCase(fileExtension)) {
            untar(filePath, destDir);
        } else if ("gz".equalsIgnoreCase(fileExtension)) {
            untarAndUngzip(filePath, destDir);
        } else {
            System.err.println("Unsupported file type: " + fileExtension);
            throw new IOException("Unsupported file type: " + fileExtension);
        }
    }

    private static String getFileExtension(String filePath) {
        return filePath.substring(filePath.lastIndexOf('.') + 1);
    }



    public static void untar(String tarFilePath, String destDir) throws IOException {
        try (TarArchiveInputStream tarInput = new TarArchiveInputStream(new FileInputStream(tarFilePath))) {
            TarArchiveEntry entry;
            while ((entry = tarInput.getNextTarEntry()) != null) {
                File destPath = new File(destDir, entry.getName());
                if (entry.isDirectory()) {
                    destPath.mkdirs();
                } else {
                    destPath.getParentFile().mkdirs();
                    try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destPath))) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = tarInput.read(buffer)) != -1) {
                            bos.write(buffer, 0, len);
                        }
                    }
                }
            }
        }
    }

    public static void untarAndUngzip(String tarGzFilePath, String destDir) throws IOException {
        try (TarArchiveInputStream tarInput = new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(tarGzFilePath)))) {
            TarArchiveEntry entry;
            while ((entry = tarInput.getNextTarEntry()) != null) {
                File destPath = new File(destDir, entry.getName());
                if (entry.isDirectory()) {
                    destPath.mkdirs();
                } else {
                    destPath.getParentFile().mkdirs();
                    try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destPath))) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = tarInput.read(buffer)) != -1) {
                            bos.write(buffer, 0, len);
                        }
                    }
                }
            }
        }
    }
}


Give me the test validation steps by using this feature file and above is the class:

here the feature file:

Feature: ZipUtil Extraction Functionality

  Scenario: Check if a file is a valid zip file
    Given a file path "test.zip"
    When the isZipFile method is called
    Then it should return true

  Scenario: Check if a file is a valid tar file
    Given a file path "test.tar"
    When the isZipFile method is called
    Then it should return true

  Scenario: Check if a file is a valid gzipped tar file
    Given a file path "test.tar.gz"
    When the isZipFile method is called
    Then it should return true

  Scenario: Extract contents of a tar file
    Given a tar file "test.tar" and a destination directory "output"
    When the extract method is called
    Then the files from the tar file should be extracted to the destination directory

  Scenario: Extract contents of a gzipped tar file
    Given a gzipped tar file "test.tar.gz" and a destination directory "output"
    When the extract method is called
    Then the files from the gzipped tar file should be extracted to the destination directory

  Scenario: Attempt to extract an unsupported file type
    Given a file path "test.xyz"
    When the extract method is called
    Then it should throw an IOException with a message indicating unsupported file type
