@Test
public void testRetrieveAttributesWhenFileTypeIsZipThenSuccess() throws Exception {
    // Setup SpaceCollector
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setUrl("localhost");
    spaceCollector.setPort(22);
    spaceCollector.setUserName("username");
    spaceCollector.setPassword("password");
    spaceCollector.setInputFilePath("/path/to/input");
    spaceCollector.setOutputFilePath("/path/to/output");

    // Mock the findLatestByFilePaths() method to return two records
    List<CollectionAudit> audits = new ArrayList<>();
    for (String fileName : new String[]{"/path/to/input/Sample1.tar.gz"}) {
        CollectionAudit audit = mock(CollectionAudit.class);
        when(audit.getInputFilePath()).thenReturn(fileName);
        when(audit.getJobStatus()).thenReturn(fileName.equals("/path/to/input/Sample1.tar.gz") ? "COLLECTION_FAILED" : "COLLECTION_SUCCESS");
        audits.add(audit);
    }
    doReturn(audits).when(collectionAuditRepository).findLatestByFilePaths(anyList());

    // Mock the ls() method to return files within the last 24 hours
    long currentTimeMillis = System.currentTimeMillis();
    long timeWithin24Hours = currentTimeMillis / 1000 - 3600; // Mock time within the last hour

    Vector<ChannelSftp.LsEntry> files = new Vector<>();
    for (String fileName : new String[]{"Sample1.tar.gz"}) {
        ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
        SftpATTRS attrs = mock(SftpATTRS.class);
        when(file.getFilename()).thenReturn(fileName);
        when(file.getAttrs()).thenReturn(attrs);
        when(attrs.isDir()).thenReturn(false);
        when(attrs.getMTime()).thenReturn((int) timeWithin24Hours); // Set modification time within the last hour
        files.add(file);
    }
    when(channelSftp.ls(anyString())).thenReturn(files);

    // Mock the outputStreamCreator.create method
    OutputStream mockOutputStream = mock(OutputStream.class);
    when(outputStreamCreator.create(anyString())).thenReturn(mockOutputStream);

    // Mock the channelSftp.get method
    InputStream mockInputStream = mock(InputStream.class);
    when(channelSftp.get(anyString())).thenReturn(mockInputStream);

    // Mock the behavior of the InputStream and OutputStream
    when(mockInputStream.read(ArgumentMatchers.any(byte[].class))).thenReturn(-1); // Simulate end of stream
    doNothing().when(mockOutputStream).close();
    doNothing().when(mockInputStream).close();

    // Invoke the method under test
    boolean result = sshService.retrieveData(spaceCollector, collectorUtil.getDateAsString(new Date()), "3459-DEV-COLLECTION-AUDIT-QUEUE");

    // Verify that get() method is called as expected
    verify(channelSftp, times(1)).get(anyString());
}




@Test
public void testRetrieveData_FileRetrievalFailureForSpecificFile() throws Exception {
    long currentTimeMillis = System.currentTimeMillis();
    long timeWithin24Hours = currentTimeMillis / 1000 - 3600; // Mock time within the last hour

    InputStream mockInputStream = mock(InputStream.class);
    when(channelSftp.get(anyString())).thenReturn(mockInputStream);
    when(channelSftp.get("/path/to/input/Sample2.csv")).thenThrow(new SftpException(0, "file retrieval failed"));

    OutputStream mockOutputStream = mock(OutputStream.class);
    when(outputStreamCreator.create(anyString())).thenReturn(mockOutputStream);

    when(mockInputStream.read(ArgumentMatchers.any(byte[].class))).thenReturn(-1); // Simulate end of stream
    doNothing().when(mockOutputStream).close();
    doNothing().when(mockInputStream).close();

    Vector<ChannelSftp.LsEntry> files = new Vector<>();
    for (String fileName : new String[]{"Sample1.csv", "Sample2.csv", "Sample3.csv"}) {
        ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
        SftpATTRS attrs = mock(SftpATTRS.class);
        when(file.getFilename()).thenReturn(fileName);
        when(file.getAttrs()).thenReturn(attrs);
        when(attrs.isDir()).thenReturn(false);
        when(attrs.getMTime()).thenReturn((int) timeWithin24Hours); // Set modification time within the last hour
        files.add(file);
    }
    when(channelSftp.ls(anyString())).thenReturn(files);

    List<CollectionAudit> audits = new ArrayList<>();
    for (String fileName : new String[]{"/path/to/input/Sample1.csv", "/path/to/input/Sample3.csv"}) {
        CollectionAudit audit = mock(CollectionAudit.class);
        when(audit.getInputFilePath()).thenReturn(fileName);
        when(audit.getJobStatus()).thenReturn(fileName.equals("/path/to/input/Sample1.csv") ? "COLLECTION_FAILED" : "COLLECTION_SUCCESS");
        audits.add(audit);
    }
    doReturn(audits).when(collectionAuditRepository).findLatestByFilePaths(anyList());

    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setUrl("localhost");
    spaceCollector.setPort(22);
    spaceCollector.setUserName("username");
    spaceCollector.setPassword("password");
    spaceCollector.setInputFilePath("/path/to/input");
    spaceCollector.setOutputFilePath("/path/to/output");

    boolean result = sshService.retrieveData(spaceCollector, collectorUtil.getDateAsString(new Date()), "3459-DEV-COLLECTION-AUDIT-QUEUE");

    verify(channelSftp, times(3)).get(anyString());
}



@Test
public void testRetrieveData_Success() throws Exception {
    // Mock the timestamp for the last 24 hours
    long currentTimeMillis = System.currentTimeMillis();
    long timeWithin24Hours = currentTimeMillis / 1000 - 3600; // Mock time within the last hour

    when(kafkaProducerService.writeMessage(Mockito.any(), anyString(), anyString())).thenReturn(true);

    InputStream mockInputStream = mock(InputStream.class);
    when(channelSftp.get(anyString())).thenReturn(mockInputStream);

    OutputStream mockOutputStream = mock(OutputStream.class);
    when(outputStreamCreator.create(anyString())).thenReturn(mockOutputStream);

    when(mockInputStream.read(ArgumentMatchers.any(byte[].class))).thenReturn(-1); // Simulate end of stream
    doNothing().when(mockOutputStream).close();
    doNothing().when(mockInputStream).close();

    Vector<ChannelSftp.LsEntry> files = new Vector<>();
    for (String fileName : new String[]{"Sample1.csv", "Sample2.csv", "Sample3.csv"}) {
        ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
        SftpATTRS attrs = mock(SftpATTRS.class);
        when(file.getFilename()).thenReturn(fileName);
        when(file.getAttrs()).thenReturn(attrs);
        when(attrs.isDir()).thenReturn(false);
        when(attrs.getMTime()).thenReturn((int) timeWithin24Hours); // Set modification time within the last hour
        files.add(file);
    }
    when(channelSftp.ls(anyString())).thenReturn(files);

    List<CollectionAudit> audits = new ArrayList<>();
    for (String fileName : new String[]{"/path/to/input/Sample1.csv", "/path/to/input/Sample3.csv"}) {
        CollectionAudit audit = mock(CollectionAudit.class);
        when(audit.getInputFilePath()).thenReturn(fileName);
        when(audit.getJobStatus()).thenReturn(fileName.equals("/path/to/input/Sample1.csv") ? "COLLECTION_FAILED" : "COLLECTION_SUCCESS");
        audits.add(audit);
    }
    doReturn(audits).when(collectionAuditRepository).findLatestByFilePaths(anyList());

    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setUrl("localhost");
    spaceCollector.setPort(22);
    spaceCollector.setUserName("username");
    spaceCollector.setPassword("password");
    spaceCollector.setInputFilePath("/path/to/input");
    spaceCollector.setOutputFilePath("/path/to/output");

    when(collectorUtil.getDateAsString(Mockito.any())).thenReturn("2021-01-01");

    boolean result = sshService.retrieveData(spaceCollector, collectorUtil.getDateAsString(new Date()), "3459-DEV-COLLECTION-AUDIT-QUEUE");

    verify(channelSftp, times(3)).get(anyString());
}
