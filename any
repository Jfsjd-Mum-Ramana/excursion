import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.AmazonS3Exception;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.mockito.Mockito;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;

public class S3ControllerSteps {

    private AmazonS3 s3Client;
    private MockHttpServletResponse response;
    private S3Controller s3Controller;

    @Given("the S3 bucket named {string} contains a file with key {string}")
    public void the_s3_bucket_contains_a_file(String bucketName, String key) throws IOException {
        s3Client = Mockito.mock(AmazonS3.class);
        S3Object s3Object = Mockito.mock(S3Object.class);
        S3ObjectInputStream inputStream = new S3ObjectInputStream(new ByteArrayInputStream("file content".getBytes()), null);
        ObjectMetadata metadata = new ObjectMetadata();
        metadata.setContentLength("file content".length());

        when(s3Client.getObject(bucketName, key)).thenReturn(s3Object);
        when(s3Object.getObjectContent()).thenReturn(inputStream);
        when(s3Object.getObjectMetadata()).thenReturn(metadata);

        response = new MockHttpServletResponse();
        s3Controller = new S3Controller(s3Client);
    }

    @Given("the S3 bucket named {string} does not contain any file with key {string}")
    public void the_s3_bucket_does_not_contain_file(String bucketName, String key) {
        s3Client = Mockito.mock(AmazonS3.class);
        when(s3Client.getObject(bucketName, key)).thenThrow(new AmazonS3Exception("The specified key does not exist."));

        response = new MockHttpServletResponse();
        s3Controller = new S3Controller(s3Client);
    }

    @Given("the S3 bucket named {string} does not exist")
    public void the_s3_bucket_does_not_exist(String bucketName) {
        s3Client = Mockito.mock(AmazonS3.class);
        when(s3Client.getObject(bucketName, anyString())).thenThrow(new AmazonS3Exception("The specified bucket does not exist."));

        response = new MockHttpServletResponse();
        s3Controller = new S3Controller(s3Client);
    }

    @Given("the S3 bucket named {string} contains files but not the specified key {string}")
    public void the_s3_bucket_contains_files_but_not_the_specified_key(String bucketName, String key) {
        s3Client = Mockito.mock(AmazonS3.class);
        when(s3Client.getObject(bucketName, key)).thenThrow(new AmazonS3Exception("The specified key does not exist."));

        response = new MockHttpServletResponse();
        s3Controller = new S3Controller(s3Client);
    }

    @When("a user requests to download the file with bucket name {string} and key {string}")
    public void a_user_requests_to_download_file(String bucketName, String key) {
        try {
            s3Controller.downloadFile(bucketName, key, response);
        } catch (IOException e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }

    @Then("the file should be downloaded successfully with the correct name and content")
    public void the_file_should_be_downloaded_successfully() {
        assertEquals("attachment; filename=test-file.txt", response.getHeader("Content-Disposition"));
        assertEquals("11", response.getHeader("Content-Length"));
        assertEquals("file content", response.getContentAsString());
    }

    @Then("the system should respond with an appropriate error message")
    public void the_system_should_respond_with_error() {
        assertEquals(404, response.getStatus());
    }
}
