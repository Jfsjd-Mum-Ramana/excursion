public boolean retrieveData(SpaceCollector sp, String dateReceived, String auditTopic) throws Exception {
    LOGGER.info("Entered SSH service");
    String sshUsername = sp.getUserName();
    String sshHost = sp.getUrl();
    String sshPassword = sp.getPassword();
    int port = sp.getPort().intValue();

    JSch jsch = getJsch(sshHost, sshPassword);

    Session session = getSession(sshUsername, sshHost, sshPassword, port, jsch);
    session.connect();

    ChannelSftp channelSftp = null;
    try {
        String remoteDirectory = FileUtil.getDirectory(sp.getInputFilePath());
        String localDirectory = FileUtil.getDirectory(sp.getOutputFilePath());
        LOGGER.info("remoteDirectory : " + remoteDirectory + " localDirectory : " + localDirectory);

        channelSftp = getChannelSftp(session, remoteDirectory);

        // Recursively retrieve and process files and directories
        retrieveAndProcessDirectory(sp, dateReceived, auditTopic, remoteDirectory, localDirectory, channelSftp);
    } finally {
        if (channelSftp != null) {
            channelSftp.disconnect();
        }
        if (session != null) {
            session.disconnect();
        }
    }
    return true;
}

private void retrieveAndProcessDirectory(SpaceCollector sp, String dateReceived, String auditTopic,
                                         String remoteDirectory, String localDirectory, ChannelSftp channelSftp) throws Exception {
    Vector<ChannelSftp.LsEntry> files = channelSftp.ls(remoteDirectory);

    Map<String, String> auditStatusMap = getAuditStatusMap(files, remoteDirectory);

    for (ChannelSftp.LsEntry file : files) {
        if (!file.getAttrs().isDir()) {
            String filePath = remoteDirectory + "/" + file.getFilename(); // Use absolute file path
            retrieveAttributesOfRemoteFile(channelSftp, file, remoteDirectory, sp.getInputFilePath());

            String status = auditStatusMap.get(filePath);
            if (status == null || "COLLECTION_FAILED".equals(status)) {
                try {
                    String outputFile = localDirectory + "/" + file.getFilename();
                    LOGGER.info("in filePath : " + filePath + " out filePath : " + outputFile);

                    FileUtil.downloadFile(outputStreamCreator.create(outputFile), channelSftp.get(file.getFilename()),
                            filePath, outputFile, sp.getOutputFilePath());

                    List<String> filesList = new ArrayList<>();
                    if (ZipUtil.isZipFile(outputFile)) {
                        String fileNameWithoutExtn = FileUtil.getFileNameWithoutExtn(filePath);
                        FileUtil.createDirectoryIfNotExists(sp.getOutputFilePath() + "/" + fileNameWithoutExtn);

                        ZipUtil.extract(outputFile, sp.getOutputFilePath() + "/" + fileNameWithoutExtn);
                        filesList.addAll(FileUtil.readFilesInDirectory(sp.getOutputFilePath() + "/" + fileNameWithoutExtn));
                    } else {
                        filesList.add(outputFile);
                    }

                    for (String fileName : filesList) {
                        Path insideFilePath = Paths.get(fileName);
                        Path folderPath = Paths.get(sp.getOutputFilePath()).relativize(insideFilePath.getParent());

                        String unixBasedPath = folderPath.toString().replace("\\", "/");

                        String key = String.format("%s/%s/%s/%s/%s",
                                ProfileCheckConfig.activeProfile,
                                sp.getFileType(),
                                sp.getUrl(),
                                dateUtil.getDateInMMddyyyy(),
                                !StringUtils.isBlank(unixBasedPath)
                                        ? (unixBasedPath.toString() + "/" + insideFilePath.getFileName())
                                        : insideFilePath.getFileName());
                        System.out.println("**************************");
                        System.out.println("Filename: " + fileName);
                        System.out.println("Key: " + key);
                        System.out.println("folderPath: " + folderPath);
                        System.out.println("Inside File Path: " + insideFilePath);
                        System.out.println("**************************");

                        s3Service.pushToS3(fileName, key);

                        CollectionAudit audit = createAuditObject(sp,
                                key, JobStatus.COLLECTION_SUCCESSFUL.toString(), "");
                        kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit),
                                "", auditTopic);
                    }
                } catch (Exception e) {
                    CollectionAudit audit = createAuditObject(sp,
                            filePath, JobStatus.COLLECTION_FAILED.toString(), e.getMessage());
                    kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit), "",
                            auditTopic);
                    LOGGER.error("Error on retrieveData {}", e);
                }
            }
        } else {
            if (!".".equals(file.getFilename()) && !"..".equals(file.getFilename())) {
                LOGGER.info("DIR found : " + file.getFilename());
                String subRemoteDirectory = remoteDirectory + "/" + file.getFilename();
                String subLocalDirectory = localDirectory + "/" + file.getFilename();
                FileUtil.createDirectoryIfNotExists(subLocalDirectory);
                retrieveAndProcessDirectory(sp, dateReceived, auditTopic, subRemoteDirectory, subLocalDirectory, channelSftp);
            }
        }
    }
}

private JSch getJsch(String sshHost, String sshPassword) throws JSchException {
    jschFactory.createJSch();
    if (sshPassword.equals("")) {
        jsch.addIdentity("/prod/eclapp/lib/id_rsa_decoded");
    }
    if (sshHost.equals("localhost")) {
        String knownHostsFile = System.getProperty("user.home") + SSH_KNOWN_HOSTS;
        jsch.setKnownHosts(knownHostsFile);
    }
    return jsch;
}

private Session getSession(String sshUsername, String sshHost, String sshPassword, int port, JSch jsch) throws JSchException {
    Session session = jsch.getSession(sshUsername, sshHost, port);
    session.setConfig("StrictHostKeyChecking", "no");
    if (!sshPassword.isEmpty()) {
        session.setPassword(sshPassword);
    }
    return session;
}

private ChannelSftp getChannelSftp(Session session, String remoteDirectory) throws JSchException, SftpException {
    ChannelSftp channelSftp = (ChannelSftp) session.openChannel("sftp");
    channelSftp.connect();
    channelSftp.cd(remoteDirectory);
    return channelSftp;
}

