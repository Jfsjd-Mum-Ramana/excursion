package org.vdsi.space.collections.customauditengine.junits.controllers;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockHttpServletResponse;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import org.vdsi.space.collections.customauditengine.controllers.S3Controller;
@ExtendWith(MockitoExtension.class)
public class S3ControllerTest {

    @Mock
    private AmazonS3 s3Client;

    @InjectMocks
    private S3Controller s3Controller;

    private S3Object s3Object;
    private ObjectMetadata objectMetadata;

    @BeforeEach
    void setUp() {
        s3Object = new S3Object();
        objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(5);
        s3Object.setObjectMetadata(objectMetadata);
        s3Object.setObjectContent(new S3ObjectInputStream(new ByteArrayInputStream("test".getBytes()), null));
    }

    @Test
    void testDownloadFile() throws IOException {
        when(s3Client.getObject(anyString(), anyString())).thenReturn(s3Object);

        MockHttpServletResponse response = new MockHttpServletResponse();
        s3Controller.downloadFile("bucket-name", "key/file.txt", response);

        assertEquals("attachment; filename=file.txt", response.getHeader("Content-Disposition"));
        assertEquals("5", response.getHeader("Content-Length"));
        assertEquals("test", response.getContentAsString());
    }

    @Test
    void testDownloadFileIOException() throws IOException {
        when(s3Client.getObject(anyString(), anyString())).thenReturn(s3Object);

        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException("Test IOException"));
        s3Object.setObjectContent(inputStream);

        MockHttpServletResponse response = new MockHttpServletResponse();
        assertThrows(IOException.class, () -> {
            s3Controller.downloadFile("bucket-name", "key/file.txt", response);
        });
    }

    @Test
    void testDownloadFilePartialRead() throws IOException {
        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read(any(byte[].class), anyInt(), anyInt()))
                .thenReturn(2)
                .thenReturn(2)
                .thenReturn(-1);
        s3Object.setObjectContent(inputStream);
        when(s3Client.getObject(anyString(), anyString())).thenReturn(s3Object);

        MockHttpServletResponse response = new MockHttpServletResponse();
        s3Controller.downloadFile("bucket-name", "key/file.txt", response);

        verify(inputStream, times(3)).read(any(byte[].class), anyInt(), anyInt());
    }
}
