import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.io.ByteArrayInputStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(S3Controller.class)
public class S3ControllerSteps {

    @InjectMocks
    private S3Controller s3Controller;

    @MockBean
    private AmazonS3 s3Client;

    private MockMvc mockMvc;
    private MvcResult result;
    private String bucketName;
    private String key;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(s3Controller).build();
    }

    @Given("the S3 bucket name is {string}")
    public void the_S3_bucket_name_is(String bucketName) {
        this.bucketName = bucketName;
    }

    @Given("the S3 key is {string}")
    public void the_S3_key_is(String key) {
        this.key = key;
    }

    @When("I send a GET request to {string} with the bucket name and key")
    public void i_send_a_GET_request_to_with_the_bucket_name_and_key(String url) throws Exception {
        // Mock S3Object and its input stream
        String fileContent = "This is a test file.";
        S3Object s3Object = new S3Object();
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(fileContent.getBytes());
        S3ObjectInputStream s3ObjectInputStream = new S3ObjectInputStream(byteArrayInputStream, null);

        // Set object metadata
        ObjectMetadata metadata = new ObjectMetadata();
        metadata.setContentLength(fileContent.length());

        s3Object.setObjectContent(s3ObjectInputStream);
        s3Object.setObjectMetadata(metadata);

        // Mock the s3Client.getObject method
        when(s3Client.getObject(bucketName, key)).thenReturn(s3Object);

        result = mockMvc.perform(get(url)
                .param("bucketName", bucketName)
                .param("key", key))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Disposition", "attachment; filename=" + key.substring(key.lastIndexOf("/") + 1)))
                .andReturn();
    }

    @Then("the response status should be {int}")
    public void the_response_status_should_be(Integer status) {
        assertEquals(status.intValue(), result.getResponse().getStatus());
    }

    @Then("the response should have the header {string} with value {string}")
    public void the_response_should_have_the_header_with_value(String headerName, String headerValue) {
        assertEquals(headerValue, result.getResponse().getHeader(headerName));
    }

    @Then("the response should have a non-zero content length")
    public void the_response_should_have_a_non_zero_content_length() {
        long contentLength = result.getResponse().getContentLengthLong();
        assert(contentLength > 0);
    }

    @Then("the response content should match the content of {string}")
    public void the_response_content_should_match_the_content_of(String expectedContent) throws Exception {
        String responseContent = result.getResponse().getContentAsString();
        assertEquals(expectedContent, responseContent);
    }
}
