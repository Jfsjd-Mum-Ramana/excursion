import org.junit.Assert;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import java.io.File;
import java.io.IOException;

public class ZipUtilSteps {

    private String filePath;
    private String destDir;
    private boolean isZipFileResult;

    @Given("^a file path \"([^\"]*)\"$")
    public void a_file_path(String filePath) {
        this.filePath = filePath;
    }

    @Given("^a tar file \"([^\"]*)\" and a destination directory \"([^\"]*)\"$")
    public void a_tar_file_and_a_destination_directory(String filePath, String destDir) {
        this.filePath = filePath;
        this.destDir = destDir;
    }

    @Given("^a gzipped tar file \"([^\"]*)\" and a destination directory \"([^\"]*)\"$")
    public void a_gzipped_tar_file_and_a_destination_directory(String filePath, String destDir) {
        this.filePath = filePath;
        this.destDir = destDir;
    }

    @When("^the isZipFile method is called$")
    public void the_isZipFile_method_is_called() {
        isZipFileResult = ZipUtil.isZipFile(filePath);
    }

    @When("^the extract method is called$")
    public void the_extract_method_is_called() {
        try {
            ZipUtil.extract(filePath, destDir);
        } catch (IOException e) {
            // Handle exception
        }
    }

    @Then("^it should return true$")
    public void it_should_return_true() {
        Assert.assertTrue(isZipFileResult);
    }

    @Then("^the files from the tar file should be extracted to the destination directory$")
    public void the_files_from_the_tar_file_should_be_extracted_to_the_destination_directory() {
        File directory = new File(destDir);
        Assert.assertTrue(directory.exists() && directory.isDirectory());

        // Add more assertions to verify the extracted files if needed
    }

    @Then("^the files from the gzipped tar file should be extracted to the destination directory$")
    public void the_files_from_the_gzipped_tar_file_should_be_extracted_to_the_destination_directory() {
        File directory = new File(destDir);
        Assert.assertTrue(directory.exists() && directory.isDirectory());

        // Add more assertions to verify the extracted files if needed
    }

    @Then("^it should throw an IOException with a message indicating unsupported file type$")
    public void it_should_throw_an_IOException_with_a_message_indicating_unsupported_file_type() {
        try {
            ZipUtil.extract(filePath, destDir);
            // If no IOException is thrown, fail the test
            Assert.fail("Expected IOException was not thrown");
        } catch (IOException e) {
            // Verify the exception message
            Assert.assertEquals("Unsupported file type: xyz", e.getMessage());
        }
    }
}
