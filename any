package org.vdsi.space.collections.customauditengine.controllers;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import io.cucumber.java.Before;
import io.cucumber.java.en.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mock.web.MockHttpServletResponse;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;

public class S3ControllerStepDefinitions {

    @MockBean
    private AmazonS3 amazonS3;

    @Autowired
    private S3Controller s3Controller;

    private MockHttpServletResponse response;

    @Before
    public void setUp() {
        response = new MockHttpServletResponse();
    }

    @Given("an S3 bucket {string} with file key {string}")
    public void anS3BucketWithFileKey(String bucketName, String key) throws IOException {
        S3Object s3Object = new S3Object();
        ObjectMetadata objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(4); // Assuming content length is 4
        s3Object.setObjectMetadata(objectMetadata);
        s3Object.setObjectContent(new S3ObjectInputStream(new ByteArrayInputStream("test".getBytes()), null));

        // Mocking getObject with specific bucketName and key arguments
        when(amazonS3.getObject(any(), any())).thenAnswer(invocation -> {
            String invokedBucketName = invocation.getArgument(0);
            String invokedKey = invocation.getArgument(1);
            if (invokedBucketName.equals(bucketName) && invokedKey.equals(key)) {
                return s3Object;
            }
            return null; // or throw an exception for unexpected invocation
        });
    }

    @Given("the S3 service will throw an IOException")
    public void s3ServiceThrowsIOException() throws IOException {
        when(amazonS3.getObject(any(), any())).thenThrow(new IOException("Test IOException"));
    }

    @Given("the file will be read partially")
    public void fileReadPartially() throws IOException {
        S3Object s3Object = new S3Object();
        ObjectMetadata objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(4); // Assuming content length is 4

        S3ObjectInputStream inputStream = new S3ObjectInputStream(new ByteArrayInputStream("test".getBytes()), null);
        when(amazonS3.getObject(any(), any())).thenReturn(s3Object);
        when(s3Object.getObjectContent()).thenReturn(inputStream);
        // Return partial read
        when(inputStream.read()).thenReturn((int)'t').thenReturn((int)'e').thenReturn(-1);
    }

    @When("I request to download the file")
    public void requestToDownloadFile() throws IOException {
        s3Controller.downloadFile("test-bucket", "test-file", response);
    }

    @Then("the response should contain the file content {string}")
    public void responseContainsFileContent(String content) {
        String responseBody = response.getContentAsString();
        assert responseBody != null;
        assert responseBody.equals(content);
    }

    @Then("the response header {string} should be {string}")
    public void responseHeaderShouldBe(String headerName, String headerValue) {
        assert response.getHeader(headerName).equals(headerValue);
    }

    @Then("an IOException should be thrown")
    public void ioExceptionShouldBeThrown() {
        // IOException is expected, no need for assertion
    }
}
