import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.vdsi.space.collections.customauditengine.controllers.S3Controller;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(S3Controller.class)
public class S3ControllerStepDefinitions {

    private MockMvc mockMvc;
    private MvcResult result;

    @Given("a mocked resource ID")
    public void a_mocked_resource_id() {
        // No action needed for this step
    }

    @When("the user requests the resource data")
    public void the_user_requests_the_resource_data() throws Exception {
        // Simulate the user requesting resource data
        mockMvc = MockMvcBuilders.standaloneSetup(new S3Controller(null))
                .build();
        result = mockMvc.perform(get("/s3download"))
                .andReturn();
    }

    @Then("the response status should be {int}")
    public void the_response_status_should_be(Integer status) {
        // Simulate checking the response status
        MockHttpServletResponse response = result.getResponse();
        assertEquals(status, response.getStatus());
    }

    @Then("the response should contain the resource name {string}")
    public void the_response_should_contain_the_resource_name(String expectedName) throws IOException {
        // Simulate checking if the response contains the resource name
        String responseBody = result.getResponse().getContentAsString();
        assertEquals(expectedName, responseBody);
    }
}
