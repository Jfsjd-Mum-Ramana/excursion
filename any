Feature: Download file from mock S3

  Scenario: Downloading a file successfully
    Given an S3 bucket "my-bucket" with file key "my-file.txt"
    When the user requests to download the file
    Then the response status should be 200
    And the response should contain the file content "test content"
    And the response header "Content-Disposition" should be "attachment; filename=my-file.txt"





package org.vdsi.space.collections.customauditengine.cucumber.glue;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.WebApplicationContext;

import java.io.IOException;
import java.io.OutputStream;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class S3ControllerStepDefinitions {

    private MockMvc mockMvc;
    private MvcResult result;
    private String bucketName;
    private String key;

    @Given("^an S3 bucket \"([^\"]*)\" with file key \"([^\"]*)\"$")
    public void an_s3_bucket_with_file_key(String bucketName, String key) {
        this.bucketName = bucketName;
        this.key = key;

        // Initialize the MockMvc object with the embedded mock controller
        MockitoAnnotations.openMocks(this);
        this.mockMvc = MockMvcBuilders.standaloneSetup(new S3MockController()).build();
    }

    @When("^the user requests to download the file$")
    public void the_user_requests_to_download_the_file() throws Exception {
        result = mockMvc.perform(get("/s3download")
                .param("bucketName", bucketName)
                .param("key", key))
                .andExpect(status().isOk())
                .andReturn();
    }

    @Then("^the response status should be (\\d+)$")
    public void the_response_status_should_be(int status) {
        MockHttpServletResponse response = result.getResponse();
        Assertions.assertEquals(status, response.getStatus());
    }

    @Then("^the response should contain the file content \"([^\"]*)\"$")
    public void the_response_should_contain_the_file_content(String content) throws Exception {
        MockHttpServletResponse response = result.getResponse();
        Assertions.assertEquals(content, response.getContentAsString());
    }

    @Then("^the response header \"([^\"]*)\" should be \"([^\"]*)\"$")
    public void the_response_header_should_be(String headerName, String headerValue) {
        MockHttpServletResponse response = result.getResponse();
        Assertions.assertEquals(headerValue, response.getHeader(headerName));
    }

    @RestController
    private static class S3MockController {

        @GetMapping(value = "/s3download", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
        public void downloadFile(@RequestParam String bucketName,
                                 @RequestParam String key,
                                 MockHttpServletResponse response) throws IOException {
            String fileName = key.substring(key.lastIndexOf("/") + 1);
            String fileContent = "test content";

            response.setHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.setHeader("Content-Length", String.valueOf(fileContent.length()));

            try (OutputStream outputStream = response.getOutputStream()) {
                outputStream.write(fileContent.getBytes());
                outputStream.flush();
            }
        }
    }
}
