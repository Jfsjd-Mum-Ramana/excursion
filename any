public boolean retrieveData(SpaceCollector sp, String dateReceived, String auditTopic) throws Exception {
    LOGGER.info("Entered SSH service");
    String sshUsername = sp.getUserName();
    String sshHost = sp.getUrl();
    String sshPassword = sp.getPassword();
    int port = sp.getPort().intValue();

    JSch jsch = new JSch();
    Session session = null;
    ChannelSftp channelSftp = null;

    try {
        session = jsch.getSession(sshUsername, sshHost, port);
        session.setPassword(sshPassword);
        session.setConfig("StrictHostKeyChecking", "no");
        session.connect();

        channelSftp = (ChannelSftp) session.openChannel("sftp");
        channelSftp.connect();

        String remoteDirectory = FileUtil.getDirectory(sp.getInputFilePath());
        String localDirectory = FileUtil.getDirectory(sp.getOutputFilePath());
        LOGGER.info("Remote Directory: " + remoteDirectory + " Local Directory: " + localDirectory);

        retrieveAndProcessDirectory(sp, dateReceived, auditTopic, remoteDirectory, localDirectory, channelSftp);

    } finally {
        if (channelSftp != null) {
            channelSftp.disconnect();
        }
        if (session != null) {
            session.disconnect();
        }
    }
    return true;
}

private void retrieveAndProcessDirectory(SpaceCollector sp, String dateReceived, String auditTopic,
                                         String remoteDirectory, String localDirectory, ChannelSftp channelSftp) throws Exception {
    Vector<ChannelSftp.LsEntry> files = channelSftp.ls(remoteDirectory);

    // Download and process each file/directory
    for (ChannelSftp.LsEntry file : files) {
        if (!file.getAttrs().isDir()) {
            String remoteFilePath = remoteDirectory + "/" + file.getFilename();
            String localFilePath = localDirectory + "/" + file.getFilename();

            // Download file
            try (OutputStream outputStream = FileUtil.createOutputStream(localFilePath)) {
                channelSftp.get(remoteFilePath, outputStream);
            }

            // Process the downloaded file
            processFile(sp, dateReceived, auditTopic, localFilePath, localDirectory, channelSftp, remoteFilePath);
        } else {
            if (!".".equals(file.getFilename()) && !"..".equals(file.getFilename())) {
                String subRemoteDirectory = remoteDirectory + "/" + file.getFilename();
                String subLocalDirectory = localDirectory + "/" + file.getFilename();
                FileUtil.createDirectoryIfNotExists(subLocalDirectory);
                retrieveAndProcessDirectory(sp, dateReceived, auditTopic, subRemoteDirectory, subLocalDirectory, channelSftp);
            }
        }
    }
}

private void processFile(SpaceCollector sp, String dateReceived, String auditTopic,
                         String localFilePath, String localDirectory, ChannelSftp channelSftp, String remoteFilePath) throws Exception {
    if (ZipUtil.isZipFile(localFilePath)) {
        String extractedDir = localDirectory + "/" + FileUtil.getFileNameWithoutExtn(localFilePath);
        FileUtil.createDirectoryIfNotExists(extractedDir);
        ZipUtil.extract(localFilePath, extractedDir);

        // Process extracted files
        List<String> extractedFiles = FileUtil.readFilesInDirectory(extractedDir);
        for (String extractedFile : extractedFiles) {
            processFile(sp, dateReceived, auditTopic, extractedFile, extractedDir, channelSftp, remoteFilePath);
        }
    } else {
        // Push non-zip file to S3
        Path insideFilePath = Paths.get(localFilePath);
        Path folderPath = Paths.get(sp.getOutputFilePath()).relativize(insideFilePath.getParent());
        String unixBasedPath = folderPath.toString().replace("\\", "/");
        String key = String.format("%s/%s/%s/%s/%s",
                ProfileCheckConfig.activeProfile,
                sp.getFileType(),
                sp.getUrl(),
                dateUtil.getDateInMMddyyyy(),
                !StringUtils.isBlank(unixBasedPath)
                        ? (unixBasedPath.toString() + "/" + insideFilePath.getFileName())
                        : insideFilePath.getFileName());

        LOGGER.info("Filename: " + localFilePath + " Key: " + key);
        System.out.println("**************************");
        System.out.println("Filename: " + localFilePath);
        System.out.println("Key: " + key);
        System.out.println("folderPath: " + folderPath);
        System.out.println("Inside File Path: " + insideFilePath);
        System.out.println("**************************");
        s3Service.pushToS3(localFilePath, key);
        CollectionAudit audit = createAuditObject(sp, key, JobStatus.COLLECTION_SUCCESSFUL.toString(), "");
        kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(audit), "", auditTopic);
    }
}

