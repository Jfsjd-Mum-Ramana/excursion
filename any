Feature: Mocked Feature

  Scenario: Successful retrieval of some data
    Given a mocked resource ID
    When the user requests the resource data
    Then the response status should be 200
    And the response should contain the resource name "Mocked Resource"


import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(ResourceController.class)
public class MockedSteps {

    private MockMvc mockMvc;
    private MvcResult result;
    private String resourceId;

    @Given("a mocked resource ID")
    public void a_mocked_resource_id() {
        this.resourceId = "12345";
    }

    @When("the user requests the resource data")
    public void the_user_requests_the_resource_data() throws Exception {
        // Mocked implementation of the controller logic
        result = mockMvc.perform(get("/resources/{id}", resourceId))
                .andExpect(status().isOk())
                .andReturn();
    }

    @Then("the response status should be {int}")
    public void the_response_status_should_be(Integer status) {
        Assertions.assertEquals(status.intValue(), result.getResponse().getStatus());
    }

    @Then("the response should contain the resource name {string}")
    public void the_response_should_contain_the_resource_name(String expectedName) throws Exception {
        String responseContent = result.getResponse().getContentAsString();
        Assertions.assertTrue(responseContent.contains("\"name\":\"" + expectedName + "\""));
    }
}
