Feature: Mock S3 File Download

  Scenario: Successful file download from S3
    Given a mocked S3 bucket name
    And a mocked S3 key
    When the user requests to download the file
    Then the response status should be 200
    And the response should contain the file content "This is a test file."


import com.amazonaws.services.s3.AmazonS3;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(S3Controller.class)
public class MockS3ControllerSteps {

    @InjectMocks
    private S3Controller s3Controller;

    @MockBean
    private AmazonS3 s3Client;

    private MockMvc mockMvc;
    private MvcResult result;
    private String bucketName;
    private String key;
    private String expectedContent;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(s3Controller).build();
    }

    @Given("a mocked S3 bucket name")
    public void a_mocked_S3_bucket_name() {
        this.bucketName = "mocked-bucket";
    }

    @Given("a mocked S3 key")
    public void a_mocked_S3_key() {
        this.key = "mocked-key/test-file.txt";
        this.expectedContent = "This is a test file.";
    }

    @When("the user requests to download the file")
    public void the_user_requests_to_download_the_file() throws Exception {
        // Mocking the response content directly
        when(s3Client.getObject(bucketName, key)).thenAnswer(invocation -> {
            MockHttpServletResponse response = new MockHttpServletResponse();
            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
            response.setHeader("Content-Disposition", "attachment; filename=test-file.txt");
            response.setContentLength(expectedContent.length());
            response.getWriter().write(expectedContent);
            return null;
        });

        result = mockMvc.perform(get("/s3download")
                .param("bucketName", bucketName)
                .param("key", key))
                .andExpect(status().isOk())
                .andReturn();
    }

    @Then("the response status should be {int}")
    public void the_response_status_should_be(Integer status) {
        Assertions.assertEquals(status.intValue(), result.getResponse().getStatus());
    }

    @Then("the response should contain the file content {string}")
    public void the_response_should_contain_the_file_content(String expectedContent) throws Exception {
        String responseContent = result.getResponse().getContentAsString();
        Assertions.assertEquals(expectedContent, responseContent);
    }
}
