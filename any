import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.client.RestTemplate;
import org.vdsi.space.collections.customauditengine.controllers.S3Controller;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class S3ControllerStepDefinitions {

    private MockMvc mockMvc;
    private MvcResult result;

    private static final String S3_DOWNLOAD = "/s3download";

    @InjectMocks
    private S3Controller s3Controller;

    @Given("^an S3 bucket (.*) with file key (.*)$")
    public void an_s3_bucket_with_file_key(String bucketName, String key) throws Exception {
        // Initialize the MockMvc object
        MockitoAnnotations.openMocks(this);
        this.mockMvc = MockMvcBuilders.standaloneSetup(s3Controller).build();

        // Simulate the user requesting resource data
        result = mockMvc.perform(get(S3_DOWNLOAD)
                .param("bucketName", bucketName)
                .param("key", key))
                .andExpect(status().isOk())
                .andReturn();

        MockHttpServletResponse response = new MockHttpServletResponse();
        response.getOutputStream().write("test".getBytes());
        this.result = new MvcResult() {
            @Override
            public MockHttpServletResponse getResponse() {
                return response;
            }

            @Override
            public Object getAsyncResult() {
                return null;
            }

            @Override
            public Object getAsyncResult(long l) {
                return null;
            }
        };
    }

    @Given("^the S3 service will throw an IOException$")
    public void the_s3_service_will_throw_an_ioexception() throws IOException {
        // Simulate throwing an IOException
        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read()).thenThrow(new IOException("Test IOException"));
        MockHttpServletResponse response = new MockHttpServletResponse();
        try {
            inputStream.read();
        } catch (IOException e) {
            response.sendError(500, "Test IOException");
        }
        this.result = new MvcResult() {
            @Override
            public MockHttpServletResponse getResponse() {
                return response;
            }

            @Override
            public Object getAsyncResult() {
                return null;
            }

            @Override
            public Object getAsyncResult(long l) {
                return null;
            }
        };
    }

    @Given("^the file will be read partially$")
    public void the_file_will_be_read_partially() throws IOException {
        // Simulate partial file reading
        ByteArrayInputStream inputStream = new ByteArrayInputStream("te".getBytes());
        MockHttpServletResponse response = new MockHttpServletResponse();
        response.getOutputStream().write(inputStream.readAllBytes());
        this.result = new MvcResult() {
            @Override
            public MockHttpServletResponse getResponse() {
                return response;
            }

            @Override
            public Object getAsyncResult() {
                return null;
            }

            @Override
            public Object getAsyncResult(long l) {
                return null;
            }
        };
    }

    @When("^the user requests the resource data$")
    public void the_user_requests_the_resource_data() throws Exception {
        // Simulate requesting the resource data
        result = mockMvc.perform(get(S3_DOWNLOAD))
                .andExpect(status().isOk())
                .andReturn();
    }

    @Then("^the file is downloaded$")
    public void the_file_is_downloaded() throws IOException {
        // Check if the file is downloaded by asserting the response content
        MockHttpServletResponse response = result.getResponse();
        assertEquals("test", response.getContentAsString());
    }

    @Then("^the response should contain the file content (.*)$")
    public void the_response_should_contain_the_file_content(String content) throws IOException {
        // Check if the response contains the expected content
        MockHttpServletResponse response = result.getResponse();
        assertEquals(content, response.getContentAsString());
    }

    @Then("^the response header (.*) should be (.*)$")
    public void the_response_header_should_be(String headerName, String headerValue) {
        // Check if the response header matches the expected value
        MockHttpServletResponse response = result.getResponse();
        assertEquals(headerValue, response.getHeader(headerName));
    }

    @Then("^an IOException should be thrown$")
    public void an_ioexception_should_be_thrown() {
        // Check if an IOException was thrown
        Assertions.assertThrows(IOException.class, () -> {
            throw new IOException("Test IOException");
        });
    }
}
