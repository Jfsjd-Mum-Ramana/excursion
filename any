package org.vdsi.space.collections.customauditengine.controllers;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import org.junit.jupiter.api.Assertions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ContextConfiguration;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ContextConfiguration(classes = S3Controller.class)
public class S3ControllerGlue {

    @Autowired
    private S3Controller s3Controller;

    private MockHttpServletResponse response;

    @Given("an S3 bucket {string} with file key {string}")
    public void an_s3_bucket_with_file_key(String bucketName, String key) {
        S3Object s3Object = new S3Object();
        ObjectMetadata objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(5);
        s3Object.setObjectMetadata(objectMetadata);
        s3Object.setObjectContent(new S3ObjectInputStream(new ByteArrayInputStream("test".getBytes()), null));
        when(s3Client.getObject(bucketName, key)).thenReturn(s3Object);
    }

    @Given("the S3 service will throw an IOException")
    public void the_s3_service_will_throw_an_ioexception() throws IOException {
        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read()).thenThrow(new IOException("Test IOException"));
        S3Object s3Object = new S3Object();
        s3Object.setObjectContent(inputStream);
    }

    @Given("the file will be read partially")
    public void the_file_will_be_read_partially() throws IOException {
        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read()).thenReturn((int) 't').thenReturn((int) 'e').thenReturn(-1);
        S3Object s3Object = new S3Object();
        s3Object.setObjectContent(inputStream);
    }

    @Then("the file is downloaded")
    public void the_file_is_downloaded() throws IOException {
        response = new MockHttpServletResponse();
        s3Controller.downloadFile("bucket-name", "key/file.txt", response);
    }

    @Then("the response should contain the file content {string}")
    public void the_response_should_contain_the_file_content(String content) throws IOException {
        Assertions.assertEquals(content, response.getContentAsString());
    }

    @Then("the response header {string} should be {string}")
    public void the_response_header_should_be(String headerName, String headerValue) {
        Assertions.assertEquals(headerValue, response.getHeader(headerName));
    }

    @Then("an IOException should be thrown")
    public void an_ioexception_should_be_thrown() {
        Assertions.assertThrows(IOException.class, () -> {
            s3Controller.downloadFile("bucket-name", "key/file.txt", response);
        });
    }
}
