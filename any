import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.ByteArrayInputStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class SimpleS3ControllerSteps {

    @InjectMocks
    private S3Controller s3Controller;

    @Mock
    private AmazonS3 s3Client;

    private String bucketName;
    private String key;
    private S3Object s3Object;

    @Given("the S3 bucket name is {string}")
    public void the_S3_bucket_name_is(String bucketName) {
        this.bucketName = bucketName;
    }

    @Given("the S3 key is {string}")
    public void the_S3_key_is(String key) {
        this.key = key;
    }

    @When("the user requests to download the file")
    public void the_user_requests_to_download_the_file() {
        // Mock S3Object and its input stream
        String fileContent = "This is a test file.";
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(fileContent.getBytes());
        S3ObjectInputStream s3ObjectInputStream = new S3ObjectInputStream(byteArrayInputStream, null);

        // Set object metadata
        ObjectMetadata metadata = new ObjectMetadata();
        metadata.setContentLength(fileContent.length());

        // Create a mock S3Object
        s3Object = new S3Object();
        s3Object.setObjectContent(s3ObjectInputStream);
        s3Object.setObjectMetadata(metadata);

        // Mock the s3Client.getObject method
        when(s3Client.getObject(bucketName, key)).thenReturn(s3Object);
    }

    @Then("the file {string} should be downloaded successfully")
    public void the_file_should_be_downloaded_successfully(String fileName) {
        // Simulate file download and assert file content
        assertEquals("This is a test file.", s3Controller.downloadFile(bucketName, key));
    }
}





Feature: Simple S3 File Download

  Scenario: Successful file download from S3
    Given the S3 bucket name is "my-test-bucket"
    And the S3 key is "test-file.txt"
    When the user requests to download the file
    Then the file "test-file.txt" should be downloaded successfully
