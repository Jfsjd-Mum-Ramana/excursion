Feature: S3 File Download
  As a user
  I want to download files from an S3 bucket
  So that I can retrieve stored files

  Scenario: Successfully download a file from S3
    Given an S3 bucket "bucket-name" with file key "key/file.txt"
    When I request to download the file
    Then the response should contain the file content "test"
    And the response header "Content-Disposition" should be "attachment; filename=file.txt"
    And the response header "Content-Length" should be "5"

  Scenario: IOException during file download
    Given an S3 bucket "bucket-name" with file key "key/file.txt"
    And the S3 service will throw an IOException
    When I request to download the file
    Then an IOException should be thrown

  Scenario: Partial read during file download
    Given an S3 bucket "bucket-name" with file key "key/file.txt"
    And the file will be read partially
    When I request to download the file
    Then the response should contain the file content "test"
    And the response header "Content-Disposition" should be "attachment; filename=file.txt"
    And the response header "Content-Length" should be "5"




package org.vdsi.space.collections.customauditengine.controllers;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import io.cucumber.java.Before;
import io.cucumber.java.en.*;
import org.junit.jupiter.api.Assertions;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.MockHttpServletResponse;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class S3ControllerStepDefinitions {

    @Mock
    private AmazonS3 s3Client;

    @InjectMocks
    private S3Controller s3Controller;

    private MockHttpServletResponse response;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        response = new MockHttpServletResponse();
    }

    @Given("an S3 bucket {string} with file key {string}")
    public void an_s3_bucket_with_file_key(String bucketName, String key) {
        S3Object s3Object = new S3Object();
        ObjectMetadata objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(5);
        s3Object.setObjectMetadata(objectMetadata);
        s3Object.setObjectContent(new S3ObjectInputStream(new ByteArrayInputStream("test".getBytes()), null));
        when(s3Client.getObject(bucketName, key)).thenReturn(s3Object);
    }

    @Given("the S3 service will throw an IOException")
    public void the_s3_service_will_throw_an_ioexception() throws IOException {
        S3Object s3Object = new S3Object();
        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException("Test IOException"));
        s3Object.setObjectContent(inputStream);
        when(s3Client.getObject(anyString(), anyString())).thenReturn(s3Object);
    }

    @Given("the file will be read partially")
    public void the_file_will_be_read_partially() throws IOException {
        S3Object s3Object = new S3Object();
        ObjectMetadata objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(5);
        s3Object.setObjectMetadata(objectMetadata);

        S3ObjectInputStream inputStream = mock(S3ObjectInputStream.class);
        when(inputStream.read(any(byte[].class), anyInt(), anyInt()))
                .thenReturn(2)
                .thenReturn(2)
                .thenReturn(-1);
        s3Object.setObjectContent(inputStream);
        when(s3Client.getObject(anyString(), anyString())).thenReturn(s3Object);
    }

    @When("I request to download the file")
    public void i_request_to_download_the_file() throws IOException {
        s3Controller.downloadFile("bucket-name", "key/file.txt", response);
    }

    @Then("the response should contain the file content {string}")
    public void the_response_should_contain_the_file_content(String content) throws IOException {
        Assertions.assertEquals(content, response.getContentAsString());
    }

    @Then("the response header {string} should be {string}")
    public void the_response_header_should_be(String headerName, String headerValue) {
        Assertions.assertEquals(headerValue, response.getHeader(headerName));
    }

    @Then("an IOException should be thrown")
    public void an_ioexception_should_be_thrown() {
        Assertions.assertThrows(IOException.class, () -> {
            s3Controller.downloadFile("bucket-name", "key/file.txt", response);
        });
    }
}
